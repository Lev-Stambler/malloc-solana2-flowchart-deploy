{"version":3,"sources":["../../../malloc-core/ts-packages/malloc-sdk/lib/index.ts","interfaces.ts","components/graph-visualizer.jsx","utils/files.ts","globalStore.ts","utils/anchor.ts","utils/errors.ts","utils/graph.ts","state/flowchart-store.ts","utils/spl-tokens.ts","../../../malloc-spl/src/index.ts","utils/action-types.ts","utils/sdk-interpelator.ts","components/tokens/TokenAccountChooser.tsx","components/table/table-cells.tsx","components/usdc-airdrop/perform-usdc-airdrop.ts","components/tablegui.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","../../../malloc-spl/src/swap/swap-interfaces.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/constants.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/utils/tokens.ts","utils/malloc.ts","../../../malloc-spl/src/mint/index.ts","../../../malloc-spl/src/mint-to/index.ts","../../../malloc-spl/src/swap/index.ts","../../../malloc-spl/src/transfer/index.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/graph-utils.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/solana-utils.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/malloc-sdk.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/interfaces/index.ts","config/constants.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/utils/object.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/builder/index.ts"],"names":["InputClassNames","GraphVisualizer","graph","useState","data","setData","svgRef","useRef","useEffect","nodes","id","links","source","target","type","types","color","d3","linkArc","d","r","Math","hypot","x","y","map","Object","create","simulation","force","strength","svg","current","attr","style","append","selectAll","join","link","URL","location","node","call","on","event","active","alphaTarget","restart","fx","fy","drag","text","clone","lower","border","padding","width","ref","onClick","newData","value","pop","saveStringToFile","filename","JSON","stringify","undefined","blob","Blob","e","document","createEvent","a","createElement","download","href","window","createObjectURL","dataset","downloadurl","initMouseEvent","dispatchEvent","console","error","getFileContent","fileDialog","accept","SOURCE_NODE_ID","ACTION_TYPES","NEXT_ACTION_ROW","className","CellClassNames","actionVertex","wholeNumber","INIT_NEXT_ACTION","readOnly","initState","selected","counter","new_action","sourceMint","hiddenInputData","input","tokenAccountOnlyInit","fractionNumber","next_actions","globalStore","Store","setGlobalStoreFromFile","fileContents","length","alert","parsed","parse","log","setState","downloadGlobalStore","state","getProvider","wallet","Provider","Connection","getConstants","solana","RPC","handleError","errorType","eCast","msg","fullError","ErrorGenerator","tokAccount","newFrontendError","toString","amount","mintAccount","getSourceNode","g","getSourceNodeAccount","inp","getSourceNodeAmount","getAllVertices","keys","getNextVertices","vertex","nextActionSet","slice","nextAction","parseInt","filter","i","solanaSplStore","derivedTokenAccounts","tokenList","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","getTokenLists","provider","getCached","TokenListProvider","resolve","tokens","filterByClusterSlug","NETWORK","getList","getDemoTokenInfo","usdcMint","PublicKey","demo","FAKE_USDC","aMint","FAKE_TOKEN_A","getMintInfo","usdcInfo","aInfo","chainId","name","symbol","address","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","associated","findAllAssociatedTokenAddress","mints","Promise","all","m","getTokenAccountInfo","tokenAddr","connection","getAccountInfo","account","parseTokenAccount","mintAddr","parseMintAccount","MallocSPLBuildActionMap","addActionToMap","actionLib","actionTypeUID","SwapAction","TransferAction","MintAction","MintToAction","getActionTypeUIDFromVertex","vertexType","getActionPIDFromVertex","mallocSpl","SWAP_PROGRAM_ID","TRANSFER_PROGRAM_ID","DUMMY_PASS_THROUGH","MINT_TO","PID","MALLOC_PROGRAM_ID","getMallocSdk","MallocSdk","getInputFromActionInput","actionInput","ret","inpItem","getActionData","actionId","allActionIds","incomingVertices","v","some","nextEdgeSet","includes","getAllIncomingVertexIds","nextNodes","next","actionIdx","indexOf","fraction","getNextNodes","split","buildActionInputs","actionPID","actionMetadata","ripeAmount","_buildNonUserSpecificConstruction","hiddenInputDatas","actionVertices","initialSplits","initialActionIndices","actionDatas","getInitialInfo","inAccount","sourceNode","tokenInInfo","mint","mintInfo","amountInF","parseFloat","amountIn","utils","fromReadableNumber","decimals","nextFromSource","initialMint","n","compileStateIntoSDKInput","preferredTokenAccounts","hiddenData","vertices","nonUserSpecific","builder","buildConstructionFromNonUserSpecific","toBase58","construction","actions","amountInAccount","opts","run","sdk","buildTxs","sendRequests","prepareCommitment","skipPreflight","preflightCommitment","commitment","actionCommitment","compileAndRunMallocSDK","buildInst","txs","getModalStyle","top","left","transform","useStyles","makeStyles","theme","createStyles","paper","position","backgroundColor","palette","background","boxShadow","shadows","spacing","TokenLine","tok","setChoosen","display","gridTemplateColumns","gap","info","shortenAddress","balance","toReadableNumber","u64","TokenAccountChooser","props","onlyWithInitializedAccounts","classes","React","modalStyle","open","setOpen","customTokenAccount","setCustomTokenAccount","customMintAccount","setCustomMintAccount","useAnchorWallet","choosen","solanaSplStoreHook","useStore","loadTokens","publicKey","t","associatedAddr","addr","bals","accounts","accountsFiltered","accountsMapped","handleClose","onClose","choosenType","tokenAccount","tokAccountData","bal","body","onBlur","currentTarget","blur","height","zIndex","justifyItems","justifyContent","alignItems","overflow","maxHeight","includeCustomTokenAccount","TextField","label","onChange","onFocus","buttonText","InputEditor","Input","cell","isWholeNumber","isFractionNumber","TokenOrMintEditor","onlyWithInitialized","splTok","ActionVertexEditor","initIdx","splice","getActionVertices","setActive","pause","setPause","paused","Select","labelId","MenuItem","onMouseOver","TableCellEditor","mintAccountOnlyInit","other","richUSDCAirdroperSK","Uint8Array","richUSDCSigner","Wallet","Keypair","fromSecretKey","getRichUsdcProvider","endpointURL","performUsdcAirdrop","userAddr","tryCreateAssociatedAccount","airdrop","FAKE_USDC_GD","instr","Token","createAssociatedTokenAccountInstruction","tx","Transaction","add","send","gdUsdc","airDropToTokenAccounts","amountAirdrop","transferTxs","createTransferInstruction","TableGUI","buttonStyle","maxWidth","minWidth","minHeight","loadingAirdrop","setLoadingAirdrop","loadingCompileAndRun","setLoadingCompileAndRun","setInput","mintName","sourceAccount","Card","CardContent","size","aria-label","key","index","Button","variant","node_id","init","rent","SYSVAR_RENT_PUBKEY","serumDexProgramId","projectSerum","DEX_PROGRAM_ID","getInitInputForActionType","new_node","Array","expectedNumberOfOutMints","DataEditor","next_action_by_mint","CardActions","temp","disabled","then","_","catch","ConnectButton","styled","WalletDialogButton","Home","span","setBalance","message","severity","alertState","setAlertState","useWallet","getBalance","LAMPORTS_PER_SOL","connected","marginTop","toLocaleString","Snackbar","autoHideDuration","Alert","config","anchor","network","rpcHost","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","autoConnect","txTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Side","SwapInstructionByte","CONSTRUCTION_ACCOUNT_SIZE","LIFETIME_RESULT_ACCOUNT_MS","ONE_HOUR_MS","LIFETIME_CONSTRUCTION_ACCOUNT_MS","LAMPORTS_PER_EPOCH","MS_PER_EPOCH","tryCreateAssociatedAccountInst","owner","payer","inst","associateTokAccount","transferToTx","destination","authority","signer","secretKey","transfer","signers","getTokenAccountUsedByMalloc","tokenAuthority","createTokenAccountsForActions","fundingAccount","getMintsNoDuplicates","tokenCreationOptions","skipOutTokenCreations","skipIdxs","tokenMintOuts","forEach","push","skipInTokenCreation","tokenMintIn","flat","pk","associatedToSignerAccount","insts","createTokTx","Set","pkToStr","number","wholeStr","substring","fractionStr","padStart","pattern","test","replace","formatWithCommas","wholePart","fracPart","Error","padEnd","chars","buildIsolatedMintAction","inMint","inTokenAccount","dummyPassThroughActionPID","amountOutExpanded","amountOut","outTokenAccount","serializeData","createMintInstructions","addDefaultTokAccounts","actionData","tokenAccountOuts","actionAccounts","actionProgram","additionalSigners","instructions","isolatedAction","Buffer","from","buildIsolatedAction","inputTokenAccount","mintToPID","authoritySigner","authoritySecret","mintIn","recipientWallet","associateTokAccountRecipient","createTokInstr","isWriteable","isSigner","buildIsolatedSwapAction","swapPID","outMint","buildSwapAccounts","swapInfo","packSwapData","BasicSwap","side","minOut","swapAccountsToActionAccounts","swapAccounts","preActionTxs","openOrderInitTx","serumDexId","getMarket","marketRet","marketPk","Market","load","marketSel","getOpenOrdersAccount","openOrderAccountData","getVaultOwnerAndNonce","decoded","ownAddress","vaultSigner","coinWallet","Bid","pcWallet","market","requestQueue","eventQueue","bids","asks","coinVault","baseVault","pcVault","quoteVault","openOrders","openOrdersAccount","openOrderPk","orderPayerTokenAccount","dexProgram","tokenProgram","openOrderTx","dexPID","OpenOrders","findForMarketAndOwner","openOrderAccount","Account","openOrdersTx","makeCreateAccountTransaction","Ask","getMarketsFromBaseMinttoQuoteMint","marketPks","instrByte","packedMinOut","toArrayLike","initPart","concat","referralAccount","outAccount","marketPublicKey","dexProgramId","nonce","BN","toNumber","createProgramAddress","vaultOwner","iaddn","baseMint","quoteMint","serumProgId","getLayout","findAccountsByMints","transferPID","buildSeqListOfActionCalls","actionMetas","initIndices","initHitCounts","fill","simulateDAG","hitCounts","toHit","newHitCounts","getOccurrence","newRipeActions","newToHit","o","array","calculateRent","durationMs","ceil","mallocProgram","this","Program","MALLOC_IDL","_authority","_inAuth","amountInAuthority","tokenAccounts","tokenTxs","createAndInitConstruction","constructionTx","addConstructionActionsTx","addActionsToConstruction","checkMintsAreTheSame","initMint","transferTx","prepareConstructionTx","prepareConstruction","hitOrder","initResultAccount","ACTION_TEMPLATE_IDL","initResultAccounts","actionCtxFilled","action","toAdd","ctx","resultAccount","processTxs","hitIndex","processAction","atStartOfPrepareTxs","getAllAtStartOfPrepareTxs","txsPrepare","txsActionsCalls","txsActionCalls","resultAccounts","fetch","constructionState","actionSerialize","nextNode","actionCallSerialize","numbTimesHit","callAmount","actionCalls","readyCallIdxList","constructionData","options","sendAll","txHashesPrepare","onPrepareAccountsDone","txHashes","program","numbActions","ConstructionAccount","web3","generate","transaction","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","lamports","programId","initConstruction","actionMetadataWithU64","addActions","initActionIdx","initActionSplits","actionAccountsCtx","auth","tokauth","signersIsolated","actionCtxProxy","actionTemplateProgram","numberOfPossibleOutputTokens","result","getMinimumBalanceForRentExemption","resultSize","calcSizeResultAccount","numberOfActions","every","env","process","INITIAL_SPLITTER_ID_UUID","deepCloneObject","obj","Date","constructor","prototype","hasOwnProperty","getMintAccountFromPriorActions","idx","idxInNextNodes","item","getPreviousActions","prev","firstMint","buildActionMap","initTokenAccount","initMintAccount","orderActionsHit","buildFN","mergeConstructions","parentConstruction","childConstruction","appendChildInitToParent","childConstructionCloned","parentConstructionClone","newActionDatasArray","offset","nextNodeSet","childInitialActionsToAdd","appendToInitial","splitFrac","indexInParent","nextNodeIdx","c"],"mappings":"6lBAAA,uL,8oBCMYA,E,6OCuKGC,EAxKS,SAACC,GAAW,IAAD,EAEPC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,IAFf,mBAExBC,EAFwB,KAElBC,EAFkB,KAIzBC,EAASC,mBAEfC,qBAAU,WAKN,IAAIC,EAAQ,CACR,CAACC,GAAI,aACL,CAACA,GAAI,UACL,CAACA,GAAI,QAILC,EAAQ,CACR,CACIC,OAAQ,YACRC,OAAQ,SACRC,KAAM,aAEV,CACIF,OAAQ,YACRC,OAAQ,MACRC,KAAM,cAIVC,EAAQ,CACR,aAGEX,EAAO,CACTK,QACAE,SAMAK,EAAQC,IAAgBF,EAAOE,KAE/BC,EAAU,SAACC,GACX,IAAMC,EAAIC,KAAKC,MAAMH,EAAEN,OAAOU,EAAIJ,EAAEP,OAAOW,EAAGJ,EAAEN,OAAOW,EAAIL,EAAEP,OAAOY,GACpE,MAAM,oBAAN,OACKL,EAAEP,OAAOW,EADd,YACmBJ,EAAEP,OAAOY,EAD5B,4BAEKJ,EAFL,YAEUA,EAFV,kBAEqBD,EAAEN,OAAOU,EAF9B,YAEmCJ,EAAEN,OAAOW,EAF5C,mBA+BJb,EAAQP,EAAKO,MAAMc,KAAI,SAAAN,GAAC,OAAIO,OAAOC,OAAOR,MAC1CV,EAAQL,EAAKK,MAAMgB,KAAI,SAAAN,GAAC,OAAIO,OAAOC,OAAOR,MAE1C,IAAMS,EAAaX,IAAmBR,GACjCoB,MAAM,OAAQZ,IAAaN,GAAOD,IAAG,SAAAS,GAAC,OAAIA,EAAET,OAC5CmB,MAAM,SAAUZ,MAAmBa,UAAU,MAC7CD,MAAM,IAAKZ,OACXY,MAAM,IAAKZ,OAEVc,EAAMd,IAAUX,EAAO0B,SACxBC,KAAK,UAAW,EAAC,KAAY,IA9CX,IAAK,MA+CvBC,MAAM,OAAQ,mBAGnBH,EAAII,OAAO,QAAQC,UAAU,UAC1BhC,KAAKW,GACLsB,KAAK,UACHJ,KAAK,MAAM,SAAAd,GAAC,sBAAaA,MACzBc,KAAK,UAAW,cAChBA,KAAK,OAAQ,IACbA,KAAK,QAAS,IACdA,KAAK,cAAe,GACpBA,KAAK,eAAgB,GACrBA,KAAK,SAAU,QACjBE,OAAO,QACLF,KAAK,OAAQjB,GACbiB,KAAK,IAAK,kBAEf,IAAMK,EAAOP,EAAII,OAAO,KACnBF,KAAK,OAAQ,QACbA,KAAK,eAAgB,KACvBG,UAAU,QACVhC,KAAKO,GACL0B,KAAK,QACHJ,KAAK,UAAU,SAAAd,GAAC,OAAIH,EAAMG,EAAEL,SAC5BmB,KAAK,cAAc,SAAAd,GAAC,oBAAW,IAAIoB,IAAJ,iBAAkBpB,EAAEL,MAAQ0B,UAAvC,QAEnBC,EAAOV,EAAII,OAAO,KACnBF,KAAK,OAAQ,gBACbA,KAAK,iBAAkB,SACvBA,KAAK,kBAAmB,SAC1BG,UAAU,KACVhC,KAAKK,GACL4B,KAAK,KACHK,KArEM,SAAAd,GAmBP,OAAOX,MACF0B,GAAG,SAlBR,SAAqBC,EAAOzB,GACrByB,EAAMC,QAAQjB,EAAWkB,YAAY,IAAKC,UAC/C5B,EAAE6B,GAAK7B,EAAEI,EACTJ,EAAE8B,GAAK9B,EAAEK,KAgBNmB,GAAG,QAbR,SAAiBC,EAAOzB,GACtBA,EAAE6B,GAAKJ,EAAMrB,EACbJ,EAAE8B,GAAKL,EAAMpB,KAYVmB,GAAG,OATR,SAAmBC,EAAOzB,GACnByB,EAAMC,QAAQjB,EAAWkB,YAAY,GAC1C3B,EAAE6B,GAAK,KACP7B,EAAE8B,GAAK,QAqDHC,CAAKtB,IAEfa,EAAKN,OAAO,UACPF,KAAK,SAAU,SACfA,KAAK,eAAgB,KACrBA,KAAK,IAAK,GAEfQ,EAAKN,OAAO,QACPF,KAAK,IAAK,GACVA,KAAK,IAAK,UACVkB,MAAK,SAAAhC,GAAC,OAAIA,EAAET,MACd0C,OAAM,GAAMC,QACVpB,KAAK,OAAQ,QACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,GAE1BL,EAAWe,GAAG,QAAQ,WACpBL,EAAKL,KAAK,IAAKf,GACfuB,EAAKR,KAAK,aAAa,SAAAd,GAAC,0BAAiBA,EAAEI,EAAnB,YAAwBJ,EAAEK,EAA1B,aAI3B,IAaH,OACI,sBAAKU,MAAO,CAAEoB,OAAQ,kBAAmBC,QAAS,OAAQC,MAAO,SAAjE,UACE,qBAAKC,IAAKnD,IACV,uBACA,wBAAQoD,QAfC,WACX,IAAMC,EAAUvD,EAAKqB,KAAI,SAAAmC,GAAK,OAAIA,EAAQ,KAC1CvD,EAAQsD,IAaN,oBACA,uBACA,wBAAQD,QAZK,WACf,IAAMC,EAAO,YAAOvD,GACpBuD,EAAQE,MACRxD,EAAQsD,IASN,wB,mBDlKE3D,K,6BAAAA,E,6BAAAA,E,2BAAAA,E,+CAAAA,E,6CAAAA,E,2BAAAA,E,iCAAAA,E,eAAAA,M,2BEAC8D,EAAmB,SAAC1D,EAAW2D,GAC1C,GAAK3D,EAAL,CAKK2D,IAAUA,EAAW,gBAEN,kBAAT3D,IACTA,EAAO4D,KAAKC,UAAU7D,OAAM8D,EAAW,IAGzC,IAAIC,EAAO,IAAIC,KAAK,CAAChE,GAAO,CAAEU,KAAM,cAClCuD,EAAIC,SAASC,YAAY,eACzBC,EAAIF,SAASG,cAAc,KAE7BD,EAAEE,SAAWX,EACbS,EAAEG,KAAOC,OAAOrC,IAAIsC,gBAAgBV,GACpCK,EAAEM,QAAQC,YAAc,CAAC,YAAaP,EAAEE,SAAUF,EAAEG,MAAMtC,KAAK,KAC/DgC,EAAEW,eACA,SACA,GACA,EACAJ,OACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,EACA,EACA,MAEFJ,EAAES,cAAcZ,QAlCda,QAAQC,MAAM,YAqCLC,EAAc,uCAAG,sBAAAZ,EAAA,sEAChBa,IAAW,CACvBC,OAAQ,qBAFoB,mFAAH,qDCvBdC,EAAiB,WAGjBC,EAA8B,CACzC,OACA,WACA,OACA,WAGWC,EAAkB,CAC7B,CAAE7B,MAAO,GAAI8B,UAAWC,EAAeC,cACvC,CAAEhC,MAAO,GAAI8B,UAAWC,EAAeE,cAE5BC,EAAiC,CAC5C,CACE,CAAElC,MAAO,eAAgBmC,UAAU,GACnC,CAAEnC,MAAO,iBAAkBmC,UAAU,IAEvCN,GAGIO,EAAyB,CAC7BC,SAAUV,EACVW,QAAS,EACTC,WAAY,OACZjG,MAAO,GACPkG,WAAY,UACZC,gBAAiB,IAGnBL,EAAU9F,MAAMqF,YAAkB,CAChCe,MAAO,CACL,CACE,CACE1C,MAAO,oBACPmC,UAAU,GAEZ,CAAEnC,MAAO,GAAI8B,UAAWC,EAAeY,uBAEzC,CACE,CACE3C,MAAO,SACPmC,UAAU,GAEZ,CAAEnC,MAAO,GAAI8B,UAAWC,EAAea,kBAG3CC,aAAc,CAACX,IAGV,IAAMY,EAAc,IAAIC,QAAmBX,GAIrCY,EAAsB,uCAAG,8BAAApC,EAAA,sEACTY,IADS,aAC9ByB,EAD8B,QAEnBC,OAAS,GAFU,uBAGlCC,MAAM,wBAH4B,sCAOrB/C,KAPqB,SAOJ6C,EAAa,GAAG1D,OAPZ,mBAO9B6D,EAP8B,KAOhBC,MAPgB,gBAQpC/B,QAAQgC,IAAIF,GAEZA,EAAO9G,MAAMqF,YAAgBe,MAAM,GAAG,GAAG1C,MAAQ,GACjD8C,EAAYS,SAASH,GAXe,4CAAH,qDActBI,EAAmB,uCAAG,sBAAA5C,EAAA,sEAC3BV,EAAiBE,KAAKC,UAAUyC,EAAYW,OAAQ,aADzB,2CAAH,qD,0BCtFnBC,EAAc,SAACC,GAC1B,OAAO,IAAIC,IAAS,IAAIC,aAAWC,cAAeC,OAAOC,KAAML,EAAQ,KCI5DM,EAAc,SAACxD,GAE1B,GADAa,QAAQC,MAAMd,GATmB,4BAU5B,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGyD,WAML,MADAf,MAAM,gCAAD,OAAiC1C,IAChCA,EALN,IAAM0D,EAAQ1D,EAEd,GADA0C,MAAMgB,EAAMC,KACTD,EAAME,UAAW,MAAMF,EAAME,WAOvBC,EACmB,SAACC,GAAD,OAC5BC,EAAiB,qBAAD,OACOD,EAAWE,WADlB,qBAFPH,EAKW,SAACI,GAAD,OACpBF,EAAiB,GAAD,OAAIE,EAAJ,0CANPJ,EAOkB,SAC3BK,EACAJ,GAF2B,OAI3BC,EACED,EAAU,mBACMI,EAAYF,WADlB,6BACiDF,EAAWE,WAD5D,sCAEME,EAAYF,WAFlB,qBAMVD,EAAmB,SAACJ,EAAa3D,GACrC,MAAO,CACL2D,MACAC,UAAW5D,EACXvD,KAAM,2BC/BG0H,EAAgB,SAACC,GAAD,OAAkBA,EAAElD,aAEpCmD,EAAuB,SAACC,GAAD,OAA0BA,EAAI,GAAG,GAAG/E,OAC3DgF,GAAsB,SAACD,GAAD,OAA0BA,EAAI,GAAG,GAAG/E,OAC1DiF,GAAiB,SAACJ,GAAD,OAA4B/G,OAAOoH,KAAKL,IAYzDM,GAAkB,SAC7BN,EACAO,GAiBA,OAfoBP,EAAEO,GAAQvC,aACNhF,KAAI,SAACwH,GAY3B,OAX8BA,EAAcC,MAAM,GACXzH,KAAI,SAAC0H,GAC1C,OAAKA,EAAW,GAAGvF,OAAUuF,EAAW,GAAGvF,MAGpC,CACL0E,OAAQc,SAASD,EAAW,GAAGvF,OAC/BlD,GAAIyI,EAAW,GAAGvF,OAJX,QAQKyF,QAAO,SAAChF,EAAGiF,GAAJ,OAAgB,OAANjF,S,8BCrBxBkF,GAAiB,IAAI5C,QAAiB,CACjD6C,qBAAsB,KACtBC,UAAW,OCRPC,GACJC,+BAKWC,GAAa,uCAAG,WAC3BC,GAD2B,iBAAArF,EAAA,6DAGrBsF,EAHqB,+BAAAtF,EAAA,MAGT,8BAAAA,EAAA,0DACZ+E,GAAelC,MAAMoC,UADT,yCAC2BF,GAAelC,MAAMoC,WADhD,wBAEK,IAAIM,MAAoBC,UAF7B,cAEVC,EAFU,OAGVR,EAAYQ,EACfC,oBAAoBxC,cAAeC,OAAOwC,SAC1CC,UACHb,GAAepC,SAAf,2BACKoC,GAAelC,OADpB,IAEEoC,eARc,kBAUTA,GAVS,2CAHS,8DAeHK,IAfG,UAerBL,EAfqB,OAkBW,WAAlC/B,cAAeC,OAAOwC,QAlBC,iDAmBdV,GAnBc,mBAmBOY,GAAiBR,GAnBxB,oIAqBlBJ,GArBkB,4CAAH,sDAyBpBY,GAAgB,uCAAG,WAAOR,GAAP,qBAAArF,EAAA,6DACjB8F,EAAW,IAAIC,YAAU7C,cAAe8C,KAAKC,WAC7CC,EAAQ,IAAIH,YAAU7C,cAAe8C,KAAKG,cAFzB,SAGAC,GAAYf,EAAUS,GAHtB,cAGjBO,EAHiB,gBAIHD,GAAYf,EAAUa,GAJnB,UAIjBI,EAJiB,OAKlBD,GAAaC,EALK,sBAMf,gCANe,iCAQhB,CAAC,2BAEDD,GAFA,IAGHE,SAAU,EACVC,KAAM,YACNC,OAAQ,QACRC,QAASxD,cAAe8C,KAAKC,YAN1B,2BASAK,GATA,IAUHC,SAAU,EACVC,KAAM,gBACNC,OAAQ,WACRC,QAASxD,cAAe8C,KAAKG,iBArBV,4CAAH,sDAgCTQ,GAA0B,uCAAG,WACxCC,EACAC,GAFwC,eAAA7G,EAAA,sEAIf+F,YAAUe,mBACjC,CACEF,EAAcG,WACdC,oBAAiBD,WACjB,IAAIhB,YAAUc,GAAkBE,YAElC7B,IAVsC,cAIlC+B,EAJkC,yBAYjCA,EAAW,IAZsB,2CAAH,wDAc1BC,GAA6B,uCAAG,WAC3CN,EACAO,GAF2C,SAAAnH,EAAA,+EAI3CoH,QAAQC,IAAIF,EAAMlK,KAAI,SAACqK,GAAD,OAAOX,GAA2BC,EAAeU,QAJ5B,2CAAH,wDAM7BC,GAAmB,uCAAG,WACjClC,EACAmC,GAFiC,iBAAAxH,EAAA,sEAIXqF,EAASoC,WAAWC,eAAeF,GAJxB,UAI3BG,EAJ2B,gDAKZ,MALY,uBAOzB/L,EAAOgM,6BAAkBD,EAAQ/L,MAPR,kBAQxBA,GARwB,yCAU/B8E,QAAQC,MAAM,oDAAd,MAV+B,kBAWxB,MAXwB,0DAAH,wDAenByF,GAAW,uCAAG,WACzBf,EACAwC,GAFyB,eAAA7H,EAAA,sEAIHqF,EAASoC,WAAWC,eAAeG,GAJhC,UAInBF,EAJmB,gDAKJ,MALI,gCAMlBG,4BAAiBH,EAAQ/L,OANP,2CAAH,wD,wCC1GXmM,GAA0C,GAGjDC,GAAiB,SAACC,GACtBF,GAAwBE,EAAUC,eAAiBD,GAGrDD,GAAeG,MACfH,GAAeI,MACfJ,GAAeK,MACfL,GAAeM,MCVR,IAAMC,GAA6B,SAACC,GACzC,GAAmB,SAAfA,EACF,OAAOL,KAAWD,cACb,GAAmB,aAAfM,EACT,OAAOJ,KAAeF,cACjB,GAAmB,SAAfM,EACT,OAAOH,KAAWH,cACb,GAAmB,YAAfM,EACT,OAAOF,KAAaJ,cACf,uCAAiCM,IAI7BC,GAAyB,SAACD,GACrC,GAAmB,SAAfA,EACF,OAAOtF,cAAewF,UAAUC,gBAC3B,GAAmB,aAAfH,EACT,OAAOtF,cAAewF,UAAUE,oBAC3B,GAAmB,SAAfJ,EACT,OAAOtF,cAAewF,UAAUG,mBAC3B,GAAmB,YAAfL,EACT,OAAOtF,cAAewF,UAAUI,QAElC,KAAK,2BAAL,OAAiCN,ICgB7BO,GAAM,IAAIhD,YAAU7C,cAAe8F,mBACnCC,GAAe,SAAClG,GAAD,OACnB,IAAImG,YAAUH,GAAKjG,EAAYC,KAS3BoG,GAA0B,SAC9BC,EACAvH,GAEA,IAAMwH,EAAM,GAIZ,OAHAD,EAAYnM,KAAI,SAACqM,GACfD,EAAIC,EAAQ,GAAGlK,OAASkK,EAAQ,GAAGlK,SAE9B,2BAAKiK,GAAQxH,IAwBhB0H,GAAgB,SACpBC,EACAC,EACA/N,EACAmG,GAEA,IAAM6H,EA7CwB,SAACF,EAAkB9N,GAAnB,OAC9B2I,GAAe3I,GAAOmJ,QAAO,SAAC8E,GAAD,OAC3BpF,GAAgB7I,EAAOiO,GAAGC,MAAK,SAACC,GAAD,OAC7BA,EAAY5M,KAAI,SAAC6H,GAAD,OAAOA,EAAE5I,MAAI4N,SAASN,SA0CjBO,CAAwBP,EAAU9N,GAErDsO,EA7Ba,SACnBP,EACAD,EACA9N,GAeA,OAboB6I,GAAgB7I,EAAO8N,GAEqBvM,KAC9D,SAACwH,GACC,OAAOA,EAAcxH,KAAI,SAACgN,GACxB,MAAO,CACLC,UAAWT,EAAaU,QAAQF,EAAK/N,IACrCkO,SAAUH,EAAKnG,cAiBwBuG,CAC7CZ,EACAD,EACA9N,GAGI8M,EAA2BgB,ELjF/Bc,MAAM,KAAK,GKkFb,MAAO,CACLpC,cAAeK,GAA2BC,GAC1C+B,kBAAmBpB,GACjBzN,EAAM8N,GAAU1H,MAChBD,EAAgB2H,IAElBgB,UAAW/B,GAAuBD,GAClCiC,eAAgB,CACdC,WAAYhB,EAAiBpH,OAC7B0H,eAKAW,GAAiC,uCAAG,WACxC1G,EACA2G,EACAC,EACAC,EACAC,EACAjH,GANwC,SAAA9D,EAAA,6DAQvBqE,GAAeJ,GARQ,kBAUjC,CACL+G,YAAaH,EAAe5N,KAAI,SAAC0M,GAAD,OAC9BJ,GAAcI,EAAGkB,EAAgB5G,EAAG2G,MAEtCE,gBACAC,uBACAjH,WAhBsC,2CAAH,gEAoBjCmH,GAAc,uCAAG,WACrBhH,EACAiH,EACAL,EACAxF,GAJqB,2BAAArF,EAAA,6DAMfmL,EAAanH,EAAcC,GANZ,SAOKsD,GAAoBlC,EAAU6F,GAPnC,UAOfE,EAPe,6BASb1H,EAA4CwH,GAT/B,cAYfG,EAAOD,EAAYC,KAZJ,SAaEjF,GAAYf,EAAUgG,GAbxB,UAafC,EAbe,8BAgBb5H,EAA2C2H,EAAMH,GAhBpC,kBAqBnBK,EAAYC,WACVpH,GAAoB+G,EAAWrJ,QAtBd,yDAyBb4B,EACJU,GAAoB+G,EAAWrJ,QA1Bd,eA6Bf2J,EAAWC,QAAMjG,OAAOkG,mBAC5BJ,EACAD,EAASM,UAELC,EAAiBtH,GAAgBN,EAAGlD,GAAgB,GAjCrC,kBAmCd,CACL+C,OAAQ2H,EACRK,YAAaT,EACbP,cAAee,EAAe5O,KAAI,SAAC8O,GAAD,OAAOA,EAAEjI,UAC3CiH,qBAAsBc,EAAe5O,KAAI,SAAC8O,GAAD,OACvClB,EAAeV,QAAQ4B,EAAE7P,SAxCR,2DAAH,4DA6Cd8P,GAAwB,uCAAG,WAC/BjJ,EACAkJ,GAF+B,yCAAAjM,EAAA,+DRhHGkC,EAAYW,MQoHtCnH,EAJuB,EAIvBA,MAAwBwQ,EAJD,EAIhBrK,gBAETqJ,EAAY,IAAInF,YACpB7B,EAAqBF,EAActI,GAAOoG,QAGtCuD,EAAWvC,EAAYC,GACvBoJ,EAAW9H,GAAe3I,GAC1BmP,EAAiBsB,EAASzH,MAAM,GAZP,SAcvBuG,GAAevP,EAAOwP,EAAWL,EAAgBxF,GAd1B,uBAavByF,EAbuB,EAavBA,cAAeC,EAbQ,EAaRA,qBAAsBe,EAbd,EAacA,YAAahI,EAb3B,EAa2BA,OAb3B,UAiBD6G,GAC5BjP,EACAwQ,EACArB,EACAC,EACAC,EACAjH,GAvB6B,eAiBzBsI,EAjByB,iBA0BJC,UAAQC,qCACjCF,EACArE,GACAmD,EAAUqB,WACVT,EAAYS,WACZlH,GA/B6B,eA0BzBmH,EA1ByB,yBAkCxB,CACLC,QAASD,EAAaC,QACtB3B,cAAe0B,EAAa1B,cAC5BhH,OAAQ0I,EAAa1I,OACrBiH,qBAAsByB,EAAazB,qBACnC2B,gBAAiBxB,EACjByB,KAAM,CAAEV,4BAxCqB,4CAAH,wDA4CxBW,GAAG,uCAAG,WACVzI,EACApB,GAFU,iBAAA/C,EAAA,6DAIJ6M,EAAM5D,GAAalG,GAJf,SAKS8J,EAAIC,SAAS3I,GALtB,cAKJvI,EALI,gBAMGiR,EAAIE,aAAanR,EAAM,CAClCoR,kBAAmB,CACjBC,eAAe,EACfC,oBAAqB,SACrBC,WAAY,UAEdC,iBAAkB,CAChBH,eAAe,EACfC,oBAAqB,SACrBC,WAAY,YAfN,mFAAH,wDAoBIE,GAAsB,uCAAG,WAAOtK,GAAP,iBAAA/C,EAAA,+EAEVgM,GAAyBjJ,GAFf,cAE5BuK,EAF4B,gBAGhBV,GAAIU,EAAWvK,GAHC,OAG5BwK,EAH4B,OAIlChL,MAAM,gCAAD,OAAiCgL,IAJJ,kDAMlClK,EAAY,EAAD,IANuB,0DAAH,sD,qFChOnC,SAASmK,KAIP,MAAO,CACLC,IAAI,GAAD,OAJO,GAIP,KACHC,KAAK,GAAD,OAJO,GAIP,KACJC,UAAU,cAAD,OANC,GAMD,eALE,GAKF,OAIb,IAAMC,GAAYC,cAAW,SAACC,GAAD,OAC3BC,aAAa,CACXC,MAAO,CACLC,SAAU,WACVjP,MAAO,OACPkP,gBAAiBJ,EAAMK,QAAQC,WAAWJ,MAC1ClP,OAAQ,iBACRuP,UAAWP,EAAMQ,QAAQ,GACzBvP,QAAS+O,EAAMS,QAAQ,EAAG,EAAG,SAK7BC,GAAY,SAAC,GAMZ,IALLC,EAKI,EALJA,IACAC,EAII,EAJJA,WAKA,OACE,sBACEhR,MAAO,CACLiR,QAAS,OACTC,oBAAqB,sBACrB5P,MAAO,OACP6P,IAAK,OALT,UAQE,wBAAQ3P,QAASwP,EAAjB,oBACA,8BAAMD,EAAIK,KAAKtI,OACf,8BAAMuI,YAAeN,EAAIK,KAAKzD,KAAKkB,cACnC,gCACGwC,YAAeN,EAAI9G,SACnB8G,EAAIO,QAAU,GAAK,8BAEtB,8BACGtD,QAAMjG,OAAOwJ,iBACZ,IAAIC,OAAIT,EAAIO,SAAW,GACvBP,EAAIK,KAAKlD,gBAOJ,SAASuD,GAAoBC,GAKxC,IAAD,EACKC,EAA2B,UAAGD,EAAMC,mCAAT,SAC3BC,EAAU1B,KAFf,EAIoB2B,IAAM5T,SAAS6R,IAA7BgC,EAJN,sBAKuBD,IAAM5T,UAAS,GALtC,mBAKM8T,EALN,KAKYC,EALZ,OAMmDH,IAAM5T,SAAS,IANlE,mBAMMgU,EANN,KAM0BC,EAN1B,OAOiDL,IAAM5T,SAAS,IAPhE,mBAOMkU,EAPN,KAOyBC,EAPzB,KAQK/M,EAASgN,4BARd,EAU6BpU,oBAAU,GAVvC,mBAUMqU,EAVN,KAUetB,EAVf,KAWKuB,EAAqBC,mBAASnL,IAE9BM,EAAWvC,EAAYC,GAEvBoN,EAAU,uCAAG,sCAAAnQ,EAAA,sEACOoF,GAAcC,GADrB,cACXJ,EADW,gBAEYiC,GAA6B,OACxDnE,QADwD,IACxDA,OADwD,EACxDA,EAAQqN,UACRnL,EAAUhI,KAAI,SAACoT,GAAD,OAAOA,EAAE3J,YAJR,cAEX4J,EAFW,gBAOElJ,QAAQC,IACzBiJ,EAAerT,IAAf,+BAAA+C,EAAA,MAAmB,WAAOuQ,GAAP,eAAAvQ,EAAA,sEACEuH,GAAoBlC,EAAUkL,GADhC,cACX3U,EADW,gCAEVA,QAFU,IAEVA,OAFU,EAEVA,EAAMkI,QAFI,2CAAnB,wDARe,OAOX0M,EAPW,OAaXC,EAAWH,EAAerT,KAAI,SAACsT,EAAMzL,GACzC,MAAO,CACL6C,QAAS4I,EAAKhE,WACduC,KAAM7J,EAAUH,GAChBkK,QAASwB,EAAK1L,OAGZ4L,EAAmBrB,EACrBoB,EAAS5L,QAAO,SAACC,GAAD,OAAOA,EAAEkK,WACzByB,EACEE,EAAiBD,EAAiBzT,KAAI,SAAC6H,GAAO,IAAD,EACjD,OAAO,2BACFA,GADL,IAEEgK,KAAK,2BACAhK,EAAEgK,MADH,IAEFzD,KAAM,IAAItF,YAAUjB,EAAEgK,KAAKpI,WAE7BsI,SAAS,UAAAlK,EAAEkK,eAAF,eAAWnL,aAAc,UAItCkB,GAAepC,SAAf,2BACKsN,GADL,IAEEjL,qBAAsB2L,KApCP,4CAAH,qDAwChB3U,qBAAU,WACRmU,MACC,IAEcpU,iBAAO,MAAxB,IAOM6U,EAAW,uCAAG,sCAAA5Q,EAAA,yDACbiQ,EAAmBjL,qBADN,uBAEhB0K,GAAQ,GACRN,EAAMyB,UAHU,+BAMdb,GAAW,GANG,gBAOhBZ,EAAMyB,QAAQZ,EAAmBjL,qBAAqBgL,IAPtC,2BAWG,WAFbc,GAA2B,IAAbd,EAAiB,QAAU,SAEhBL,KACZ,SAAhBmB,GAA2BjB,GAZd,wBAcdH,GAAQ,GACRN,EAAMyB,UAfQ,8BAoBE,UAAhBC,EApBc,sBAqBVnB,EArBU,yCAuBFhJ,GACJ5D,EAAQqN,UACRP,GAzBM,oBA2BRtD,WA3BQ,eAmBVwE,EAnBU,eA4BaxJ,GAC3BlC,EACA,IAAIU,YAAUgL,IA9BA,WA4BVC,EA5BU,OAgCI,UAAhBF,GAA4BE,EAhChB,wBAiCdzO,MAAM,wDACNmN,GAAQ,GACRN,EAAMyB,UAnCQ,8BAuCE,SAAhBC,IACsC,IAAtC1B,EAAMC,6BACL2B,EAzCa,wBA2CdzO,MACE,wEAEFmN,GAAQ,GACRN,EAAMyB,UA/CQ,kCAkDVhJ,EACY,UAAhBiJ,EACIE,EAAgB3F,KAChB,IAAItF,YAAU8J,GArDJ,UAuDOzJ,GAAYf,EAAUwC,GAvD7B,WAuDVyD,EAvDU,+BAyDd/I,MAAM,6DACNmN,GAAQ,GACRN,EAAMyB,UA3DQ,2BA8DVI,GAAoB,OAAdD,QAAc,IAAdA,OAAA,EAAAA,EAAgBlN,SAAU,IAAIoL,OAAI,GAC9CE,EAAMyB,QAAQ,CACZ7B,QAASiC,EACTtJ,QAASoJ,EACTjC,KAAK,2BACAxD,GADD,IAEFD,KAAMxD,MApEM,QAwElB6H,GAAQ,GACRN,EAAMyB,UAzEY,4CAAH,qDA4EXK,EACJ,qBACEC,OAAQP,EACR1P,UAAU,UAEVhC,QAAS,SAACW,GAAD,OAAOA,EAAEuR,cAAcC,QAChC3T,MAAO,CACLuQ,SAAU,QACVR,IAAK,IACLC,KAAM,IACN4D,OAAQ,QACRtS,MAAO,QACPuS,OAAQ,IACR5C,QAAS,OACT6C,aAAc,SACdC,eAAgB,SAChBC,WAAY,UAfhB,SAkBE,sBAAKhU,MAAK,eAAO8R,GAActO,UAAWoO,EAAQtB,MAAlD,UACE,oBAAI9R,GAAG,qBAAP,oCACA,mBAAGA,GAAG,2BAAN,uFAIA,sBACEgF,UAAU,UACVxD,MAAO,CAAEiU,SAAU,SAAUC,UAAW,QAF1C,UAIE,sBACElU,MAAO,CACLiR,QAAS,OACTC,oBAAqB,uBAHzB,UAME,yBACA,4CACA,+CACA,wDACA,4CAEAqB,EAAmBjL,qBAEjBiL,EAAmBjL,qBAAqB/H,KAAI,SAACwR,EAAK3J,GAAN,OAC1C,sBAEEpH,MAAO,CACLqB,QAAS,SACTD,OAAQkR,IAAYlL,EAAI,kBAAoB,OAJhD,UAOE,cAAC,GAAD,CACE2J,IAAKA,EACLC,WAAY,WACVA,EAAW5J,MAGf,yBAbF,gCACgCA,OAHlC,aAmBHsK,EAAMyC,2BACL,qBACEnU,MAAO,CACLqB,QAAS,SACTD,QAAqB,IAAbkR,EAAiB,kBAAoB,OAHjD,SAME,cAAC8B,GAAA,EAAD,CACEC,MAAM,uBACN3S,MAAOuQ,EACPqC,SAAU,SAACnS,GAAD,OAAO+P,EAAsB/P,EAAExD,OAAO+C,QAChD6S,QAAS,kBAAMvD,GAAY,QAIjC,mCACA,qBACEhR,MAAO,CACLqB,QAAS,SACTD,QAAqB,IAAbkR,EAAiB,kBAAoB,OAHjD,SAME,cAAC8B,GAAA,EAAD,CACEC,MAAM,sBACN3S,MAAOyQ,EACPmC,SAAU,SAACnS,GAAD,OAAOiQ,EAAqBjQ,EAAExD,OAAO+C,QAC/C6S,QAAS,kBAAMvD,GAAY,gBAQvC,OACE,gCACE,wBAAQpS,KAAK,SAAS4C,QAlLP,WACjBiR,IACAT,GAAQ,IAgLN,SACGN,EAAM8C,YAAc,yBAUtBzC,GAAQyB,KCnUf,I,MAAMiB,GAAc,SAClB/C,GAII,IAAD,EACH,OACE,cAACgD,GAAA,EAAD,CACEJ,SAAU,SAACnS,GACTuP,EAAM4C,SAAN,2BACK5C,EAAMiD,MADX,IAEEjT,MAAOgQ,EAAMkD,cACT1N,SAAS/E,EAAExD,OAAO+C,OAAOyE,WACzBhE,EAAExD,OAAO+C,UAGjBA,OAAO,UAAAgQ,EAAMiD,YAAN,eAAYjT,QAAS,GAC5B9C,KAAM8S,EAAMmD,kBAAoBnD,EAAMkD,cAAgB,SAAW,UAKjEE,GAAoB,SACxBpD,GAKA,OACE,8BACE,cAACD,GAAD,CACE+C,WAAY,SACZ7C,4BAA6BD,EAAMqD,oBACnC5B,QAAS,SAAC6B,GACR,GAAIA,EAAQ,CACV,IAAMtT,EACW,UAAfgQ,EAAM9S,KACFoW,EAAO/K,QACP+K,EAAO5D,KAAKzD,KAAKkB,WACvB6C,EAAM4C,SAAN,2BACK5C,EAAMiD,MADX,IAEEjT,kBASRuT,GAAqB,SAACvD,GAAsC,IAAD,EAEzDjD,EPlDyB,SAAClI,GAChC,IAAMoD,EAAMnK,OAAOoH,KAAKL,GAClB2O,EAAUvL,EAAI8C,QAAQpJ,GAE5B,OADAsG,EAAIwL,OAAOD,EAAS,GACbvL,EO8CUyL,CADH5C,mBAAShO,GACkBxG,OAFsB,EAGnCC,oBAAS,GAH0B,mBAGxD0C,EAHwD,KAGhD0U,EAHgD,OAIrCpX,oBAAS,GAJ4B,mBAIxDqX,EAJwD,KAIjDC,EAJiD,KAK/D,OACE,8BACE,cAAC,KAAD,CAAW5U,OAAQA,EAAQ6U,OAAQF,EAAnC,SACE,cAACG,GAAA,EAAD,CACEC,QAAQ,2BACRlX,GAAG,qBACHkD,MAAK,UAAEgQ,EAAMiD,YAAR,aAAE,EAAYjT,MACnB2S,MAAM,MACNrU,MAAO,CACL4T,OAAQ,QANZ,SASGnF,EAASlP,KAAI,SAACf,GACb,OACE,+BACE,cAACmX,GAAA,EAAD,CACE3V,MAAO,CAAE6T,OAAQ,KACjBnS,MAAOlD,EACPoX,YAAa,kBAAML,GAAS,IAC5BhB,QAAS,WACP7C,EAAM4C,SAAN,2BAAoB5C,EAAMiD,MAA1B,IAAgCjT,MAAOlD,KACvC6W,GAAU,IANd,SASG7W,KAVL,sBAA0BA,cAqB3BqX,GAAiD,SAC5DnE,GACI,IAAD,EACH,iBAAQA,EAAMiD,YAAd,aAAQ,EAAYnR,WAClB,KAAK1F,EAAgB4F,aACnB,OAAOuR,GAAmBvD,GAC5B,KAAK5T,EAAgBgY,oBACnB,OAAOhB,GAAkB,2BACpBpD,GADmB,IAEtB9S,KAAM,OACNmW,qBAAqB,KAEzB,KAAKjX,EAAgBuG,qBACnB,OAAOyQ,GAAkB,2BACpBpD,GADmB,IAEtB9S,KAAM,QACNmW,qBAAqB,KAEzB,KAAKjX,EAAgBuI,YACnB,OAAOyO,GAAkB,2BACpBpD,GADmB,IAEtB9S,KAAM,OACNmW,qBAAqB,KAEzB,KAAKjX,EAAgBuV,aACnB,OAAOyB,GAAkB,2BACpBpD,GADmB,IAEtB9S,KAAM,QACNmW,qBAAqB,KAEzB,KAAKjX,EAAgBiY,MACnB,OAAOtB,GAAY/C,GACrB,KAAK5T,EAAgB6F,YACnB,OAAO8Q,GAAY,2BAAK/C,GAAN,IAAakD,eAAe,KAChD,KAAK9W,EAAgBwG,eACnB,OAAOmQ,GAAY,2BAAK/C,GAAN,IAAamD,kBAAkB,KACnD,QACE,OAAOJ,GAAY/C,KCrInBsE,GAAsB,IAAIC,WAAW,CACzC,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAC1E,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IACzE,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,IAAK,EAAG,GAC1E,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,MAGzCC,GAAiB,IAAIC,IAAOC,UAAQC,cAAcL,KAElDM,GAAsB,SAACC,GAAD,OAC1B,IAAIjR,YAAS,IAAIC,aAAWgR,GAAcL,GAAgB,CACxDzG,WAAY,eAGH+G,GAAkB,uCAAG,WAAOC,GAAP,eAAAnU,EAAA,+EAELoU,GACvB,IAAIrO,YAAU7C,cAAe8C,KAAKC,WAClCkO,EACAH,GAAoB9Q,cAAeC,OAAOC,MALd,cAExBO,EAFwB,gBAOxB0Q,GAAQ,IAAItO,YAAU7C,cAAe8C,KAAKsO,cAAe,CAC7D3Q,IAR4B,OAU9BpB,MAAM,0BAVwB,gDAY9B7B,QAAQC,MAAR,MACA4B,MAAM,sCAAD,OAAuC/C,KAAKC,UAAL,QAbd,yDAAH,sDAiBzB2U,GAA0B,uCAAG,WACjC/I,EACA1D,EACAtC,GAHiC,mBAAArF,EAAA,sEAMzB+F,YAAUe,mBACd,CACEa,EAAQZ,WACRC,oBAAiBD,WACjB,IAAIhB,YAAUsF,GAAMtE,YAEtB5B,gCAZ6B,cAK3B8B,EAL2B,OAc/B,GAd+B,SAed5B,EAASoC,WAAWC,eAAeT,GAfrB,yCAiBzBsN,EAAQC,SAAMC,wCAClBtP,+BACA6B,oBACAqE,EACApE,EACAU,EACAtC,EAAStC,OAAOqN,YAEZsE,EAAK,IAAIC,eACZC,IAAIL,GA1BwB,UA2BzBlP,EAASwP,KAAKH,EAAI,IA3BO,yCA8B1BzN,GA9B0B,4CAAH,0DAiC1BoN,GAAO,uCAAG,WACdS,EACAC,GAFc,iBAAA/U,EAAA,6DAIG,EACXgV,EAAgB,WAAI,GADT,GAGXC,EAA2B,IAAIN,cACrCI,EAAuB9X,KAAI,SAAC0G,GAC1BsR,EAAYL,IACVJ,SAAMU,0BACJlO,oBACA8N,EACAnR,EACAiQ,GAAexD,UACf,GACA4E,OAhBQ,SAqBRhB,GAAoB9Q,cAAeC,OAAOC,KAAKyR,KAAKI,EAAa,GAAI,CACzEhI,eAAe,IAtBH,2CAAH,wDCuPEkI,GApRM,WACnB,IAAMtS,EAAQqN,mBAAShO,GACjBuK,EAAUzL,EACV+B,EAASgN,4BACTqF,EAAc,CAClBC,SAAU,OACVzD,UAAW,OACX0D,SAAU,OACVC,UAAW,QARY,EAYmB5Z,oBAAS,GAZ5B,mBAYlB6Z,EAZkB,KAYFC,EAZE,OAa+B9Z,oBAAS,GAbxC,mBAalB+Z,EAbkB,KAaIC,EAbJ,KAgBnBC,EAAQ,uCAAG,WAAOha,GAAP,mBAAAoE,EAAA,yDACf6C,EAAMnH,MAAMmH,EAAMpB,UAAUK,MAAQlG,EAChCia,EAAWhT,EAAMjB,WACjBiB,EAAMpB,WAAaV,EAHR,qBAIP+U,EAAgB5R,EAAqBtI,IAJ9B,gCAMQ2L,GACjBzE,EAAYC,GACZ,IAAIgD,YAAU+P,IARL,QAMLhH,EANK,UAWT+G,EAAW/G,EAAKzD,KAAKkB,YAXZ,OAefrK,EAAYS,SAAZ,2BACKE,GADL,IAEEjB,WAAYiU,EACZna,MAAM,eAAMmH,EAAMnH,UAlBL,4CAAH,sDAsBd,OACE,qBACEgC,MAAO,CACLsB,MAAO,OACP2P,QAAS,OACT8C,eAAgB,SAChB5C,IAAK,QALT,SAQE,cAACkH,EAAA,EAAD,UACE,sBACErY,MAAO,CACLsB,MAAO,OACP2P,QAAS,OACT8C,eAAgB,eAChBC,WAAY,aACZ7C,IAAK,QANT,UAUE,eAACkH,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,yCAEA,wBACE9Z,GAAG,gBACHgF,UAAU,cACV+U,KAAM,GACNC,aAAW,wBACXxY,MAAO,CAAEsB,MAAO,SAChBgT,SAAU,SAACnS,GACTqC,EAAYS,SAAS,CAAElB,SAAU5B,EAAExD,OAAO+C,SAP9C,SAUGlC,OAAOoH,KAAKzB,EAAMnH,OAAOuB,KAAI,SAAUkZ,EAAK/W,GAC3C,OAAO,wBAAQA,MAAO+W,EAAf,SAAqBA,YAKlC,wBACEjV,UAAU,cACVgV,aAAW,yBACXlE,SAAU,SAACnS,GACTqC,EAAYS,SAAS,CAAEhB,WAAY9B,EAAExD,OAAO+C,SAJhD,SAOGqN,EAAQxP,KAAI,SAACmC,EAAOgX,GACnB,OAAO,wBAAQhX,MAAOA,EAAf,SAAuBA,SAIlC,cAACiX,EAAA,EAAD,CACEC,QAAQ,OACR5Y,MAAO0X,EACPlW,QAAS,WACP,IAAIqX,EAAU1T,EAAMlB,WAAa,IAAMkB,EAAMnB,QAAQmC,WAE/C2S,ELxGmB,SACvCla,GAEA,OAAQA,GACN,IAAK,OACH,MAAO,CACLwF,MAAO,CACL,CACE,CACE1C,MAAO,WACPmC,UAAU,GAEZ,CACEnC,MAAO,GACP8B,UAAW1F,EAAgB6F,cAG/B,CACE,CACEjC,MAAO,YACPmC,UAAU,GAEZ,CACEnC,MAAO,GACP8B,UAAW1F,EAAgBwG,mBAKrC,IAAK,UAeL,IAAK,WACH,MAAO,CACLF,MAAO,CACL,CACE,CACE1C,MAAO,kBACPmC,UAAU,GAEZ,CAAEnC,MAAO,GAAI8B,UAAW1F,EAAgBiY,UAKhD,IAAK,OACH,MAAO,CACL3R,MAAO,CACL,CACE,CACE1C,MAAO,UACPmC,UAAU,GAEZ,CAAEnC,MAAO,GAAI8B,UAAW1F,EAAgBuI,cAE1C,CACE,CACE3E,MAAO,SACPmC,UAAU,GAEZ,CAAEnC,MAAO,GAAI8B,UAAW1F,EAAgB6F,eAG5C6K,WAAY,CACVuK,KAAMC,qBAAmBnK,WACzBoK,kBAAmBzT,cAAe0T,aAAaC,iBAIrD,QACE,KAAK,0BAAL,OAAgCva,IKsBTwa,CACXjU,EAAMlB,YAEJoV,EAAqB,CACvBjV,MAAO0U,EAAK1U,MAEZG,aAAc,YACT+U,MACDjP,GACEQ,GACE1F,EAAMlB,aAERsV,2BAEJha,KAAI,SAAC6H,GAAD,OAAOxD,MAEfuB,EAAMnH,MAAM6a,GAAWQ,EACvBlU,EAAMhB,gBAAgB0U,GAAWC,EAAKtK,YAAc,GACpDhK,EAAYS,SAAZ,2BACKE,GADL,IAEEpB,SAAU8U,EACV7U,QAASmB,EAAMnB,QAAU,EACzBhG,MAAM,eAAMmH,EAAMnH,WA5BxB,eAkCA,cAAC2a,EAAA,EAAD,CACEC,QAAQ,OACR5Y,MAAO0X,EACPlW,QAAS,WACe,YAAlB2D,EAAMpB,kBACHoB,EAAMnH,MAAMmH,EAAMpB,UACzBS,EAAYS,SAAZ,2BACKE,GADL,IAEEpB,SAAU,WACV/F,MAAM,eAAMmH,EAAMnH,YATxB,kBAkBF,cAACqa,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,+BAAKnT,EAAMpB,SAAX,WAECoB,EAAMpB,WAAaV,GAClB,8CAAiB8B,EAAMjB,cAGzB,uCACA,cAAC,IAAD,CACEhG,KAAMiH,EAAMnH,MAAMmH,EAAMpB,UAAUK,MAClCkQ,SAAU,SAACpW,GAAD,OAAUga,EAASha,IAC7Bsb,WAAY3D,KAGd,6CACC1Q,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAahF,KACxC,SAACka,EAAqBrS,GACpB,OACE,gCACE,cAAC,IAAD,CACElJ,KAAMiH,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAa6C,GAC/CkN,SAAU,SAACpW,GACTiH,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAa6C,GACvClJ,EACFsG,EAAYS,SAAZ,2BACKE,GADL,IAEEnH,MAAM,eAAMmH,EAAMnH,UAEpBgF,QAAQgC,IAAIG,EAAMnH,MAAMmH,EAAMpB,UAAUQ,eAE1CiV,WAAY3D,KAEd,eAAC6D,EAAA,EAAD,WACE,cAACf,EAAA,EAAD,CACEC,QAAQ,WACRpX,QAAS,WACP2D,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAa,GAAzC,sBACKY,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAa,IAD9C,CAEEhB,IAEFiB,EAAYS,SAAZ,2BACKE,GADL,IAEEnH,MAAM,eAAMmH,EAAMnH,UAEpBgF,QAAQgC,IACN,aACAG,EAAMnH,MAAMmH,EAAMpB,UAAUQ,eAblC,wBAoBA,cAACoU,EAAA,EAAD,CACEC,QAAQ,WACRpX,QAAS,WACP,GACE2D,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAAaK,OACzC,EACA,CACA,IAAI+U,EACFxU,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAC9BY,EAAMnH,MAAMmH,EAAMpB,UAAUQ,aAC1BoV,EAAK3S,MAAM,EAAG2S,EAAK/U,OAAS,GAC9BJ,EAAYS,SAAZ,2BACKE,GADL,IAEEnH,MAAM,eAAMmH,EAAMnH,UAEpBgF,QAAQgC,IACN,gBACAG,EAAMnH,MAAMmH,EAAMpB,UAAUQ,gBAjBpC,gCAnCJ,sBAAyB6C,YAoEnC,eAACiR,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,4CACA,cAAC,EAAD,OAEF,eAACoB,EAAA,EAAD,WACE,cAACf,EAAA,EAAD,CACEC,QAAQ,WACRgB,SAAU5B,EACVxW,QAAS,WACPyW,GAAwB,GACxBtI,GAAuBtK,GACpBwU,MAAK,SAACC,GAAD,OAAO7B,GAAwB,MACpC8B,OAAM,SAAC5X,GAAD,OAAO8V,GAAwB,OAP5C,SAUGD,EAAuB,aAAe,oBAEzC,cAACW,EAAA,EAAD,CACEC,QAAQ,WACRpX,QAAS,WACPuW,GAAkB,GAClBvB,GAAmBnR,EAAQqN,WAAWmH,MAAK,SAACC,GAAD,OACzC/B,GAAkB,OAGtB6B,SAAU9B,EARZ,SAUGA,EAAiB,qBAAuB,sBAE3C,cAACa,EAAA,EAAD,CACEC,QAAQ,WACRpX,QAAS,kBAAMkD,KAFjB,oBAMA,cAACiU,EAAA,EAAD,CAAQC,QAAQ,WAAWpX,QAAS,kBAAM0D,KAA1C,kCCjSR8U,GAAgBC,YAAOC,qBAAPD,CAAH,4BA8EJE,IA5EKF,IAAOG,KAAV,4BAQJ,SAAC1I,GAAsB,IAAD,IACHzT,qBADG,mBAC1BqT,EAD0B,KACjB+I,EADiB,OAEDpc,oBAAS,GAFR,gCAGCA,oBAAS,IAHV,gCAICA,oBAAS,IAJV,gCAMGA,mBAAqB,CACvD8T,MAAM,EACNuI,QAAS,GACTC,cAAUvY,KATqB,mBAM1BwY,EAN0B,KAMdC,EANc,KAY3BpV,EAASqV,sBAWf,OATApc,qBAAU,WACR,sBAAC,4BAAAgE,EAAA,kEACK+C,QADL,IACKA,OADL,EACKA,EAAQqN,WADb,gCAEyBhB,EAAM3H,WAAW4Q,WAAWtV,EAAOqN,WAF5D,OAESpB,EAFT,OAGG+I,EAAW/I,EAAUsJ,oBAHxB,0CAAD,KAMC,CAACvV,EAAQqM,EAAM3H,aAGhB,iCACG1E,EAAOwV,WACN,oBAAG7a,MAAO,CAAE8a,UAAW,GAAvB,sBACYzJ,aAAe,UAAAhM,EAAOqN,iBAAP,eAAkB7D,aAAc,OAI5DxJ,EAAOwV,WACN,2CAAcvJ,GAAW,GAAGyJ,iBAA5B,UAED1V,EAAOwV,WAAa,oBACnBxV,EAAOwV,WAAa,cAACb,GAAD,6BACtB,cAACgB,EAAA,EAAD,CACEjJ,KAAMyI,EAAWzI,KACjBkJ,iBAAkB,IAClB9H,QAAS,kBAAMsH,EAAc,2BAAKD,GAAN,IAAkBzI,MAAM,MAHtD,SAKE,cAACmJ,EAAA,EAAD,CACE/H,QAAS,kBAAMsH,EAAc,2BAAKD,GAAN,IAAkBzI,MAAM,MACpDwI,SAAUC,EAAWD,SAFvB,SAIGC,EAAWF,YAIfjV,EAAOwV,WAAa,cAAC,GAAD,S,UC1DrBM,GAAS,IAAIC,IAAY/S,UAAU7C,cAAe8F,mBAElD+P,GAAU7V,cAAeC,OAAOwC,QAEhCqT,GAAU9V,cAAeC,OAAOC,IAChCqE,GAAa,IAAIqR,IAAY7V,WAAW+V,IA2B/BC,GAvBH,WACV,IAAMC,EAAWC,mBAAQ,kBAAMC,wBAAcL,MAAU,IAEjDM,EAAUF,mBACd,iBAAM,CAACG,8BAAoBC,+BAAqBC,gCAChD,IAGF,OACE,cAAC,qBAAD,CAAoBN,SAAUA,EAA9B,SACE,cAAC,iBAAD,CAAgBG,QAASA,EAASI,aAAW,EAA7C,SACE,cAAC,uBAAD,UACE,cAAC,GAAD,CACEZ,OAAQA,GACRpR,WAAYA,GACZiS,UAjBM,aCfHC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFva,SAASwa,eAAe,SAM1BX,M,iCCdO,IAAKY,EA2BAC,EA3BZ,oE,SAAYD,O,aAAAA,I,cAAAA,M,cA2BAC,O,0BAAAA,M,uCC7BZ,0KAAO,IAAMC,EAA4B,IAI5BC,EAA6BC,OAC7BC,EACXD,OAIWE,EAAqB,OACrBC,EAAeH,Q,2eCSfI,EAA8B,uCAAG,WAC5C1P,EACA2P,EACAvT,EACAwT,GAJ4C,iBAAAjb,EAAA,sEAUpC+F,IAAUe,mBACd,CACEkU,EAAMjU,WACNC,IAAiBD,WACjB,IAAIhB,IAAUsF,GAAMtE,YAEtB5B,KAhBwC,cAStC8B,EATsC,OAkB1C,GAlB0C,SAmBzBQ,EAAWC,eAAeT,GAnBD,yCAqBpCiU,EAAO1G,IAAMC,wCACjBtP,IACA6B,IACA,IAAIjB,IAAUsF,GACdpE,EACA+T,EACAC,GA3BwC,kBA6BnC,CACL1G,MAAO2G,EACPC,oBAAqBlU,IA/BmB,iCAkCnC,CACLkU,oBAAqBlU,IAnCmB,4CAAH,4DAwC9BmN,EAA0B,uCAAG,WACxC/I,EACA2P,EACA3V,GAHwC,qBAAArF,EAAA,sEAKK+a,EAC3C1P,EACA2P,EACA3V,EAASoC,WACTpC,EAAStC,OAAOqN,WATsB,mBAKhC+K,EALgC,EAKhCA,oBAAqB5G,EALW,EAKXA,MALW,yCAWrB4G,GAXqB,cAYlCzG,EAAK,IAAIC,KACZC,IAAIL,GAbiC,UAclClP,EAASwP,KAAKH,GAdoB,iCAejCyG,GAfiC,4CAAH,0DAsB1BC,EAAY,uCAAG,WAC1Bhf,EACAif,EACAvX,EACAwX,GAJ0B,mBAAAtb,EAAA,6DAMpBub,EAAUD,EAAqBE,UAAY,CAACF,GAAwB,GACpEJ,EAAOO,mBAAS,CACpBrf,SACAif,cACAvX,SACAkX,MAAOM,EAAUlL,aAEbsE,EAAK,IAAIC,KACZC,IAAIsG,GAdmB,kBAenB,CAAExG,KAAIgH,QAASH,IAfI,2CAAH,4DA0BZI,EAA2B,uCAAG,WACzCC,EACA7X,EACAkI,GAHyC,SAAAjM,EAAA,0DAMvCiM,IACAA,EAAuBlI,EAAYwI,YAPI,yCAShCN,EAAuBlI,EAAYwI,aATH,uBAW5B5F,EAA2BiV,EAAgB7X,GAXf,mFAAH,0DAqB3B8X,EAA6B,uCAAG,WAC3CxW,EACAuW,EACAnP,EACAqP,EACA7P,GAL2C,yBAAAjM,EAAA,sDAOrCmH,EAAQ4U,EACZtP,EACGxP,KAAI,SAAC+C,GAAO,IAAD,IACJmH,EAAQ,GACd,GAAI,UAAAnH,EAAEgc,4BAAF,eAAwBC,sBAAgC,CAC1D,IAAMC,EAAWlc,EAAEgc,qBAAqBC,sBACxCvb,QAAQgC,IAAIwZ,GAEZlc,EAAEmc,cAAcC,SAAQ,SAAC/Q,EAAMvG,GACxBoX,EAASpS,SAAShF,IAAIqC,EAAMkV,KAAKhR,WAGxClE,EAAMkV,KAAN,MAAAlV,EAAK,YAASnH,EAAEmc,gBAMlB,OAJoD,KAAhD,UAAAnc,EAAEgc,4BAAF,eAAwBM,sBAE1BnV,EAAMkV,KAAKrc,EAAEuc,aAERpV,KAERqV,QAEL9b,QAAQgC,IAAIyE,GAERsJ,EAA0B,GACrB3L,EAAI,EAhC8B,YAgC3BA,EAAIqC,EAAM7E,QAhCiB,oBAiCnC+I,EAAOlE,EAAMrC,KACdmH,GAA0B,IAAIZ,GAlCM,iBAmCvCoF,EAASpF,GAAQ,CAAE+E,UAAWnE,EAAuBZ,IAnCd,yCAsCtB1E,EACfiV,EAAexL,UACf/E,GAxCqC,QAsCjCoR,EAtCiC,OA0CvChM,EAASpF,GAAQ,CACf+E,UAAWqM,GA3C0B,QAgCT3X,IAhCS,wCAgDjBsC,QAAQC,IAChCF,EAAMlK,IAAN,uCAAU,WAAOoO,GAAP,qBAAArL,EAAA,6DACF0c,EAA4BjM,EAASpF,GAAM+E,UADzC,SAEoB/K,EAASoC,WAAWC,eAC9CgV,GAHM,yCAQNhc,QAAQgC,IAAI,kBARN,kBASC,MATD,cAWFia,EAAQnI,IAAMC,wCAClBtP,IACA6B,IACA,IAAIjB,IAAUsF,GACdoF,EAASpF,GAAM+E,UACfwL,EAAexL,UACf0L,EAAe1L,YAEXsE,EAAK,IAAIC,KACZC,IAAI+H,GACDjB,EAAsBI,EAA0BN,UAClD,CAACM,GACD,GAvBI,kBAwBD,CACLpH,KACAgH,QAASA,IA1BH,4CAAV,wDAjDyC,eAgDrCkB,EAhDqC,yBAgFpC,CAAEnM,SAAUA,EAAUlD,IAAKqP,EAAY/X,QAAO,SAACC,GAAD,QAASA,OAhFnB,4CAAH,8DAsFpC6B,EAA0B,uCAAG,WACjCC,EACAC,GAFiC,SAAA7G,EAAA,sEAKzB+F,IAAUe,mBACd,CACEF,EAAcG,WACdC,IAAiBD,WACjB,IAAIhB,IAAUc,GAAkBE,YAElC5B,KAX6B,uCAa/B,IAb+B,2CAAH,wDAgB1B4W,EAAuB,SAAC5U,GAAD,mBACxB,IAAI0V,IAAI1V,EAAMlK,IAAI6f,MAGjBA,EAAU,SAACL,GAAD,OAAmBA,EAAGlQ,YAGzB0C,EAAmB,SAAC8N,EAAanR,GAY5C,IAAMoD,EAAU+N,EAAOlZ,WACjBmZ,EAAWhO,EAAQiO,UAAU,EAAGjO,EAAQ1M,OAASsJ,IAAa,IAE9DsR,EAAclO,EACjBiO,UAAUjO,EAAQ1M,OAASsJ,GAC3BuR,SAASvR,EAAU,KACnBqR,UAAU,EAAGrR,GAEhB,MAA0B,GAAD,OAhBzB,SAA0BxM,GAExB,IADA,IAAMge,EAAU,iBACTA,EAAQC,KAAKje,IAClBA,EAAQA,EAAMke,QAAQF,EAAS,SAEjC,OAAOhe,EAWoBme,CAAiBP,GAArB,YAAkCE,GAlB5CI,QAAQ,SAAU,KAqBtB3R,EAAqB,SAChCoR,EACAnR,GAUA,IAR2BxM,EAQrBkL,EAAQyS,EAAOlZ,WAAWyG,MAAM,KAChCkT,EAAYlT,EAAM,GAClBmT,EAAWnT,EAAM,IAAM,GAC7B,GAAIA,EAAMhI,OAAS,GAAKmb,EAASnb,OAASsJ,EACxC,MAAM,IAAI8R,MAAJ,wBAA2BX,EAA3B,sBAER,MAZgB,MADd3d,GADyBA,EAcFoe,EAAYC,EAASE,OAAO/R,EAAU,MAb/C0R,QAAQ,MAAO,KAEpB,IAEFle,I,uGC7GE2P,G,0BA1JmC,IAAI+J,IAAY/S,UAC9D,gDAGgC,IAAI+S,IAAY/S,UAChD,+CAqJ4B,SAACW,GAAwC,IAAvBkX,EAAsB,uDAAd,EACtD,MAAM,GAAN,OAAUlX,EAAQhC,MAAM,EAAGkZ,GAA3B,cAAuClX,EAAQhC,OAAOkZ,Q,qKC7H3CC,EAAqE,uCAChF,WACE1Z,EACA2Z,EACAC,EACAC,EACA3Y,EACAsH,GANF,uBAAA3M,EAAA,6DAQQ4L,EAAWhH,SAAST,EAAIyH,UACxBP,EAAO,IAAIyI,IACXmK,EAAoBvS,QAAMjG,OAAOkG,mBACrCH,WAAWrH,EAAI+Z,WACftS,GAZJ,SAegCF,QAAMjG,OAAOkW,4BACzCtW,EAAStC,OAAOqN,UAChB/E,EAAK+E,UAFuB,OAG5BzD,QAH4B,IAG5BA,OAH4B,EAG5BA,EAAMV,wBAlBV,cAeQkS,EAfR,OAqBQ7C,EAAY,IAAIvV,IAAU5B,EAAImX,WAAajW,EAAStC,OAAOqN,WArBnE,KA0BkBgO,EAAcH,EAAkBpa,YA1BlD,KA2BwB,CAACsa,GA3BzB,KA4BsB,GA5BtB,KA6BqB,IAAIpY,IAAUiY,GA7BnC,KA8BmB,IAAIjY,IAAU+X,GA9BjC,KA+BqB,CAACzS,EAAK+E,WA/B3B,KAgCyB,CAAC/E,GAhC1B,KAiC4B,CACpB4Q,sBAAuB,CAAC,IAlChC,mBAqCkBoC,iCACRhZ,EACAiW,EACAjQ,EAAK+E,UACLxE,GAzCV,uDAyBM0S,uBAAuB,EACvBC,WA1BN,KA2BMC,iBA3BN,KA4BMC,eA5BN,KA6BMC,cA7BN,KA8BMnC,YA9BN,KA+BMJ,cA/BN,KAgCMwC,kBAhCN,KAiCM3C,qBAjCN,KAoCM4C,aApCN,0BAwBIC,eAxBJ,oDADgF,gEAiD5ET,EAAgB,SAACta,GAAD,OAAoBgb,EAAOC,KAAP,WAAgBjb,EAAhB,OAK7BuE,EAA+C,CAC1D2W,oBAAqBnB,EACrB3V,cAhEoB,kBAiEpB+O,yBAA0B,GAEb5O,Q,6JCtBFC,EAA2C,CACtD0W,oBA5D+D,uCAAG,WAClE7a,EACAJ,EACAkb,EACAC,EACA7Z,GALkE,uBAAArF,EAAA,6DAQ5Dmf,EAAkBhb,EAAIib,gBACxBtL,IAAQC,cACN,IAAIJ,WAAWmL,EAAOC,KAAK5a,EAAIib,gBAAiB,cAElD1f,EACE2f,EAAS,IAAItZ,IAAUhC,GAbqC,SAmBxD2H,QAAMjG,OAAOsV,+BACrBsE,EACA,IAAItZ,IAAU5B,EAAImb,iBAClBja,EAASoC,WACTpC,EAAStC,OAAOqN,WAvBgD,uBAiB3CmP,EAjB2C,EAiBhEpE,oBACOqE,EAlByD,EAkBhEjL,MAlBgE,kBA0B3D,CACLsK,eAAgB,CACdtC,YAAa8C,EACbd,WAAYO,EAAOC,KAAK,IACxBL,cAAe,IAAI3Y,IAAUmZ,GAC7BT,eAAgB,CACd,CACE/X,QAAS2Y,EACTI,aAAa,GAEf,CACE/Y,QAAS6Y,EACTE,aAAa,GAEf,CACE/Y,SAAwB,OAAfyY,QAAe,IAAfA,OAAA,EAAAA,EAAiB/O,YAAa/K,EAAStC,OAAOqN,UACvDsP,UAAU,GAEZ,CACEhZ,QAASM,qBAGb2X,kBAAmBQ,EAAkB,CAACA,GAAmB,GACzDhD,cAAe,GACfqC,iBAAkB,GAClBI,aAAcY,EAAiB,CAACA,QAAkB9f,EAClDsc,qBAAsB,CACpBM,qBAAqB,MArDuC,2CAAH,8DA6D/DpU,cA/DoB,qBAgEpB+O,yBAA0B,K,sMChCf0I,G,OAAqE,uCAChF,WACExb,EACA2Z,EACAC,EACA6B,EACAva,EACAsH,GANF,iBAAA3M,EAAA,sEAQgC0L,QAAMjG,OAAOkW,4BACzCtW,EAAStC,OAAOqN,UAChB,IAAIrK,IAAU5B,EAAI0b,SAFU,OAG5BlT,QAH4B,IAG5BA,OAH4B,EAG5BA,EAAMV,wBAXV,cAQQkS,EARR,gBAayB2B,EACrB3b,EACA2Z,EACAC,EACAI,EAAgB5R,WAChBlH,GAlBJ,cAaQ0a,EAbR,yBAqBS,CACLlB,eAAgB,CACdP,uBAAuB,EACvBC,WAAYyB,EACVxF,IAAoByF,UACpBF,EAASG,KACT,IAAIhR,MAAI/K,EAAIgc,SAEd3B,iBAAkB,CAACL,GACnBM,eAAgB2B,EACdL,EAASM,aACTN,EAASG,MAEXxB,cAAe,IAAI3Y,IAAU6Z,GAC7BrD,YAAa,IAAIxW,IAAU+X,GAC3B3B,cAAe,CAAC,IAAIpW,IAAU5B,EAAI0b,UAClCS,aAAcP,EAASQ,gBACnB,CAACR,EAASQ,iBACV,MAvCV,2CADgF,iEA6CrET,EAAiB,uCAAG,WAC/B3b,EACA2Z,EACAC,EACAI,EACA9Y,GAL+B,mCAAArF,EAAA,6DAYzBwgB,EAAa,IAAIza,IAAU5B,EAAIwS,mBAZN,SAaP8J,EACtBpb,EAASoC,WACT,IAAI1B,IAAU+X,GACd,IAAI/X,IAAU5B,EAAI0b,SAClBW,GAjB6B,UAazBE,EAbyB,4BAmBT,mBAnBS,cAqBvBR,EAAuBQ,EAAvBR,KAAUS,EAAaD,EAAjBjE,GArBiB,SAsBPmE,SAAOC,KAC7Bxb,EAASoC,WACTkZ,EACA,GACAH,GA1B6B,cAsBzBM,EAtByB,iBA6BIC,EACjC1b,EAASoC,WACTqZ,EACAzb,EAAStC,OAAOqN,UAChB,IAAIrK,IAAU5B,EAAIwS,oBAjCW,eA6BzBqK,EA7ByB,iBAoCAC,EAC7BH,EAAUI,QAAQC,WAClB,IAAIpb,IAAU5B,EAAIwS,oBAtCW,2CAoCxByK,EApCwB,UAyCzBC,EAAanB,IAAS3F,IAAK+G,IAAMnD,EAAkBJ,EACnDwD,EAAWrB,IAAS3F,IAAK+G,IAAMvD,EAAiBI,EA1CvB,kBA4CxB,CACLqD,OAAQV,EACRT,aAAc,CACZmB,OAAQ,CACNA,OAAQV,EAAUI,QAAQC,WAC1BM,aAAcX,EAAUI,QAAQO,aAChCC,WAAYZ,EAAUI,QAAQQ,WAC9BC,KAAMb,EAAUI,QAAQS,KACxBC,KAAMd,EAAUI,QAAQU,KACxBC,UAAWf,EAAUI,QAAQY,UAC7BC,QAASjB,EAAUI,QAAQc,WAC3BZ,YAAaA,EAEba,WAAY,IAAIlc,IACd5B,EAAI+d,mBAAqBlB,EAAqBmB,aAEhDC,uBAAwB,IAAIrc,IAAUgY,GACtCsD,WAAY,IAAItb,IAAUsb,IAE5BE,SAAU,IAAIxb,IAAUwb,GACxBjG,UAAWjW,EAAStC,OAAOqN,UAC3BiS,WAAY,IAAItc,IAAU5B,EAAIwS,mBAC9B2L,aAAc,IAAIvc,IAAUiB,oBAC5ByP,KAAM,IAAI1Q,IAAU5B,EAAIsS,OAG1B8J,gBAAiBpc,EAAI+d,uBACjBxiB,EACAshB,EAAqBuB,YACzBrC,SAzE6B,4CAAH,8DAkFxBa,EAAoB,uCAAG,WAC3BtZ,EACA+Z,EACAxG,EACAwH,GAJ2B,mBAAAxiB,EAAA,sEASFyiB,aAAWC,sBAClCjb,EACA+Z,EAAO9a,QACPsU,EACAwH,GAbyB,UAeD,KANpBP,EATqB,QAeZ3f,OAfY,wBAgBnBqgB,EAAmB,IAAIC,KAAQ,IAAI9O,KAAU0H,WAC7CqH,EAAe,IAAIlO,IAjBA,KAkBzBkO,EAlByB,SAmBjBJ,aAAWK,6BACfrb,EACA+Z,EAAON,QAAQC,WACfnG,EACA2H,EAAiBvS,UACjBoS,GAxBqB,+BAkBZ5N,IAlBY,kCA4BlB,CACLuN,YAAaQ,EAAiBvS,UAC9BmS,YAAa,CACX7N,GAAImO,EACJnH,QAAS,CAACiH,MAhCW,iCAoClB,CACLR,YAAaF,EAAW,GAAG7R,YArCJ,4CAAH,4DA2CbqQ,EAAS,uCAAG,WACvBhZ,EACAqW,EACA+B,EACAlJ,GAJuB,iBAAA3W,EAAA,6DAOnBkgB,EAAO3F,IAAKwI,IAPO,SAQDC,EACpBvb,EACAqW,EACA+B,EACAlJ,GAZqB,WAQnBsM,EARmB,SAgBgB,IAArBA,EAAU3gB,OAhBL,gCAiBH0gB,EAChBvb,EACAoY,EACA/B,EACAnH,GArBmB,OAiBrBsM,EAjBqB,OAuBrB/C,EAAO3F,IAAK+G,IAvBS,UAyBlB2B,GAAkC,IAArBA,EAAU3gB,OAzBL,0CAyB0B,MAzB1B,iCA0BhB,CAAEma,GAAIwG,EAAU,GAAI/C,SA1BJ,4CAAH,4DA6BTF,EAAe,SAC1BkD,EACAhD,EACAC,GAEA,IAAMgD,EAAehD,EAAOiD,YAAYtE,EAAQ,KAAM,GAChDuE,EAAWvE,EAAOC,KAAK,IAAIpL,WAAW,CAACuP,EAAWhD,KACxD,OAAOpB,EAAOwE,OAAO,CAACD,EAAUF,KAGrB/C,EAA+B,SAC1CC,EACAH,EACAqD,GAEA,IAAMxS,EACJmP,IAAS3F,IAAK+G,IAAMjB,EAAakB,SAAWlB,EAAamB,OAAOH,WAC5DmC,EACJtD,IAAS3F,IAAK+G,IAAMjB,EAAamB,OAAOH,WAAahB,EAAakB,SAC9D9Q,EAAW,CACf,CACEgP,aAAa,EACb/Y,QAASqK,GAEX,CACErK,QAAS2Z,EAAaiC,cAExB,CACE5b,QAAS2Z,EAAa/E,UACtBoE,UAAU,GAEZ,CACEhZ,QAAS2Z,EAAa5J,MAExB,CACE/P,QAAS2Z,EAAagC,YAExB,CACE3b,QAAS8c,EACT/D,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOA,OAC7B/B,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOS,WAC7BxC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOC,aAC7BhC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOE,WAC7BjC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOG,KAC7BlC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOI,KAC7BnC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOY,uBAC7B3C,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOK,UAC7BpC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOO,QAC7BtC,aAAa,GAEf,CACE/Y,QAAS2Z,EAAamB,OAAOJ,cASjC,OANImC,GACF9S,EAAS4L,KAAK,CACZ3V,QAAS6c,EACT9D,aAAa,IAGVhP,GAGF,SAAewQ,EAAtB,oC,4CAAO,WACLwC,EACAC,GAFK,iBAAA1jB,EAAA,sDAIC2jB,EAAQ,IAAIC,IAAG,GAJhB,YAKED,EAAME,WAAa,KALrB,0CAOwB9d,IAAU+d,qBACjC,CAACL,EAAgB1c,WAAY4c,EAAMP,YAAYtE,EAAQ,KAAM,IAC7D4E,GATD,cAOKK,EAPL,yBAWM,CAACA,EAAYJ,IAXnB,gCAaDA,EAAMK,MAAM,GAbX,qCAgBC,IAAItG,MAAM,wBAhBX,0D,sBAmBP,IAAMsF,EAAiC,uCAAG,WACxCvb,EACAwc,EACAC,EACAC,GAJwC,SAAAnkB,EAAA,sEAMnB4gB,SAAOwD,UAAUD,GANE,8BAShCvD,SAAOyD,oBACX5c,EACAwc,EACAC,EACAC,GAboC,uCAetClnB,KAAI,SAAC4C,GAAD,OAAOA,EAAEuQ,cAfyB,2CAAH,4DAgE1BjI,EAA+C,CAC1D6W,oBAAqBW,EACrBzX,cAnYoB,kBAoYpB+O,yBAA0B,GAEb9O,Q,oJCxXFC,EAA+C,CAC1D4W,oBArCmE,uCAAG,WACtE7a,EACAJ,EACAkb,EACAqF,EACAjf,GALsE,qBAAArF,EAAA,6DAOhEqf,EAAS,IAAItZ,IAAUhC,GAPyC,SAS9D2H,QAAMjG,OAAOsV,+BACjBsE,EACA,IAAItZ,IAAU5B,EAAImb,iBAClBja,EAASoC,WACTpC,EAAStC,OAAOqN,WAbkD,uBAQ9D+K,EAR8D,EAQ9DA,oBAA4BqE,EARkC,EAQzCjL,MARyC,kBAgB/D,CACLsK,eAAgB,CACdP,uBAAuB,EACvB/B,YAAa8C,EACbd,WAAYO,EAAOC,KAAK,IACxBL,cAAe,IAAI3Y,IAAUue,GAC7B7F,eAAgB,CACd,CACE/X,QAASyU,EACTsE,aAAa,IAGjBd,kBAAmB,GACnBxC,cAAe,GACfqC,iBAAkB,GAClBI,aAAcY,EAAiB,CAACA,QAAkB9f,KA/BgB,2CAAH,8DAsCnEwI,cAxCoB,sBAyCpB+O,yBAA0B,K,ugIC3CfsN,EAA4B,SACvCC,EACAC,GAEA,IAAMC,EAAgB,YAAI1N,MAAMwN,EAAYliB,SAASqiB,KAAK,GAS1D,OAReC,EACbJ,EAAYvnB,KAAI,SAAC+C,EAAG8E,GAClB,OAAO,2BAAK9E,GAAZ,IAAe9D,GAAI4I,OAErB4f,EACAD,IAOEG,EAAc,SAAdA,EACJJ,EACAK,EACAC,GAEA,GAAqB,IAAjBA,EAAMxiB,OAAc,MAAO,GAC/B,IAAMyiB,EAAeF,EAAU5nB,KAAI,SAAC4C,EAAGiF,GAAJ,OAAUkgB,EAAcF,EAAOhgB,GAAKjF,KACjEolB,EAAiBT,EAAY3f,QACjC,SAAC7E,GAAD,OAAOA,EAAE0K,aAAeqa,EAAa/kB,EAAE9D,KAAO4oB,EAAMhb,SAAS9J,EAAE9D,OAE3DgpB,EAAWD,EACdhoB,KAAI,SAAC+C,GAAD,OAAOA,EAAEgK,UAAU/M,KAAI,SAACkoB,GAAD,OAAOA,EAAEloB,KAAI,SAAC6H,GAAD,OAAOA,EAAEoF,mBACjDsS,OACAA,OACH,MAAM,GAAN,mBACKyI,EAAehoB,KAAI,SAAC+C,GAAD,OAAOA,EAAE9D,OADjC,YAEK0oB,EAAYJ,EAAaO,EAAcG,MAIxCF,EAAgB,SAAII,EAAYhmB,GAAhB,OACpBgmB,EAAMvgB,QAAO,SAAC8E,GAAD,OAAOA,IAAMvK,KAAOkD,S,iCC3CnC,+CAEa+iB,EAAgB,SAACpP,EAAcqP,GAE3C,OADkBzoB,KAAK0oB,KAAK1K,IAAqB5E,GAAQqP,EAAaxK,Q,0NC8E1D5R,EAAb,WAGE,WACmBF,EACA3D,GAChB,yBAFgB2D,oBAEjB,KADiB3D,WACjB,KALemgB,mBAKf,EACAC,KAAKD,cAAgB,IAAIE,IACvBC,EACA3c,EACA3D,GAVN,mFAoBE,wFAAArF,EAAA,6DACEyM,EADF,EACEA,QACA3B,EAFF,EAEEA,cACAC,EAHF,EAGEA,qBACAjH,EAJF,EAIEA,OACW8hB,EALb,EAKEtK,UACA5O,EANF,EAMEA,gBACmBmZ,EAPrB,EAOEC,kBACAnZ,EARF,EAQEA,KAEImZ,EAAoBD,GAAYJ,KAAKpgB,SAAStC,OAC9CuY,EAAYsK,GAAeH,KAAKpgB,SAAStC,OAX/C,SAeU8Y,wCACJ4J,KAAKpgB,SACLiW,EACA7O,EACAgZ,KAAKpgB,SAAStC,OAJmB,OAKjC4J,QALiC,IAKjCA,OALiC,EAKjCA,EAAMV,wBApBZ,uBAaoB8Z,EAbpB,EAaUtV,SAA8BuV,EAbxC,EAamCzY,IAbnC,UAuBU0Y,EACJR,KAAKD,cACLlK,EAAUlL,UACV3D,EAAQnK,QA1Bd,oBAsBUkK,EAtBV,EAsBUA,aAAkB0Z,EAtB5B,EAsBwBxR,GAMhByR,EAA2BC,EAC/BX,KAAKD,cACLhZ,EAAa4D,UACb3D,EAAQxP,KAAI,SAAC+C,GAAD,OAAOA,EAAEyK,kBACrB6Q,GAGG+K,EAAqBtb,EAAqB9N,KAAI,SAAC6H,GAAD,OAAO2H,EAAQ3H,OAnCpE,sBAoCU,kDApCV,WAuCsC,IAAhCiG,EAAqBzI,OAvC3B,sBAwCU,sDAxCV,eA0CQgkB,EAAW7Z,EAAQ1B,EAAqB,IAAIwR,YA1CpD,UA4C2BnB,uBACvB1O,EACAqZ,EAAcO,EAAS/Z,YAAY6D,UACnC,IAAIwT,IAAG9f,GACPgiB,GAhDJ,WA4CQS,EA5CR,OAmDQC,EAAwBC,EAC5BhB,KAAKD,cACLhZ,EAAa4D,UACbrF,EACAD,EACAwQ,EACA,IAAIsI,IAAG9f,KAGH4iB,EAAWnC,YACf9X,EAAQxP,KAAI,SAAC+C,GAAD,OAAOA,EAAEyK,kBACrBM,IAEWzI,SAAWmK,EAAQnK,OAhElC,sBAiEU,yDAjEV,yBAmEmC8E,QAAQC,IACvCoF,EAAQxP,KAAI,SAAC+C,GAAD,OACV2mB,EACE,IAAIjB,IACFkB,EACA5mB,EAAE0e,cACF,EAAKrZ,UAGPrF,EAAEyK,eAAeT,UAAU1H,YA5EnC,eAmEQukB,EAnER,OAmFQC,EAA0Cra,EAAQxP,KAAI,SAAC8pB,EAAQjiB,GACnE,IAAMkiB,EAAQD,EAAOzI,sBACjB,CACE,CACE5X,QAASqf,EAAcgB,EAAOxK,YAAYhQ,YAAY6D,UACtDqP,aAAa,EACbC,UAAU,GAEZ,CACEhZ,QAASM,IACTyY,aAAa,EACbC,UAAU,GAEZ,CACEhZ,QAAS4U,EAAUlL,UACnBsP,UAAU,EACVD,aAAa,IAGjB,GAEJ,MAAO,CACLwH,IAAK,CACHC,cAAeL,EAAmB/hB,GAAGoiB,cAAc9W,UACnDsO,cAAeqI,EAAOrI,eAExBD,eAAe,GAAD,OAAMuI,EAAN,YAAgBD,EAAOtI,qBAInC0I,EAAaT,EAASzpB,KAAI,SAACmqB,GAAD,OAC9BC,EACE,EAAK7B,cACL4B,EACA5a,EAAa4D,UACb0W,EAAgBM,GAChB9L,EACA,CACE1f,KAAM6Q,EAAQ2a,GAAU7I,WACxBK,aAAcnS,EAAQ2a,GAAUxI,aAChCD,kBAAmBlS,EAAQ2a,GAAUzI,kBACrC2B,aAAc7T,EAAQ2a,GAAU9G,kBAKhCgH,EAAsBC,EAA0B9a,GAGhD+a,EApIR,sBAqIOF,GArIP,YAsIOtB,GAtIP,CAuIIO,EACAL,EACAC,EACAK,GA1IJ,YA2IOK,EAAmB5pB,KAAI,SAAC6H,GAAD,OAAOA,EAAE4P,QAE/B+S,EA7IR,YA6I8BN,EAAW3K,QA7IzC,kBA+IS,CACLhQ,eACAgb,WAAYA,EACZE,eAAgBD,EAChB1B,gBACA4B,eAAgBd,EAAmB5pB,KAAI,SAAC+C,GAAD,OAAOA,EAAEknB,mBApJpD,iDApBF,gIA4KE,WACEtrB,GADF,mBAAAoE,EAAA,sEAIWylB,KAAKD,cAAc7d,QAAQ6E,aAAaob,MAC7ChsB,EAAK4Q,aAAa4D,WALxB,cAGQyX,EAHR,OAOQC,EAAkB,SAAC9nB,GACvB,MAAO,CACL+Q,aAAc,IAAIhL,IAAU/F,EAAE+Q,cAAcxE,WAC5C7B,WAAY1K,EAAE0K,WACdV,UAAWhK,EAAEgK,UAAU/M,KAAI,SAACkoB,GAAD,OACzBA,EAAEloB,KAAI,SAAC8qB,GACL,MAAO,CACL7d,UAAW6d,EAAS7d,UACpBE,SAAU,IAAIwZ,IAAGmE,EAAS3d,UAAUvG,oBAMxCmkB,EAAsB,SAAChoB,GAC3B,MAAO,CACLioB,aAAcjoB,EAAEioB,aAChBC,WAAY,IAAItE,IAAG5jB,EAAEkoB,YAAYrkB,aAxBvC,kBA2BS,CACL2I,aAAc,CACZ8O,UAAW,IAAIvV,IAAU8hB,EAAkBvM,WAAW/O,WACtDE,QAASob,EAAkBpb,QAAQxP,IAAI6qB,GACvCK,YAAaN,EAAkBM,YAAYlrB,IAAI+qB,GAC/CI,iBAAkBP,EAAkBO,oBAhC1C,gDA5KF,mIAkNE,WAA8BC,GAA9B,SAAAroB,EAAA,uDAC+B,SAAC2H,MAC9B0gB,EAAiB7b,aAFnB,2CAlNF,wHAuNE,WACE5Q,EACA0sB,GAFF,iBAAAtoB,EAAA,sEAIQylB,KAAKpgB,SAJb,YAMIzJ,EAAK4rB,WAAWllB,OAAS,GAN7B,gCAOcmjB,KAAKpgB,SAASkjB,QAAQ3sB,EAAK4rB,WAA3B,gBAEO,OAAPc,QAAO,IAAPA,OAAA,EAAAA,EAAStb,oBAAqB,KAT5C,8CAWQ,GAXR,UAKQwb,EALR,QAYa,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASG,wBAAyBD,EAAgBlmB,OAAS,GAZjE,kCAaUgmB,EAAQG,sBAAsBD,GAbxC,yBAcyB/C,KAAKpgB,SAASkjB,QAAQ3sB,EAAK8rB,eAA3B,gBAEV,OAAPY,QAAO,IAAPA,OAAA,EAAAA,EAASlb,mBAAoB,KAhBrC,eAcQsb,EAdR,+CAkBaF,GAlBb,YAkBiCE,KAlBjC,iDAvNF,gEA6OMzC,EAAyB,uCAAG,WAChC0C,EACArN,EACAsN,GAHgC,iBAAA5oB,EAAA,6DAK1B6oB,EAAsBC,IAAKhV,QAAQiV,WALT,KAMrBJ,EAAQK,YANa,KAMgBJ,EANhB,KAOpB,CACRpc,aAAcqc,EAAoBzY,UAClCkL,YACA7E,KAAMqS,IAAKpS,oBAViB,KAYrB,CAACmS,GAZoB,SActBI,IAAcC,cAAc,CAChCC,WAAYR,EAAQtjB,SAAStC,OAAOqN,UACpCgZ,iBAAkBP,EAAoBzY,UACtCiZ,MAAO5O,IAA4B,EACnC6O,SAAUjE,YACR5K,IAA4B,EAC5BG,KAEF2O,UAAWZ,EAAQY,YAtBO,4CAO9B9Y,SAP8B,KAY9BiL,QAZ8B,KAa9BkD,aAb8B,MAM1BlK,EAN0B,KAMD8U,iBANC,uCA4BzB,CACL9U,GAAI,CAAEA,KAAIgH,QAAS,CAACmN,IACpBrc,aAAcqc,IA9BgB,4CAAH,0DAkCzBzC,EAA2B,SAC/BuC,EACAnc,EACAC,EACA6O,GAEA,IAAMI,EAAWJ,EAAqBE,UAAY,CAACF,GAAuB,GACpEmO,EAA0Chd,EAAQxP,KAAI,SAAC8pB,GAC3D,MAAO,CACLrc,WAAYqc,EAAOrc,WACnBV,UAAW+c,EAAO/c,UAAU/M,KAAI,SAAC8qB,GAAD,OAC9BA,EAAS9qB,KAAI,SAAC8O,GACZ,MAAO,CACL7B,UAAW6B,EAAE7B,UACbE,SAAU,IAAI8E,IAAInD,EAAE3B,qBAM9B,MAAO,CACLsK,GAAIiU,EAAQK,YAAYU,WAAWD,EAAuB,CACxDhZ,SAAU,CACR6K,UAAWA,EAAUlL,UACrB5D,aAAcA,EACdiK,KAAMqS,IAAKpS,oBAEbgF,QAASA,IAEXA,YAIE6L,EAA4B,SAAC9a,GAAD,OAChCA,EAAQxP,KAAI,SAAC+C,GAAD,OAAOA,EAAEsnB,qBAAuB,MAAI9K,QAE5CiK,EAAsB,SAC1BkC,EACAnc,EACAmd,EACAC,EACAtO,EACAxX,GAEA,IAAM4X,EAAWJ,EAAqBE,UAAY,CAACF,GAAuB,GAC1E,MAAO,CACL5G,GAAIiU,EAAQK,YAAYvC,oBACtBkD,EACAC,EAAiB3sB,KAAI,SAAC6H,GAAD,OAAO,IAAI8e,IAAG9e,MACnChB,EACA,CACE2M,SAAU,CACR6K,UAAWA,EAAUlL,UACrB5D,aAAcA,EACdiK,KAAMqS,IAAKpS,oBAEbgF,YAGJA,YAOE2L,EAAgB,SACpBsB,EACAze,EACAsC,EACAqd,EACAvO,EACA3O,GAOqB,IAAD,EACdmd,GAAO,OAACxO,QAAD,IAACA,OAAD,EAACA,EAAsBE,WAAY,CAACF,GAAuB,GAClEyO,GAAU,UAACpd,EAAKiP,sBAAN,eAAiCJ,WAC7C,CAAC7O,EAAKiP,gBACN,GACEoO,EAAkBrd,EAAKiP,eAAL,UAChBmO,EAAYD,GADI,UAEhBA,GACFpO,EAAO,sBAAOsO,GAAP,YAA4Brd,EAAKgS,mBAAqB,KACnE,MAAM,GAAN,mBACMhS,EAAK2T,cAAgB,IAD3B,CAEE,CACE5L,GAAIiU,EAAQK,YAAY3B,cACtBnd,EACAyC,EAAK/Q,MAAQkjB,EAAOC,KAAK,IACzB,CACEtO,SAAU,CACRjE,aAAcA,EACdiK,KAAMqS,IAAKpS,mBACX4E,UAAWA,EAAUlL,UACrB6Z,eAAgBJ,EAAkB5C,IAClCxI,eAAgBoL,EAAkBpL,gBAEpC/C,UACAkD,aAAcjS,EAAKiS,mBAAgBlf,IAGvCgc,cAKAiL,EAAiB,uCAAG,WACxBuD,EACAC,GAFwB,mBAAAnqB,EAAA,6DAIlBoqB,EAAStW,IAAQiV,WACvBmB,EAAsB7kB,SAASoC,WAAW4iB,kCACpCC,EAAaC,EAAsBJ,GANjB,KAObD,EAAsBlB,YAPT,KAQtBmB,EARsB,KAUV,CACRC,OAAQA,EAAOha,UACfqG,KAAMqS,IAAKpS,oBAZO,SAeZuS,IAAcC,cAAc,CAChCC,WAAYe,EAAsB7kB,SAAStC,OAAOqN,UAClDgZ,iBAAkBgB,EAAOha,UACzBiZ,MAAOiB,EACPhB,SAAUjE,YAAciF,EAAY5P,KACpC6O,UAAWW,EAAsBX,YApBjB,2CAuBX,CAACa,GAvBU,MAUpB3Z,SAVoB,KAcpBmO,aAdoB,KAuBpBlD,QAvBoB,MAOlBhH,EAPkB,KAOqBiS,kBAPrB,uCA0BjB,CACLjS,GAAI,CAAEA,KAAIgH,QAAS,CAAC0O,IACpBlD,cAAekD,IA5BO,4CAAH,wDAoDjBG,EAAwB,SAACC,GAAD,OAC5B,GAA+B,EAAlBA,EAAsB,IAE/BnE,EAAuB,SAAC5Z,GAC5B,GAAuB,IAAnBA,EAAQnK,OAAc,OAAO,EACjC,IAAM+I,EAAOoB,EAAQ,GAAG8P,YAAYhQ,WACpC,OAAOE,EAAQge,OAAM,SAACzqB,GAAD,OAAOA,EAAEuc,YAAYhQ,aAAelB,Q,yDC1gB3D,e,2NCAA,kCAAO,IAAMnI,EAAe,WAC1B,IAAMwnB,EAAMC,SAGR,MAAO,CACL3hB,kBAAmB,+CACnBN,UAAW,CACTE,oBAAqB,+CACrBD,gBAAiB,+CACjBE,mBAAoB,+CACpBC,QAAS,gDAEX8N,aAAc,CACZC,eAAgB,gDAElB7Q,KAAM,CACJC,UAAW,+CACXqO,aAAc,+CACdnO,aAAc,gDAEhBykB,yBAA0B,UAC1BznB,OAAQ,CACNC,IAAK,yCACLuC,QAAS+kB,M,+OCtBNG,EAAkB,SAAlBA,EAAmBC,GAC9B,GAAY,OAARA,GAA+B,kBAARA,GAAoB,kBAAmBA,EAChE,OAAOA,EAGT,GAAIA,aAAeC,KAAM,IAAI1T,EAAO,IAAIyT,EAAIE,iBAEnC3T,EAAOyT,EAAIE,cAEpB,IAAK,IAAI7U,KAAO2U,EACV5tB,OAAO+tB,UAAUC,eAAehtB,KAAK4sB,EAAK3U,KAC5C2U,EAAG,cAAoB,KACvBzT,EAAKlB,GAAO0U,EAAgBC,EAAI3U,WACzB2U,EAAG,eAGd,OAAOzT,G,SCwCH8T,EAAiC,SACrCjhB,EACAuC,GAEA,IACMtF,EA5CmB,SACzB+C,EACAuC,GAKA,OAAOA,EACJxP,KAAI,SAAC+C,EAAG8E,GACP,OAAO9E,EAAC,2BAAQA,GAAR,IAAWorB,IAAKtmB,IAAM9E,KAE/B6E,QAAO,SAAC7E,GAAD,QAASA,KAChB/C,KAAI,SAAC+C,GAGJ,IAFA,IAAMqrB,EAAmC,EAAE,GAAI,GAEtCvmB,EAAI,EAAGA,EAAI9E,EAAEyK,eAAeT,UAAU1H,OAAQwC,IAIrD,GAHAumB,EAAe,GAAKrrB,EAAEyK,eAAeT,UAAUlF,GAC5C7H,KAAI,SAACquB,GAAD,OAAUA,EAAKphB,aACnBC,QAAQD,IACgB,IAAvBmhB,EAAe,GAAW,CAC5BA,EAAe,GAAKvmB,EACpB,MAGJ,IAA2B,IAAvBumB,EAAe,KAAoC,IAAvBA,EAAe,GAE/C,MAAO,CACLD,IAAKprB,EAAEorB,IACPC,qBAGHxmB,QAAO,SAACC,GAAD,QAASA,KAYKymB,CAAmBrhB,EAAWuC,GACxBxP,KAAI,SAACuuB,GAGjC,OAFe/e,EAAQ+e,EAAKJ,KACRjP,cAAcqP,EAAKH,eAAe,IAC1C9e,cAEd,GAAIpF,EAAM7E,OAAS,EACjB,KAAK,8DACP,IAAMmpB,EAAYtkB,EAAM,GACxB,IAAKA,EAAMsjB,OAAM,SAACpf,GAAD,OAAUA,IAASogB,KAClC,KAAK,4DACP,OAAOA,GAGInf,EAAoC,uCAAG,WAClDE,EACAkf,EACAC,EACAC,EACAvmB,EACA4G,GANkD,mCAAAjM,EAAA,0DAQ5C6rB,EAAkBtH,YACtB/X,EAAaxB,YAAY/N,KAAI,SAAC+C,GAAD,OAAOA,EAAEyK,kBACtC+B,EAAazB,uBAGKzI,SAAWkK,EAAaxB,YAAY1I,OAbN,wHAgB5CmK,EAhB4C,YAiB7CuK,MAAMxK,EAAaxB,YAAY1I,SAE3BwC,EAAI,EAnBqC,YAmBlCA,EAAI+mB,EAAgBvpB,QAnBc,oBAoB1C4H,EAAY2hB,EAAgBA,EAAgB/mB,IAC5Cf,EAAcyI,EAAazB,qBAAqBjB,SAASI,GAC3D0hB,EACAT,EAA+BjhB,EAAWuC,GACxC8R,EAAa/R,EAAaxB,YAAYd,GACtC4hB,EAAUJ,EAAenN,EAAWrW,eAAe8W,oBAzBT,sFA2BiBT,EAAWrW,eA3B5B,YA4B3BsE,EAAazB,qBAAqBjB,SAAShF,GA5BhB,sBA6B5C6mB,EA7B4C,yCA+BpChQ,sCACJtW,EAAStC,OAAOqN,UAChB,IAAIrK,IAAUhC,GACdkI,GAlCwC,oBAoC1CM,WApC0C,eA4B1CwE,EA5B0C,eAqCf+a,EAC/BvN,EAAWhU,kBACXxG,EACAgN,EACAwN,EAAW/T,UACXnF,EACA,CACE4G,2BA5C4C,iBAqCxC4S,EArCwC,EAqCxCA,eAUFkI,EA/C0C,2BAgD3ClI,GAhD2C,IAiD9CpU,eAAgB8T,EAAW9T,iBAE7BgC,EAAQvC,GAAa6c,EAnD2B,QAmBNjiB,IAnBM,gDAsD3C,CACL2H,UACA1B,qBAAsByB,EAAazB,qBACnCD,cAAe0B,EAAa1B,cAC5BhH,OAAQ,IAAI8f,IAAGpX,EAAa1I,UA1DoB,4CAAH,gEAkFpCioB,EAAqB,SAChCC,EACAC,EACAC,GAUA,IAAMC,EAA0BtB,EAAgBoB,GAC1CG,EAA0BvB,EAAgBmB,GAEhD,GACEE,EAAwB5pB,QACtB6pB,EAAwBphB,qBAAqBzI,QAC/C4pB,EAAwB5pB,SACtB6pB,EAAwBrhB,cAAcxI,OAExC,KAAK,yIAmBP,IAjBA,IAAM+pB,EAAmB,sBACpBD,EAAwBphB,aADJ,YAEpBmhB,EAAwBnhB,YAAY/N,KAAI,SAAC+C,GAC1C,OAAO,2BACFA,GADL,IAEEyK,eAAe,2BACVzK,EAAEyK,gBADO,IAEZT,WAlDRA,EAmDUhK,EAAEyK,eAAeT,UAlD3BsiB,EAmDUF,EAAwBphB,YAAY1I,OAjD9C0H,EAAU/M,KAAI,SAACsvB,GAAD,OACZA,EAAYtvB,KAAI,SAAC8O,GACf,MAAO,CACL7B,UAAW6B,EAAE7B,UAAYoiB,EACzBliB,SAAU2B,EAAE3B,qBARI,IACtBJ,EACAsiB,OA0DME,EAA2B,GACxB1nB,EAAI,EAAGA,EAAIonB,EAAwB5pB,OAAQwC,IAClD,GAAIonB,EAAwBpnB,GAAG2nB,gBAC7BD,EAAyBnQ,KAAK,CAC5B+O,IAAKtmB,EAAIsnB,EAAwBphB,YAAY1I,OAC7C8H,SAAU8hB,EAAwBpnB,GAAG4nB,gBAElC,KAAIR,EAAwBpnB,GAAG6nB,cAUpC,KAAK,uHATLN,EACEH,EAAwBpnB,GAAG6nB,cAAcziB,WACzCO,eAAeT,UACfkiB,EAAwBpnB,GAAG6nB,cAAcC,aACzCvQ,KAAK,CACLjS,SAAU8hB,EAAwBpnB,GAAG4nB,UACrCxiB,UAAWpF,EAAIsnB,EAAwBphB,YAAY1I,SAezD,MAAO,CACL0I,YAAaqhB,EACbthB,qBAV2B,sBACxBqhB,EAAwBrhB,sBADA,YAExByhB,EAAyBvvB,KAAI,SAAC4vB,GAAD,OAAOA,EAAEzB,SASzCtgB,cAPsB,sBACnBshB,EAAwBthB,eADL,YAEnB0hB,EAAyBvvB,KAAI,SAAC4vB,GAAD,OAAOA,EAAEziB,cAMzCtG,OAAQsoB,EAAwBtoB,U","file":"static/js/main.00df4dd3.chunk.js","sourcesContent":["export * from \"./malloc-sdk\";\nexport * from \"./interfaces\";\nexport * as utils from \"./utils\";\nexport * as serializer from \"./serializer\";\nexport * as builder from './builder'\nimport _MallocIdl from \"./idls/malloc.json\";\nexport const MallocIdl = _MallocIdl;\n","import { MintInfo, u64 } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FlowElement } from \"react-flow-renderer\";\nimport internal from \"stream\";\n\nexport enum InputClassNames {\n  actionVertex = \"ACTION_VERTEX\",\n  tokenAccount = \"TOKEN_ACCOUNT\",\n  mintAccount = \"MINT_ACCOUNT\",\n  tokenAccountOnlyInit = \"TOKEN_ACCOUNT_ONLY_INIT\",\n  mintAccountOnlyInit = \"MINT_ACCOUNT_ONLY_INIT\",\n  wholeNumber = \"WHOLE_NUMBER\",\n  fractionNumber = \"FRACTION_NUMBER\",\n  other = \"OTHER\",\n}\n\nexport type SPLToken = { account: string } & {\n  info: Partial<TokenInfo> & { decimals: number; mint: PublicKey };\n  balance: string | u64 | null;\n};\n\nexport type NextAction = [\n  { value: string; readOnly?: boolean; className?: string },\n  { value: string; readOnly?: boolean; className?: string }\n];\n\nexport type Input = [\n  { value: string; readOnly: true },\n  { value: string; className?: string }\n][];\nexport type SourceNodeInput = [\n  [{ value: string; readOnly: true }, { value: string; className?: string }],\n  [{ value: string; readOnly: true }, { value: string; className?: string }]\n];\nexport type ActionEdge = { id: string; amount: number };\nexport type NodeType = { input: Input; next_actions: NextAction[][] };\nexport type GraphType = { [id: string]: NodeType };\nexport type HiddenInputData = { [id: string]: any };\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Swatches } from \"d3-color\"\nimport * as d3 from \"d3\";\n\n\nconst GraphVisualizer = (graph) => {\n\n    const [data, setData] = useState([5, 3, 6, 1, 2]);\n\n    const svgRef = useRef();\n\n    useEffect(() => {\n        // ...D3 code\n\n        // DATA\n\n        let nodes = [\n            {id: \"Microsoft\"},\n            {id: \"Amazon\"},\n            {id: \"HTC\"},\n            \n        ]\n\n        let links = [\n            {\n                source: \"Microsoft\",\n                target: \"Amazon\",\n                type: \"licensing\"\n            },\n            {\n                source: \"Microsoft\",\n                target: \"HTC\",\n                type: \"licensing\"\n            }\n        ]\n\n        let types = [\n            \"licensing\",\n        ]\n\n        const data = {\n            nodes,\n            links\n        }\n\n        // STYLING\n\n        let [width, height] = [300, 300]\n        let color = d3.scaleOrdinal(types, d3.schemeCategory10)\n\n        let linkArc = (d) => {\n            const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n            return `\n              M${d.source.x},${d.source.y}\n              A${r},${r} 0 0,1 ${d.target.x},${d.target.y}\n            `;\n        }\n\n        let drag = simulation => {\n  \n            function dragstarted(event, d) {\n              if (!event.active) simulation.alphaTarget(0.3).restart();\n              d.fx = d.x;\n              d.fy = d.y;\n            }\n            \n            function dragged(event, d) {\n              d.fx = event.x;\n              d.fy = event.y;\n            }\n            \n            function dragended(event, d) {\n              if (!event.active) simulation.alphaTarget(0);\n              d.fx = null;\n              d.fy = null;\n            }\n            \n            return d3.drag()\n                .on(\"start\", dragstarted)\n                .on(\"drag\", dragged)\n                .on(\"end\", dragended);\n          }\n\n        links = data.links.map(d => Object.create(d));\n        nodes = data.nodes.map(d => Object.create(d));\n      \n        const simulation = d3.forceSimulation(nodes)\n            .force(\"link\", d3.forceLink(links).id(d => d.id))\n            .force(\"charge\", d3.forceManyBody().strength(-400))\n            .force(\"x\", d3.forceX())\n            .force(\"y\", d3.forceY());\n      \n        const svg = d3.select(svgRef.current)\n            .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n            .style(\"font\", \"12px sans-serif\");\n      \n        // Per-type markers, as they don't inherit styles.\n        svg.append(\"defs\").selectAll(\"marker\")\n          .data(types)\n          .join(\"marker\")\n            .attr(\"id\", d => `arrow-${d}`)\n            .attr(\"viewBox\", \"0 -5 10 10\")\n            .attr(\"refX\", 15)\n            .attr(\"refY\", -0.5)\n            .attr(\"markerWidth\", 6)\n            .attr(\"markerHeight\", 6)\n            .attr(\"orient\", \"auto\")\n          .append(\"path\")\n            .attr(\"fill\", color)\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\n      \n        const link = svg.append(\"g\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1.5)\n          .selectAll(\"path\")\n          .data(links)\n          .join(\"path\")\n            .attr(\"stroke\", d => color(d.type))\n            .attr(\"marker-end\", d => `url(${new URL(`#arrow-${d.type}`, location)})`);\n      \n        const node = svg.append(\"g\")\n            .attr(\"fill\", \"currentColor\")\n            .attr(\"stroke-linecap\", \"round\")\n            .attr(\"stroke-linejoin\", \"round\")\n          .selectAll(\"g\")\n          .data(nodes)\n          .join(\"g\")\n            .call(drag(simulation));\n      \n        node.append(\"circle\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"r\", 4);\n      \n        node.append(\"text\")\n            .attr(\"x\", 8)\n            .attr(\"y\", \"0.31em\")\n            .text(d => d.id)\n          .clone(true).lower()\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 3);\n      \n        simulation.on(\"tick\", () => {\n          link.attr(\"d\", linkArc);\n          node.attr(\"transform\", d => `translate(${d.x},${d.y})`);\n        });\n        \n\n    }, []);\n\n    const update = () => {\n        const newData = data.map(value => value + 5);\n        setData(newData);\n    };\n\n    const removeLast = () => {\n        const newData = [...data];\n        newData.pop();\n        setData(newData);\n    };\n\n    return (\n        <div style={{ border: \"2px solid black\", padding: \"10px\", width: \"300px\" }}>\n          <svg ref={svgRef}></svg>\n          <br />\n          <button onClick={update}>Update</button>\n          <br />\n          <button onClick={removeLast}>Remove</button>\n        </div>\n    );\n}\n\nexport default GraphVisualizer\n","import fileDialog from \"file-dialog\";\n/* function to save JSON to file from browser\n * adapted from http://bgrins.github.io/devtools-snippets/#console-save\n * @param {Object} data -- json object to save\n * @param {String} file -- file name to save to\n */\nexport const saveStringToFile = (data: any, filename: string) => {\n  if (!data) {\n    console.error(\"No data\");\n    return;\n  }\n\n  if (!filename) filename = \"console.json\";\n\n  if (typeof data === \"object\") {\n    data = JSON.stringify(data, undefined, 4);\n  }\n\n  var blob = new Blob([data], { type: \"text/json\" }),\n    e = document.createEvent(\"MouseEvents\"),\n    a = document.createElement(\"a\");\n\n  a.download = filename;\n  a.href = window.URL.createObjectURL(blob);\n  a.dataset.downloadurl = [\"text/json\", a.download, a.href].join(\":\");\n  e.initMouseEvent(\n    \"click\",\n    true,\n    false,\n    window,\n    0,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    0,\n    null\n  );\n  a.dispatchEvent(e);\n};\n\nexport const getFileContent = async () => {\n\treturn await fileDialog({\n\t\taccept: 'application/json'\n\t})\n};\n","import { Store } from \"react-stores\";\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  SourceNodeInput,\n  NextAction,\n  HiddenInputData,\n  InputClassNames as CellClassNames,\n} from \"src/interfaces\";\nimport { getFileContent, saveStringToFile } from \"./utils/files\";\n\nexport interface MallocState {\n  selected: string;\n  counter: number;\n  new_action: string;\n  graph: GraphType;\n  sourceMint: string;\n  hiddenInputData: HiddenInputData;\n}\n\nexport const SOURCE_NODE_ID = \"SOURCE-0\";\n\nexport type ActionTypes = \"SWAP\" | \"TRANSFER\" | \"MINT\" | \"AIRDROP\";\nexport const ACTION_TYPES: ActionTypes[] = [\n  \"SWAP\",\n  \"TRANSFER\",\n  \"MINT\",\n  \"AIRDROP\",\n];\n\nexport const NEXT_ACTION_ROW = [\n  { value: \"\", className: CellClassNames.actionVertex },\n  { value: \"\", className: CellClassNames.wholeNumber },\n] as NextAction;\nexport const INIT_NEXT_ACTION: NextAction[] = [\n  [\n    { value: \"NextActionID\", readOnly: true },\n    { value: \"Parts of 1,000\", readOnly: true },\n  ],\n  NEXT_ACTION_ROW,\n];\n\nconst initState: MallocState = {\n  selected: SOURCE_NODE_ID,\n  counter: 1,\n  new_action: \"SWAP\",\n  graph: {},\n  sourceMint: \"<UNSET>\",\n  hiddenInputData: {},\n};\n\ninitState.graph[SOURCE_NODE_ID] = {\n  input: [\n    [\n      {\n        value: \"InputTokenAccount\",\n        readOnly: true,\n      },\n      { value: \"\", className: CellClassNames.tokenAccountOnlyInit },\n    ],\n    [\n      {\n        value: \"Amount\",\n        readOnly: true,\n      },\n      { value: \"\", className: CellClassNames.fractionNumber },\n    ],\n  ] as SourceNodeInput,\n  next_actions: [INIT_NEXT_ACTION],\n};\n\nexport const globalStore = new Store<MallocState>(initState);\n\nexport const getGlobalStore = () => globalStore.state;\n\nexport const setGlobalStoreFromFile = async () => {\n  const fileContents = await getFileContent();\n  if (fileContents.length < 1) {\n    alert(\"Please select a file\");\n    return;\n  }\n  // TODO: use have the input be the nonspecific construction (and validated via malloc sdk) and then have a function which interpolates\n  const parsed = JSON.parse(await fileContents[0].text()) as MallocState;\n  console.log(parsed);\n  // Set the token account in to be undefined\n  parsed.graph[SOURCE_NODE_ID].input[0][1].value = \"\";\n  globalStore.setState(parsed);\n};\n\nexport const downloadGlobalStore = async () => {\n  await saveStringToFile(JSON.stringify(globalStore.state), \"flow.json\");\n};\n","import { Provider } from \"@project-serum/anchor\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getConstants } from \"../config/constants\";\n\nexport const getProvider = (wallet: AnchorWallet): Provider => {\n  return new Provider(new Connection(getConstants().solana.RPC), wallet, {});\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const frontendErrorTypeID = \"MALLOC_FLOWCHART_ERROR\";\n\nexport type FrontendError = {\n  type: \"MALLOC_FLOWCHART_ERROR\";\n  msg: string;\n  fullError?: any;\n};\n\nexport const handleError = (e: any) => {\n  console.error(e)\n  if (e?.errorType === frontendErrorTypeID) {\n    const eCast = e as FrontendError;\n    alert(eCast.msg)\n    if(eCast.fullError) throw eCast.fullError\n  } else {\n    alert(`An unexpected error occured: ${e}`)\n    throw e;\n  }\n};\n\nexport const ErrorGenerator = {\n  TOKEN_ACCOUNT_DOES_NOT_EXIST: (tokAccount: PublicKey | string) =>\n    newFrontendError(\n      `The token account ${tokAccount.toString()} does not exist`\n    ),\n  INVALID_AMOUNT_INPUT: (amount: string) =>\n    newFrontendError(`${amount} is not a valid number for the input`),\n  MINT_ACCOUNT_DOES_NOT_EXIST: (\n    mintAccount: PublicKey | string,\n    tokAccount?: PublicKey | string\n  ) =>\n    newFrontendError(\n      tokAccount\n        ? `The mint ${mintAccount.toString()} found from token ${tokAccount.toString()} does not exist`\n        : `The mint ${mintAccount.toString()} does not exist`\n    ),\n};\n\nconst newFrontendError = (msg: string, e?: any) => {\n  return {\n    msg,\n    fullError: e,\n    type: \"MALLOC_FLOWCHART_ERROR\",\n  } as FrontendError;\n};\n","import { SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport { ActionTypes, INIT_NEXT_ACTION, SOURCE_NODE_ID } from \"src/globalStore\";\nimport {\n  ActionEdge,\n  GraphType,\n  HiddenInputData,\n  Input,\n  InputClassNames,\n  NextAction,\n  SourceNodeInput,\n} from \"src/interfaces\";\n\nexport const getSourceNode = (g: GraphType) => g[SOURCE_NODE_ID];\n\nexport const getSourceNodeAccount = (inp: SourceNodeInput) => inp[0][1].value;\nexport const getSourceNodeAmount = (inp: SourceNodeInput) => inp[1][1].value;\nexport const getAllVertices = (g: GraphType): string[] => Object.keys(g);\nexport const getActionVertices = (g: GraphType): string[] => {\n  const all = Object.keys(g);\n  const initIdx = all.indexOf(SOURCE_NODE_ID);\n  all.splice(initIdx, 1);\n  return all;\n};\n\nexport const getVertexType = (v: string): ActionTypes =>\n  v.split(\"-\")[0] as ActionTypes;\n\n// Discard the first element as those are just labels\nexport const getNextVertices = (\n  g: GraphType,\n  vertex: string\n): ActionEdge[][] => {\n  const nextActions = g[vertex].next_actions;\n  const ret = nextActions.map((nextActionSet) => {\n    const nextActionRemoveLabel = nextActionSet.slice(1);\n    const edgesRet = nextActionRemoveLabel.map((nextAction: NextAction) => {\n      if (!nextAction[1].value && !nextAction[0].value) {\n        return null;\n      }\n      return {\n        amount: parseInt(nextAction[1].value),\n        id: nextAction[0].value,\n      } as ActionEdge;\n    });\n    // Remove empty rows\n    return edgesRet.filter((e, i) => e !== null) as ActionEdge[];\n  });\n  return ret;\n};\n","import { Elements, FlowElement } from \"react-flow-renderer\";\nimport { Store } from \"react-stores\";\nimport { SPLToken } from \"../interfaces\";\nimport {\n  AccountsArray,\n  Action,\n  IsolatedAction,\n} from \"../../../../malloc-core/ts-packages/malloc-sdk/lib/\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey, Signer } from \"@solana/web3.js\";\nimport { u64 } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport interface IFlowChart {\n  elements: Elements<any>;\n  initSplits: number[];\n  initTokenAccount?: PublicKey;\n  initAmount: u64;\n}\n\nexport interface SolanaSpl {\n  derivedTokenAccounts: SPLToken[] | null;\n  tokenList: TokenInfo[] | null;\n}\n\nexport const solanaSplStore = new Store<SolanaSpl>({\n  derivedTokenAccounts: null,\n  tokenList: null,\n});\n","import { getProvider, Provider } from \"@project-serum/anchor\";\nimport { parseTokenAccount, parseMintAccount } from \"@project-serum/common\";\nimport {\n  AccountInfo,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  MintInfo,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport {\n  TokenListProvider,\n  TokenInfo,\n  TokenListContainer,\n} from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getConstants } from \"../config/constants\";\nimport { solanaSplStore } from \"../state/flowchart-store\";\n\n// TODO: where does this come from?\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey =\n  ASSOCIATED_TOKEN_PROGRAM_ID;\n\n// TODO: have a store for token metadata which has a list of all tokens as well as their metadata\n\n// See https://github.com/solana-labs/token-list\nexport const getTokenLists = async (\n  provider: Provider\n): Promise<TokenInfo[]> => {\n  const getCached = async () => {\n    if (solanaSplStore.state.tokenList) return solanaSplStore.state.tokenList;\n    const tokens = await new TokenListProvider().resolve();\n    const tokenList = tokens\n      .filterByClusterSlug(getConstants().solana.NETWORK)\n      .getList();\n    solanaSplStore.setState({\n      ...solanaSplStore.state,\n      tokenList,\n    });\n    return tokenList;\n  };\n  const tokenList = await getCached();\n\n  // Add in demo tokens\n  if (getConstants().solana.NETWORK === \"devnet\") {\n    return [...tokenList, ...(await getDemoTokenInfo(provider))];\n  } else {\n    return tokenList;\n  }\n};\n\nconst getDemoTokenInfo = async (provider: Provider): Promise<TokenInfo[]> => {\n  const usdcMint = new PublicKey(getConstants().demo.FAKE_USDC);\n  const aMint = new PublicKey(getConstants().demo.FAKE_TOKEN_A);\n  const usdcInfo = await getMintInfo(provider, usdcMint);\n  const aInfo = await getMintInfo(provider, aMint);\n  if (!usdcInfo || !aInfo) {\n    throw \"Expected info for these mints\";\n  }\n  return [\n    {\n      ...usdcInfo,\n      chainId: -1,\n      name: \"FAKE USDC\",\n      symbol: \"FUSDC\",\n      address: getConstants().demo.FAKE_USDC,\n    },\n    {\n      ...aInfo,\n      chainId: -1,\n      name: \"FAKE: A TOKEN\",\n      symbol: \"FA TOKEN\",\n      address: getConstants().demo.FAKE_TOKEN_A,\n    },\n  ];\n};\n\nexport const getTokenListContainer = async (\n  provider: Provider\n): Promise<TokenListContainer> =>\n  new TokenListContainer(await getTokenLists(provider));\n\n// See https://spl.solana.com/associated-token-account\nexport const findAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey | string\n): Promise<PublicKey> => {\n  const associated = await PublicKey.findProgramAddress(\n    [\n      walletAddress.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      new PublicKey(tokenMintAddress).toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n  return associated[0];\n};\nexport const findAllAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  mints: (PublicKey | string)[]\n): Promise<PublicKey[]> =>\n  Promise.all(mints.map((m) => findAssociatedTokenAddress(walletAddress, m)));\n\nexport const getTokenAccountInfo = async (\n  provider: Provider,\n  tokenAddr: PublicKey\n): Promise<AccountInfo | null> => {\n  const account = await provider.connection.getAccountInfo(tokenAddr);\n  if (!account) return null;\n  try {\n    const data = parseTokenAccount(account.data);\n    return data;\n  } catch (e) {\n    console.error(\"An error occured parsing the data, returning null\", e);\n    return null;\n  }\n};\n\nexport const getMintInfo = async (\n  provider: Provider,\n  mintAddr: PublicKey\n): Promise<MintInfo | null> => {\n  const account = await provider.connection.getAccountInfo(mintAddr);\n  if (!account) return null;\n  return parseMintAccount(account.data);\n};\n","import { ActionLib, BuildActionMap } from \"@malloc/sdk\";\nimport MintAction from \"./mint\";\nimport { MintToAction } from \"./mint-to\";\nimport SwapAction from \"./swap\";\nimport { TransferAction } from \"./transfer\";\n\nexport { SwapAction } from \"./swap\";\nexport { TransferAction } from \"./transfer\";\nexport { MintAction } from \"./mint\";\nexport { MintToAction } from \"./mint-to\";\n\nexport const MallocSPLBuildActionMap: BuildActionMap = {};\n\n// Add the spl actions to the default mapping\nconst addActionToMap = (actionLib: ActionLib<any>) => {\n  MallocSPLBuildActionMap[actionLib.actionTypeUID] = actionLib;\n};\n\naddActionToMap(SwapAction);\naddActionToMap(TransferAction);\naddActionToMap(MintAction);\naddActionToMap(MintToAction);\n","import {\n  MintAction,\n  MintToAction,\n  SwapAction,\n  TransferAction,\n} from \"@malloc/spl\";\nimport { SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport { ActionTypes } from \"src/globalStore\";\nimport { HiddenInputData, Input, InputClassNames } from \"src/interfaces\";\n\nexport const getActionTypeUIDFromVertex = (vertexType: ActionTypes) => {\n  if (vertexType === \"SWAP\") {\n    return SwapAction.actionTypeUID;\n  } else if (vertexType === \"TRANSFER\") {\n    return TransferAction.actionTypeUID;\n  } else if (vertexType === \"MINT\") {\n    return MintAction.actionTypeUID;\n  } else if (vertexType === \"AIRDROP\") {\n    return MintToAction.actionTypeUID;\n  } else throw `unexpected vertex id of ${vertexType}`;\n};\n\n// TODO: move this over to Malloc SPL and use action type uids instead\nexport const getActionPIDFromVertex = (vertexType: ActionTypes) => {\n  if (vertexType === \"SWAP\") {\n    return getConstants().mallocSpl.SWAP_PROGRAM_ID;\n  } else if (vertexType === \"TRANSFER\") {\n    return getConstants().mallocSpl.TRANSFER_PROGRAM_ID;\n  } else if (vertexType === \"MINT\") {\n    return getConstants().mallocSpl.DUMMY_PASS_THROUGH;\n  } else if (vertexType === \"AIRDROP\") {\n    return getConstants().mallocSpl.MINT_TO;\n  }\n  throw `unexpected vertex id of ${vertexType}`;\n};\n\nexport const getInitInputForActionType = (\n  type: ActionTypes\n): { input: Input; hiddenData?: HiddenInputData } => {\n  switch (type) {\n    case \"MINT\":\n      return {\n        input: [\n          [\n            {\n              value: \"decimals\",\n              readOnly: true,\n            },\n            {\n              value: \"\",\n              className: InputClassNames.wholeNumber,\n            },\n          ],\n          [\n            {\n              value: \"amountOut\",\n              readOnly: true,\n            },\n            {\n              value: \"\",\n              className: InputClassNames.fractionNumber,\n            },\n          ],\n        ],\n      };\n    case \"AIRDROP\":\n      return {\n        input: [\n          [\n            {\n              value: \"recipientWallet\",\n              readOnly: true,\n            },\n            {\n              value: \"\",\n              className: InputClassNames.other,\n            },\n          ],\n        ],\n      };\n    case \"TRANSFER\":\n      return {\n        input: [\n          [\n            {\n              value: \"recipientWallet\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.other },\n          ],\n        ],\n      };\n\n    case \"SWAP\":\n      return {\n        input: [\n          [\n            {\n              value: \"outMint\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.mintAccount },\n          ],\n          [\n            {\n              value: \"minOut\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.wholeNumber },\n          ],\n        ],\n        hiddenData: {\n          rent: SYSVAR_RENT_PUBKEY.toBase58(),\n          serumDexProgramId: getConstants().projectSerum.DEX_PROGRAM_ID,\n        },\n      };\n\n    default:\n      throw `Unexpected action type ${type}`;\n  }\n};\n","import {\n  Action,\n  utils as mallocUtils,\n  BuildEphemeralTxsInstr,\n  builder,\n  MallocSdk,\n  NonUserSpecificConstruction,\n  NonUserSpecificConstructionAction,\n  ActionMetadata,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport {\n  ActionTypes,\n  getGlobalStore,\n  globalStore,\n  SOURCE_NODE_ID,\n} from \"src/globalStore\";\nimport {\n  GraphType,\n  HiddenInputData,\n  Input,\n  NodeType,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { getProvider } from \"./anchor\";\nimport { ErrorGenerator, handleError } from \"./errors\";\nimport {\n  getAllVertices,\n  getNextVertices,\n  getSourceNode,\n  getSourceNodeAccount,\n  getSourceNodeAmount,\n  getVertexType,\n} from \"./graph\";\nimport { getMintInfo, getTokenAccountInfo } from \"./spl-tokens\";\nimport {\n  MallocSPLBuildActionMap,\n  SwapAction,\n  TransferAction,\n} from \"@malloc/spl\";\nimport { GroupAddSharp } from \"@material-ui/icons\";\nimport {\n  getActionPIDFromVertex,\n  getActionTypeUIDFromVertex,\n} from \"./action-types\";\n\nconst PID = new PublicKey(getConstants().MALLOC_PROGRAM_ID);\nconst getMallocSdk = (wallet: AnchorWallet) =>\n  new MallocSdk(PID, getProvider(wallet));\n\nconst getAllIncomingVertexIds = (actionId: string, graph: GraphType) =>\n  getAllVertices(graph).filter((v) =>\n    getNextVertices(graph, v).some((nextEdgeSet) =>\n      nextEdgeSet.map((i) => i.id).includes(actionId)\n    )\n  );\n\nconst getInputFromActionInput = (\n  actionInput: Input,\n  hiddenInputData: any\n): any => {\n  const ret = {} as any;\n  actionInput.map((inpItem) => {\n    ret[inpItem[0].value] = inpItem[1].value;\n  });\n  return { ...ret, ...hiddenInputData };\n};\n\nconst getNextNodes = (\n  allActionIds: string[],\n  actionId: string,\n  graph: GraphType\n): ActionMetadata[\"nextNodes\"] => {\n  const nextActions = getNextVertices(graph, actionId);\n\n  const groupedByMints: ActionMetadata[\"nextNodes\"] = nextActions.map(\n    (nextActionSet) => {\n      return nextActionSet.map((next) => {\n        return {\n          actionIdx: allActionIds.indexOf(next.id),\n          fraction: next.amount,\n        };\n      });\n    }\n  );\n\n  return groupedByMints;\n};\n\nconst getActionData = (\n  actionId: string,\n  allActionIds: string[],\n  graph: GraphType,\n  hiddenInputData: HiddenInputData\n): NonUserSpecificConstructionAction => {\n  const incomingVertices = getAllIncomingVertexIds(actionId, graph);\n\n  const nextNodes: ActionMetadata[\"nextNodes\"] = getNextNodes(\n    allActionIds,\n    actionId,\n    graph\n  );\n\n  const vertexType = getVertexType(actionId);\n  return {\n    actionTypeUID: getActionTypeUIDFromVertex(vertexType),\n    buildActionInputs: getInputFromActionInput(\n      graph[actionId].input,\n      hiddenInputData[actionId]\n    ),\n    actionPID: getActionPIDFromVertex(vertexType),\n    actionMetadata: {\n      ripeAmount: incomingVertices.length,\n      nextNodes,\n    },\n  };\n};\n\nconst _buildNonUserSpecificConstruction = async (\n  g: GraphType,\n  hiddenInputDatas: HiddenInputData,\n  actionVertices: string[],\n  initialSplits: number[],\n  initialActionIndices: number[],\n  amount: string\n): Promise<NonUserSpecificConstruction> => {\n  const vertices = getAllVertices(g);\n\n  return {\n    actionDatas: actionVertices.map((v) =>\n      getActionData(v, actionVertices, g, hiddenInputDatas)\n    ),\n    initialSplits,\n    initialActionIndices,\n    amount,\n  };\n};\n\nconst getInitialInfo = async (\n  g: GraphType,\n  inAccount: PublicKey,\n  actionVertices: string[],\n  provider: Provider\n) => {\n  const sourceNode = getSourceNode(g);\n  const tokenInInfo = await getTokenAccountInfo(provider, inAccount);\n  if (!tokenInInfo) {\n    throw ErrorGenerator.TOKEN_ACCOUNT_DOES_NOT_EXIST(inAccount);\n  }\n\n  const mint = tokenInInfo.mint;\n  const mintInfo = await getMintInfo(provider, mint);\n\n  if (!mintInfo) {\n    throw ErrorGenerator.MINT_ACCOUNT_DOES_NOT_EXIST(mint, inAccount);\n  }\n\n  let amountInF: number;\n  try {\n    amountInF = parseFloat(\n      getSourceNodeAmount(sourceNode.input as SourceNodeInput)\n    );\n  } catch (e) {\n    throw ErrorGenerator.INVALID_AMOUNT_INPUT(\n      getSourceNodeAmount(sourceNode.input as SourceNodeInput)\n    );\n  }\n  const amountIn = utils.tokens.fromReadableNumber(\n    amountInF,\n    mintInfo.decimals\n  );\n  const nextFromSource = getNextVertices(g, SOURCE_NODE_ID)[0];\n\n  return {\n    amount: amountIn,\n    initialMint: mint,\n    initialSplits: nextFromSource.map((n) => n.amount),\n    initialActionIndices: nextFromSource.map((n) =>\n      actionVertices.indexOf(n.id)\n    ),\n  };\n};\n\nconst compileStateIntoSDKInput = async (\n  wallet: AnchorWallet,\n  preferredTokenAccounts?: mallocUtils.tokens.PreferredTokenAccounts\n): Promise<BuildEphemeralTxsInstr> => {\n  const { graph, hiddenInputData: hiddenData } = getGlobalStore();\n\n  const inAccount = new PublicKey(\n    getSourceNodeAccount(getSourceNode(graph).input as SourceNodeInput)\n  );\n\n  const provider = getProvider(wallet);\n  const vertices = getAllVertices(graph);\n  const actionVertices = vertices.slice(1);\n  const { initialSplits, initialActionIndices, initialMint, amount } =\n    await getInitialInfo(graph, inAccount, actionVertices, provider);\n\n  // Get the non specific\n  const nonUserSpecific = await _buildNonUserSpecificConstruction(\n    graph,\n    hiddenData,\n    actionVertices,\n    initialSplits,\n    initialActionIndices,\n    amount\n  );\n\n  const construction = await builder.buildConstructionFromNonUserSpecific(\n    nonUserSpecific,\n    MallocSPLBuildActionMap,\n    inAccount.toBase58(),\n    initialMint.toBase58(),\n    provider\n  );\n\n  return {\n    actions: construction.actions,\n    initialSplits: construction.initialSplits,\n    amount: construction.amount,\n    initialActionIndices: construction.initialActionIndices,\n    amountInAccount: inAccount,\n    opts: { preferredTokenAccounts },\n  };\n};\n\nconst run = async (\n  inp: BuildEphemeralTxsInstr,\n  wallet: AnchorWallet\n): Promise<string[]> => {\n  const sdk = getMallocSdk(wallet);\n  const data = await sdk.buildTxs(inp);\n  return await sdk.sendRequests(data, {\n    prepareCommitment: {\n      skipPreflight: false,\n      preflightCommitment: \"single\",\n      commitment: \"single\",\n    },\n    actionCommitment: {\n      skipPreflight: false,\n      preflightCommitment: \"single\",\n      commitment: \"single\",\n    },\n  });\n};\n\nexport const compileAndRunMallocSDK = async (wallet: AnchorWallet) => {\n  try {\n    const buildInst = await compileStateIntoSDKInput(wallet);\n    const txs = await run(buildInst, wallet);\n    alert(`DONE AND SUCCESSFUL with tx: ${txs}`);\n  } catch (e) {\n    handleError(e);\n  }\n};\n","import React, { Ref, useRef } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useMemo } from \"react\";\nimport { useEffect } from \"react\";\nimport {\n  findAllAssociatedTokenAddress,\n  findAssociatedTokenAddress,\n  getMintInfo,\n  getTokenAccountInfo,\n  getTokenLists,\n} from \"../../utils/spl-tokens\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { SPLToken } from \"../../interfaces\";\nimport { shortenAddress } from \"../../utils/malloc\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { getProvider } from \"../../utils/anchor\";\nimport { isBundle } from \"typescript\";\nimport { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useStore } from \"react-stores\";\nimport { solanaSplStore } from \"../../state/flowchart-store\";\nimport { u64 } from \"@solana/spl-token\";\nimport { utils } from \"@malloc/sdk\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: \"absolute\",\n      width: \"auto\",\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #000\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\nconst TokenLine = ({\n  tok,\n  setChoosen,\n}: {\n  tok: SPLToken;\n  setChoosen: () => void;\n}) => {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n        width: \"100%\",\n        gap: \"5px\",\n      }}\n    >\n      <button onClick={setChoosen}>Choose</button>\n      <div>{tok.info.name}</div>\n      <div>{shortenAddress(tok.info.mint.toBase58())}</div>\n      <div>\n        {shortenAddress(tok.account)}\n        {tok.balance ? \"\" : \" (currently nonexistent)\"}\n      </div>\n      <div>\n        {utils.tokens.toReadableNumber(\n          new u64(tok.balance || 0),\n          tok.info.decimals\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default function TokenAccountChooser(props: {\n  buttonText?: string;\n  onlyWithInitializedAccounts?: boolean;\n  onClose: (tok?: SPLToken) => void;\n  includeCustomTokenAccount?: boolean;\n}) {\n  const onlyWithInitializedAccounts = props.onlyWithInitializedAccounts ?? true;\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [customTokenAccount, setCustomTokenAccount] = React.useState(\"\");\n  const [customMintAccount, setCustomMintAccount] = React.useState(\"\");\n  const wallet = useAnchorWallet();\n  // If it is -1, then the custom state is choosen\n  const [choosen, setChoosen] = useState(-1);\n  const solanaSplStoreHook = useStore(solanaSplStore);\n\n  const provider = getProvider(wallet!);\n\n  const loadTokens = async () => {\n    const tokenList = await getTokenLists(provider);\n    const associatedAddr = await findAllAssociatedTokenAddress(\n      wallet?.publicKey!,\n      tokenList.map((t) => t.address)\n    );\n\n    const bals = await Promise.all(\n      associatedAddr.map(async (addr) => {\n        const data = await getTokenAccountInfo(provider, addr);\n        return data?.amount;\n      })\n    );\n    const accounts = associatedAddr.map((addr, i) => {\n      return {\n        account: addr.toBase58(),\n        info: tokenList[i],\n        balance: bals[i],\n      };\n    });\n    const accountsFiltered = onlyWithInitializedAccounts\n      ? accounts.filter((i) => i.balance)\n      : accounts;\n    const accountsMapped = accountsFiltered.map((i) => {\n      return {\n        ...i,\n        info: {\n          ...i.info,\n          mint: new PublicKey(i.info.address),\n        },\n        balance: i.balance?.toString() || null,\n      };\n    });\n\n    solanaSplStore.setState({\n      ...solanaSplStoreHook,\n      derivedTokenAccounts: accountsMapped,\n    });\n  };\n\n  useEffect(() => {\n    loadTokens();\n  }, []);\n\n  const modalRef = useRef(null);\n\n  const handleOpen = () => {\n    loadTokens();\n    setOpen(true);\n  };\n\n  const handleClose = async () => {\n    if (!solanaSplStoreHook.derivedTokenAccounts) {\n      setOpen(false);\n      props.onClose();\n      return;\n    }\n    if (choosen >= 0)\n      props.onClose(solanaSplStoreHook.derivedTokenAccounts[choosen]);\n    else {\n      const choosenType = choosen === -1 ? \"TOKEN\" : \"MINT\";\n      if (\n        (choosenType === \"TOKEN\" && !customTokenAccount) ||\n        (choosenType === \"MINT\" && !customMintAccount)\n      ) {\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n\n      const tokenAccount =\n        choosenType === \"TOKEN\"\n          ? customTokenAccount\n          : (\n              await findAssociatedTokenAddress(\n                wallet!.publicKey,\n                customMintAccount\n              )\n            ).toBase58();\n      const tokAccountData = await getTokenAccountInfo(\n        provider,\n        new PublicKey(tokenAccount)\n      );\n      if (choosenType === \"TOKEN\" && !tokAccountData) {\n        alert(\"Looks like an invalid SPL Token Account was provided\");\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      if (\n        choosenType === \"MINT\" &&\n        props.onlyWithInitializedAccounts !== false &&\n        !tokAccountData\n      ) {\n        alert(\n          \"Looks like there is no initialized associated account with this mint\"\n        );\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      const mintAddr =\n        choosenType === \"TOKEN\"\n          ? tokAccountData!.mint\n          : new PublicKey(customMintAccount);\n\n      const mintInfo = await getMintInfo(provider, mintAddr);\n      if (!mintInfo) {\n        alert(\"Looks like the mint associated with this token is invalid\");\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      const bal = tokAccountData?.amount || new u64(0);\n      props.onClose({\n        balance: bal,\n        account: tokenAccount,\n        info: {\n          ...mintInfo,\n          mint: mintAddr,\n        },\n      });\n    }\n    setOpen(false);\n    props.onClose();\n  };\n\n  const body = (\n    <div\n      onBlur={handleClose}\n      className=\"wrapper\"\n      // TODO: this is a bit ghetto but react modal isn't working with the cells\n      onClick={(e) => e.currentTarget.blur()}\n      style={{\n        position: \"fixed\",\n        top: \"0\",\n        left: \"0\",\n        height: \"100vh\",\n        width: \"100vw\",\n        zIndex: 100,\n        display: \"grid\",\n        justifyItems: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div style={{ ...modalStyle }} className={classes.paper}>\n        <h2 id=\"simple-modal-title\">Choose a token account</h2>\n        <p id=\"simple-modal-description\">\n          Choose from either your associated token accounts or add a custom\n          address\n        </p>\n        <div\n          className=\"options\"\n          style={{ overflow: \"scroll\", maxHeight: \"70vh\" }}\n        >\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n            }}\n          >\n            <span></span>\n            <div>Mint Name</div>\n            <div>Mint Address</div>\n            <div>Token Account Address</div>\n            <div>Amount</div>\n          </div>\n          {!solanaSplStoreHook.derivedTokenAccounts\n            ? \"Loading...\"\n            : solanaSplStoreHook.derivedTokenAccounts.map((tok, i) => (\n                <div\n                  key={`token-derived-account-${i}`}\n                  style={{\n                    padding: \"0.5rem\",\n                    border: choosen === i ? \"1px solid black\" : \"0px\",\n                  }}\n                >\n                  <TokenLine\n                    tok={tok}\n                    setChoosen={() => {\n                      setChoosen(i);\n                    }}\n                  />\n                  <br />\n                </div>\n              ))}\n          {/* TODO: add balance to the left of this once filled out */}\n          {props.includeCustomTokenAccount && (\n            <div\n              style={{\n                padding: \"0.5rem\",\n                border: choosen === -1 ? \"1px solid black\" : \"0px\",\n              }}\n            >\n              <TextField\n                label=\"Custom Token Account\"\n                value={customTokenAccount}\n                onChange={(e) => setCustomTokenAccount(e.target.value)}\n                onFocus={() => setChoosen(-1)}\n              />\n            </div>\n          )}\n          <p>Or</p>\n          <div\n            style={{\n              padding: \"0.5rem\",\n              border: choosen === -2 ? \"1px solid black\" : \"0px\",\n            }}\n          >\n            <TextField\n              label=\"Custom Mint Account\"\n              value={customMintAccount}\n              onChange={(e) => setCustomMintAccount(e.target.value)}\n              onFocus={() => setChoosen(-2)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        {props.buttonText || \"Choose Token Account\"}\n      </button>\n\n      {/* <Modal\n        open={open}\n        ref={modalRef}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      > */}\n      {open && body}\n      {/* </Modal> */}\n    </div>\n  );\n}\n","import Input from \"@material-ui/core/Input\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select from \"@mui/material/Select\";\nimport FocusTrap from \"focus-trap-react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  CellBase,\n  DataEditorComponent,\n  DataEditorProps,\n} from \"react-spreadsheet\";\nimport { useStore } from \"react-stores\";\nimport { globalStore } from \"src/globalStore\";\nimport { InputClassNames } from \"src/interfaces\";\nimport { getActionVertices } from \"src/utils/graph\";\nimport TokenAccountChooser from \"../tokens/TokenAccountChooser\";\n\nconst InputEditor = (\n  props: DataEditorProps<CellBase> & {\n    isWholeNumber?: boolean;\n    isFractionNumber?: boolean;\n  }\n) => {\n  return (\n    <Input\n      onChange={(e) => {\n        props.onChange({\n          ...props.cell,\n          value: props.isWholeNumber\n            ? parseInt(e.target.value).toString()\n            : e.target.value,\n        });\n      }}\n      value={props.cell?.value || \"\"}\n      type={props.isFractionNumber || props.isWholeNumber ? \"number\" : \"text\"}\n    />\n  );\n};\n\nconst TokenOrMintEditor = (\n  props: DataEditorProps<CellBase> & {\n    type: \"mint\" | \"token\";\n    onlyWithInitialized: boolean;\n  }\n) => {\n  return (\n    <div>\n      <TokenAccountChooser\n        buttonText={\"select\"}\n        onlyWithInitializedAccounts={props.onlyWithInitialized}\n        onClose={(splTok) => {\n          if (splTok) {\n            const value =\n              props.type === \"token\"\n                ? splTok.account\n                : splTok.info.mint.toBase58();\n            props.onChange({\n              ...props.cell,\n              value,\n            });\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nconst ActionVertexEditor = (props: DataEditorProps<CellBase>) => {\n  const store = useStore(globalStore);\n  const vertices = getActionVertices(store.graph);\n  const [active, setActive] = useState(true);\n  const [pause, setPause] = useState(false);\n  return (\n    <div>\n      <FocusTrap active={active} paused={pause}>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={props.cell?.value}\n          label=\"Age\"\n          style={{\n            height: \"20px\",\n          }}\n        >\n          {vertices.map((id) => {\n            return (\n              <span key={`select-opts-${id}`}>\n                <MenuItem\n                  style={{ zIndex: 100 }}\n                  value={id}\n                  onMouseOver={() => setPause(true)}\n                  onFocus={() => {\n                    props.onChange({ ...props.cell, value: id });\n                    setActive(false);\n                  }}\n                >\n                  {id}\n                </MenuItem>\n              </span>\n            );\n          })}\n        </Select>\n      </FocusTrap>\n    </div>\n  );\n};\n\nexport const TableCellEditor: DataEditorComponent<CellBase> = (\n  props: DataEditorProps<CellBase>\n) => {\n  switch (props.cell?.className as InputClassNames) {\n    case InputClassNames.actionVertex:\n      return ActionVertexEditor(props);\n    case InputClassNames.mintAccountOnlyInit:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"mint\",\n        onlyWithInitialized: true,\n      });\n    case InputClassNames.tokenAccountOnlyInit:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"token\",\n        onlyWithInitialized: true,\n      });\n    case InputClassNames.mintAccount:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"mint\",\n        onlyWithInitialized: false,\n      });\n    case InputClassNames.tokenAccount:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"token\",\n        onlyWithInitialized: false,\n      });\n    case InputClassNames.other:\n      return InputEditor(props);\n    case InputClassNames.wholeNumber:\n      return InputEditor({ ...props, isWholeNumber: true });\n    case InputClassNames.fractionNumber:\n      return InputEditor({ ...props, isFractionNumber: true });\n    default:\n      return InputEditor(props);\n  }\n};\n","import { Wallet } from \"@project-serum/anchor\";\nimport { createTokenAccount, Provider } from \"@project-serum/common\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { getConstants } from \"../../config/constants\";\n\nconst richUSDCAirdroperSK = new Uint8Array([\n  8, 57, 204, 222, 105, 129, 113, 8, 245, 54, 20, 45, 122, 175, 82, 37, 32, 44,\n  46, 6, 54, 35, 168, 208, 213, 194, 164, 50, 97, 226, 134, 119, 136, 196, 213,\n  189, 243, 233, 16, 53, 22, 220, 245, 4, 17, 203, 251, 233, 20, 7, 178, 5, 36,\n  19, 66, 89, 210, 148, 19, 225, 117, 61, 214, 253,\n]);\n\nconst richUSDCSigner = new Wallet(Keypair.fromSecretKey(richUSDCAirdroperSK));\n\nconst getRichUsdcProvider = (endpointURL: string) =>\n  new Provider(new Connection(endpointURL), richUSDCSigner, {\n    commitment: \"confirmed\",\n  });\n\nexport const performUsdcAirdrop = async (userAddr: PublicKey) => {\n  try {\n    const tokAccount = await tryCreateAssociatedAccount(\n      new PublicKey(getConstants().demo.FAKE_USDC),\n      userAddr,\n      getRichUsdcProvider(getConstants().solana.RPC)\n    );\n    await airdrop(new PublicKey(getConstants().demo.FAKE_USDC_GD), [\n      tokAccount,\n    ]);\n    alert(\"Done with your airdrop\");\n  } catch (e) {\n    console.error(e);\n    alert(`An error occurred with the airdrop ${JSON.stringify(e)}`);\n  }\n};\n\nconst tryCreateAssociatedAccount = async (\n  mint: PublicKey,\n  account: PublicKey,\n  provider: Provider\n): Promise<PublicKey> => {\n  const associated = (\n    await PublicKey.findProgramAddress(\n      [\n        account.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(mint).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n  const data = await provider.connection.getAccountInfo(associated);\n  if (!data) {\n    const instr = Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mint,\n      associated,\n      account,\n      provider.wallet.publicKey\n    );\n    const tx = new Transaction();\n    tx.add(instr);\n    await provider.send(tx, []);\n    return associated;\n  }\n  return associated;\n};\n\nconst airdrop = async (\n  gdUsdc: PublicKey,\n  airDropToTokenAccounts: PublicKey[]\n) => {\n  const decimals = 6;\n  const amountAirdrop = 4 * 10 ** decimals;\n\n  const transferTxs: Transaction = new Transaction();\n  airDropToTokenAccounts.map((tokAccount) => {\n    transferTxs.add(\n      Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        gdUsdc,\n        tokAccount,\n        richUSDCSigner.publicKey,\n        [],\n        amountAirdrop\n      )\n    );\n  });\n\n  await getRichUsdcProvider(getConstants().solana.RPC).send(transferTxs, [], {\n    skipPreflight: true,\n  });\n};\n","import React, { useState, FC } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport Button from \"@mui/material/Button\";\n\nimport Spreadsheet from \"react-spreadsheet\";\nimport GraphVisualizer from \"./graph-visualizer\";\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  NextAction,\n  InputClassNames,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { useStore } from \"react-stores\";\nimport {\n  ActionTypes,\n  ACTION_TYPES,\n  downloadGlobalStore,\n  globalStore,\n  INIT_NEXT_ACTION,\n  NEXT_ACTION_ROW,\n  setGlobalStoreFromFile,\n  SOURCE_NODE_ID,\n} from \"../globalStore\";\nimport {\n  compileAndRunMallocSDK,\n} from \"src/utils/sdk-interpelator\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  getSourceNodeAccount,\n} from \"src/utils/graph\";\nimport { MallocSPLBuildActionMap } from \"@malloc/spl\";\nimport { TableCellEditor } from \"./table/table-cells\";\nimport { performUsdcAirdrop } from \"./usdc-airdrop/perform-usdc-airdrop\";\nimport { saveStringToFile } from \"src/utils/files\";\nimport { Satellite } from \"@material-ui/icons\";\nimport { getMintInfo, getTokenAccountInfo } from \"src/utils/spl-tokens\";\nimport { getProvider } from \"src/utils/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getActionTypeUIDFromVertex, getInitInputForActionType } from \"src/utils/action-types\";\n\nconst TableGUI: FC = () => {\n  const state = useStore(globalStore);\n  const actions = ACTION_TYPES;\n  const wallet = useAnchorWallet();\n  const buttonStyle = {\n    maxWidth: \"20px\",\n    maxHeight: \"20px\",\n    minWidth: \"20px\",\n    minHeight: \"20px\",\n  };\n\n  // Control panel loaders\n  const [loadingAirdrop, setLoadingAirdrop] = useState(false);\n  const [loadingCompileAndRun, setLoadingCompileAndRun] = useState(false);\n  // End control panel loaders\n\n  const setInput = async (data: Input) => {\n    state.graph[state.selected].input = data as Input;\n    let mintName = state.sourceMint;\n    if (state.selected === SOURCE_NODE_ID) {\n      const sourceAccount = getSourceNodeAccount(data as SourceNodeInput);\n      if (sourceAccount) {\n        const info = await getTokenAccountInfo(\n          getProvider(wallet!),\n          new PublicKey(sourceAccount)\n        );\n        if (info) {\n          mintName = info.mint.toBase58();\n        }\n      }\n    }\n    globalStore.setState({\n      ...state,\n      sourceMint: mintName,\n      graph: { ...state.graph },\n    });\n  };\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        gap: \"10px\",\n      }}\n    >\n      <Card>\n        <div\n          style={{\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            alignItems: \"flex-start\",\n            gap: \"10px\",\n          }}\n        >\n          {/* NODE SELECTOR */}\n          <Card>\n            <CardContent>\n              <h2>Node Id</h2>\n\n              <select\n                id=\"node-selector\"\n                className=\"form-select\"\n                size={10}\n                aria-label=\"size 3 select example\"\n                style={{ width: \"200px\" }}\n                onChange={(e) => {\n                  globalStore.setState({ selected: e.target.value });\n                }}\n              >\n                {Object.keys(state.graph).map(function (key, value) {\n                  return <option value={key}>{key}</option>;\n                })}\n              </select>\n            </CardContent>\n\n            <select\n              className=\"form-select\"\n              aria-label=\"Default select example\"\n              onChange={(e) => {\n                globalStore.setState({ new_action: e.target.value });\n              }}\n            >\n              {actions.map((value, index) => {\n                return <option value={value}>{value}</option>;\n              })}\n            </select>\n\n            <Button\n              variant=\"text\"\n              style={buttonStyle}\n              onClick={() => {\n                let node_id = state.new_action + \"-\" + state.counter.toString();\n\n                const init = getInitInputForActionType(\n                  state.new_action as ActionTypes\n                );\n                let new_node: NodeType = {\n                  input: init.input,\n                  // TODO: make a seperate fn\n                  next_actions: [\n                    ...Array(\n                      MallocSPLBuildActionMap[\n                        getActionTypeUIDFromVertex(\n                          state.new_action as ActionTypes\n                        )\n                      ].expectedNumberOfOutMints\n                    ),\n                  ].map((i) => INIT_NEXT_ACTION),\n                };\n                state.graph[node_id] = new_node;\n                state.hiddenInputData[node_id] = init.hiddenData || {};\n                globalStore.setState({\n                  ...state,\n                  selected: node_id,\n                  counter: state.counter + 1,\n                  graph: { ...state.graph },\n                });\n              }}\n            >\n              +\n            </Button>\n            <Button\n              variant=\"text\"\n              style={buttonStyle}\n              onClick={() => {\n                if (state.selected == \"SOURCE-0\") return;\n                delete state.graph[state.selected];\n                globalStore.setState({\n                  ...state,\n                  selected: \"SOURCE-0\",\n                  graph: { ...state.graph },\n                });\n              }}\n            >\n              -\n            </Button>\n          </Card>\n\n          {/* NODE INFO */}\n          <Card>\n            <CardContent>\n              <h2>{state.selected} info</h2>\n\n              {state.selected === SOURCE_NODE_ID && (\n                <p>Source Mint: {state.sourceMint}</p>\n              )}\n\n              <h5>Input</h5>\n              <Spreadsheet\n                data={state.graph[state.selected].input}\n                onChange={(data) => setInput(data as Input)}\n                DataEditor={TableCellEditor}\n              />\n\n              <h5>Next Action</h5>\n              {state.graph[state.selected].next_actions.map(\n                (next_action_by_mint, i) => {\n                  return (\n                    <div key={`next-action-${i}`}>\n                      <Spreadsheet\n                        data={state.graph[state.selected].next_actions[i]}\n                        onChange={(data) => {\n                          state.graph[state.selected].next_actions[i] =\n                            data as NextAction[];\n                          globalStore.setState({\n                            ...state,\n                            graph: { ...state.graph },\n                          });\n                          console.log(state.graph[state.selected].next_actions);\n                        }}\n                        DataEditor={TableCellEditor}\n                      />\n                      <CardActions>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={() => {\n                            state.graph[state.selected].next_actions[0] = [\n                              ...state.graph[state.selected].next_actions[0],\n                              NEXT_ACTION_ROW,\n                            ];\n                            globalStore.setState({\n                              ...state,\n                              graph: { ...state.graph },\n                            });\n                            console.log(\n                              \"new action\",\n                              state.graph[state.selected].next_actions\n                            );\n                          }}\n                        >\n                          New Action\n                        </Button>\n\n                        <Button\n                          variant=\"outlined\"\n                          onClick={() => {\n                            if (\n                              state.graph[state.selected].next_actions.length >\n                              2\n                            ) {\n                              let temp =\n                                state.graph[state.selected].next_actions;\n                              state.graph[state.selected].next_actions =\n                                temp.slice(0, temp.length - 1);\n                              globalStore.setState({\n                                ...state,\n                                graph: { ...state.graph },\n                              });\n                              console.log(\n                                \"remove action\",\n                                state.graph[state.selected].next_actions\n                              );\n                            }\n                          }}\n                        >\n                          Remove Action\n                        </Button>\n                      </CardActions>\n                    </div>\n                  );\n                }\n              )}\n            </CardContent>\n          </Card>\n\n          {/* NODE VISUALIZER */}\n          <Card>\n            <CardContent>\n              <h2>Visualizer</h2>\n              <GraphVisualizer />\n            </CardContent>\n            <CardActions>\n              <Button\n                variant=\"outlined\"\n                disabled={loadingCompileAndRun}\n                onClick={() => {\n                  setLoadingCompileAndRun(true);\n                  compileAndRunMallocSDK(wallet!)\n                    .then((_) => setLoadingCompileAndRun(false))\n                    .catch((e) => setLoadingCompileAndRun(false));\n                }}\n              >\n                {loadingCompileAndRun ? \"Running...\" : \"Compile and Run\"}\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => {\n                  setLoadingAirdrop(true);\n                  performUsdcAirdrop(wallet!.publicKey).then((_) =>\n                    setLoadingAirdrop(false)\n                  );\n                }}\n                disabled={loadingAirdrop}\n              >\n                {loadingAirdrop ? \"Loading Airdrop...\" : \"Airdrop Fake USDC\"}\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => setGlobalStoreFromFile()}\n              >\n                Import\n              </Button>\n              <Button variant=\"outlined\" onClick={() => downloadGlobalStore()}>\n                Export\n              </Button>\n            </CardActions>\n          </Card>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default TableGUI;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  shortenAddress,\n} from \"./utils/malloc\";\nimport { useStore } from \"react-stores\";\nimport LoadingTX from \"./components/tx-handler/LoadingTX\";\nimport TableGUI from \"./components/tablegui\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nexport interface HomeProps {\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const wallet = useWallet();\n\n  useEffect(() => {\n    (async () => {\n      if (wallet?.publicKey) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  return (\n    <main>\n      {wallet.connected && (\n        <p style={{ marginTop: 0 }}>\n          Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}\n        </p>\n      )}\n\n      {wallet.connected && (\n        <p>Balance: {(balance || 0).toLocaleString()} SOL</p>\n      )}\n      {wallet.connected && \"WALLET CONNECTED\"}\n      {!wallet.connected && <ConnectButton>Connect Wallet</ConnectButton>}\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n\n      {wallet.connected && <TableGUI />}\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { getConstants } from \"./config/constants\";\n\nconst config = new anchor.web3.PublicKey(getConstants().MALLOC_PROGRAM_ID);\n\nconst network = getConstants().solana.NETWORK;\n\nconst rpcHost = getConstants().solana.RPC;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletDialogProvider>\n          <Home\n            config={config}\n            connection={connection}\n            txTimeout={txTimeout}\n          />\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport enum Side {\n  Bid = 0,\n  Ask = 1,\n}\n\nexport interface SwapAccounts {\n  market: {\n    market: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    coinVault: PublicKey;\n    pcVault: PublicKey;\n    vaultSigner: PublicKey;\n    // User params.\n    openOrders: PublicKey;\n    orderPayerTokenAccount: PublicKey;\n    coinWallet: PublicKey;\n  };\n  pcWallet: PublicKey;\n  authority: PublicKey;\n  dexProgram: PublicKey;\n  tokenProgram: PublicKey;\n  rent: PublicKey;\n}\n\nexport enum SwapInstructionByte {\n  BasicSwap = 0,\n}\n","export const CONSTRUCTION_ACCOUNT_SIZE = 2e4; // Around 3 kilobytes\nconst ONE_HOUR_MS = 1000 * 60 * 60;\nconst HOURS_PER_EPOCH = 48;\nexport const LIVE_N_EPOCHS = 3;\nexport const LIFETIME_RESULT_ACCOUNT_MS = ONE_HOUR_MS * (HOURS_PER_EPOCH * LIVE_N_EPOCHS); // Has to be more than 1 epoch, lets be sage\nexport const LIFETIME_CONSTRUCTION_ACCOUNT_MS =\n  ONE_HOUR_MS * (HOURS_PER_EPOCH * LIVE_N_EPOCHS);\n\n// Rent constants from https://docs.solana.com/developing/programming-model/accounts\n// TODO: should this be from a dynamic value?\nexport const LAMPORTS_PER_EPOCH = 19.055;\nexport const MS_PER_EPOCH = ONE_HOUR_MS * HOURS_PER_EPOCH;\n","import { BN, Instruction } from \"@project-serum/anchor\";\nimport { Provider, Wallet } from \"../../../../../../anchor/ts\";\nimport { transfer } from \"@project-serum/serum/lib/token-instructions\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport {\n  Account,\n  Connection,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Action } from \"../interfaces\";\nimport { createTokenAccount, SendTxRequest } from \"@project-serum/common\";\n\nexport const tryCreateAssociatedAccountInst = async (\n  mint: PublicKey,\n  owner: PublicKey,\n  connection: Connection,\n  payer: PublicKey\n): Promise<{\n  associateTokAccount: PublicKey;\n  instr?: TransactionInstruction;\n}> => {\n  const associated = (\n    await PublicKey.findProgramAddress(\n      [\n        owner.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(mint).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n  const data = await connection.getAccountInfo(associated);\n  if (!data) {\n    const inst = Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      new PublicKey(mint),\n      associated,\n      owner,\n      payer\n    );\n    return {\n      instr: inst,\n      associateTokAccount: associated,\n    };\n  } else {\n    return {\n      associateTokAccount: associated,\n    };\n  }\n};\n\nexport const tryCreateAssociatedAccount = async (\n  mint: PublicKey,\n  owner: PublicKey,\n  provider: Provider\n) => {\n  const { associateTokAccount, instr } = await tryCreateAssociatedAccountInst(\n    mint,\n    owner,\n    provider.connection,\n    provider.wallet.publicKey\n  );\n  if (!instr) return associateTokAccount;\n  const tx = new Transaction();\n  tx.add(instr);\n  await provider.send(tx);\n  return associateTokAccount;\n};\n\nexport interface AccountByMint {\n  [mint: string]: { publicKey: PublicKey };\n}\n\nexport const transferToTx = async (\n  source: PublicKey,\n  destination: PublicKey,\n  amount: BN,\n  authority: Signer | Wallet\n): Promise<SendTxRequest> => {\n  const signer = (authority as Signer).secretKey ? [authority as Account] : [];\n  const inst = transfer({\n    source,\n    destination,\n    amount,\n    owner: authority.publicKey,\n  });\n  const tx = new Transaction();\n  tx.add(inst);\n  return { tx, signers: signer };\n};\n\nexport type PreferredTokenAccounts = { [mint: string]: PublicKey };\n\n/**\n * Get the token account which the malloc sdk will use for a mint\n *\n * @param preferredTokenAccounts - a map of mints to token accounts which the caller would prefer to use per mint. If the account does not exist,\n * and is needed it will be created in the the returned txs\n */\nexport const getTokenAccountUsedByMalloc = async (\n  tokenAuthority: PublicKey,\n  mintAccount: PublicKey,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<PublicKey> => {\n  if (\n    preferredTokenAccounts &&\n    preferredTokenAccounts[mintAccount.toBase58()]\n  ) {\n    return preferredTokenAccounts[mintAccount.toBase58()];\n  }\n  return await findAssociatedTokenAddress(tokenAuthority, mintAccount);\n};\n\n/**\n * Takes in a mapping of mints to token accounts. If a token account has yet to exist, one will be made\n * which is associated to the authority's address\n *\n * @param preferredTokenAccounts - a map of mints to token accounts which the caller would prefer to use per mint. If the account does not exist,\n * and is needed it will be created in the the returned txs\n */\nexport const createTokenAccountsForActions = async (\n  provider: Provider,\n  tokenAuthority: Signer | Wallet,\n  actions: Action[],\n  fundingAccount: Signer | Wallet,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<{ accounts: AccountByMint; txs: SendTxRequest[] }> => {\n  const mints = getMintsNoDuplicates(\n    actions\n      .map((a) => {\n        const mints = [];\n        if (a.tokenCreationOptions?.skipOutTokenCreations || false) {\n          const skipIdxs = a.tokenCreationOptions.skipOutTokenCreations;\n          console.log(skipIdxs);\n          // Skip all the mints which are included by the skipIdxs\n          a.tokenMintOuts.forEach((mint, i) => {\n            if (!skipIdxs.includes(i)) mints.push(mint);\n          });\n        } else {\n          mints.push(...a.tokenMintOuts);\n        }\n        if (a.tokenCreationOptions?.skipInTokenCreation === true) {\n        } else {\n          mints.push(a.tokenMintIn);\n        }\n        return mints;\n      })\n      .flat()\n  );\n  console.log(mints);\n\n  let accounts: AccountByMint = {};\n  for (let i = 0; i < mints.length; i++) {\n    const mint = mints[i];\n    if ((preferredTokenAccounts || {})[mint])\n      accounts[mint] = { publicKey: preferredTokenAccounts[mint] };\n    // create the token account if not provided\n    else {\n      const pk = await findAssociatedTokenAddress(\n        tokenAuthority.publicKey,\n        mint\n      );\n      accounts[mint] = {\n        publicKey: pk, // TODO: check that this account does not yet exist\n      };\n    }\n  }\n\n  const createTokTx = await Promise.all(\n    mints.map(async (mint) => {\n      const associatedToSignerAccount = accounts[mint].publicKey;\n      const accountExists = await provider.connection.getAccountInfo(\n        associatedToSignerAccount\n      );\n\n      // Return if the account already exists\n      if (accountExists) {\n        console.log(\"ALREADY EXISTS\");\n        return null;\n      }\n      const insts = Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(mint),\n        accounts[mint].publicKey,\n        tokenAuthority.publicKey,\n        fundingAccount.publicKey\n      );\n      const tx = new Transaction();\n      tx.add(insts);\n      const signers: Account[] = (fundingAccount as Signer).secretKey\n        ? [fundingAccount as Account]\n        : [];\n      return {\n        tx,\n        signers: signers,\n      };\n    })\n  );\n\n  return { accounts: accounts, txs: createTokTx.filter((i) => !!i) };\n};\n\n// TODO: if there are 2 token accounts of the same type, one of them not being made, then there will be an error out\n\n// See https://spl.solana.com/associated-token-account\nconst findAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey | string\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(tokenMintAddress).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMintsNoDuplicates = (mints: PublicKey[]) => [\n  ...new Set(mints.map(pkToStr)),\n];\n\nconst pkToStr = (pk: PublicKey) => pk.toBase58();\nconst pkFromStr = (pk: string) => new PublicKey(pk);\n\nexport const toReadableNumber = (number: u64, decimals: number): string => {\n  function trimTrailingZeroes(value: string): string {\n    return value.replace(/\\.?0*$/, \"\");\n  }\n  function formatWithCommas(value: string): string {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(value)) {\n      value = value.replace(pattern, \"$1,$2\");\n    }\n    return value;\n  }\n\n  const balance = number.toString();\n  const wholeStr = balance.substring(0, balance.length - decimals) || \"0\";\n  // TODO: correct?\n  const fractionStr = balance\n    .substring(balance.length - decimals)\n    .padStart(decimals, \"0\")\n    .substring(0, decimals);\n\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n};\n\nexport const fromReadableNumber = (\n  number: number,\n  decimals: number\n): string => {\n  function trimLeadingZeroes(value: string): string {\n    value = value.replace(/^0+/, \"\");\n    if (value === \"\") {\n      return \"0\";\n    }\n    return value;\n  }\n\n  const split = number.toString().split(\".\");\n  const wholePart = split[0];\n  const fracPart = split[1] || \"\";\n  if (split.length > 2 || fracPart.length > decimals) {\n    throw new Error(`Cannot parse '${number}' as token amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(decimals, \"0\"));\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport { MallocSdk } from \"@malloc/sdk\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const getMallocSdk = (wallet: anchor.Provider): MallocSdk => {\n  return new MallocSdk(\n    new PublicKey(getConstants().MALLOC_PROGRAM_ID || \"\"),\n    wallet\n  );\n};\n","import {\n  Account,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { MintInfo, TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport {\n  ActionLib,\n  AccountsArray,\n  Action,\n  ActionMetadata,\n  BuildIsolatedActionFn,\n  BuildIsolatedActionFnOpts,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider, web3 } from \"@project-serum/anchor\";\nimport { TokenInfo, TokenListContainer } from \"@solana/spl-token-registry\";\nimport {\n  connection,\n  createMintInstructions,\n  createTokenAccountInstrs,\n  parseMintAccount,\n  SendTxRequest,\n} from \"@project-serum/common\";\n\nconst actionTypeUID = \"MALLOC_SPL_MINT\";\n\ntype BuildIsolatedMintArgs = {\n  authority?: string;\n  decimals: string;\n  amountOut: string;\n};\n\nexport const buildIsolatedMintAction: BuildIsolatedActionFn<BuildIsolatedMintArgs> =\n  async (\n    inp: BuildIsolatedMintArgs,\n    inMint: string,\n    inTokenAccount: string,\n    dummyPassThroughActionPID: string,\n    provider: Provider,\n    opts?: BuildIsolatedActionFnOpts<BuildIsolatedMintArgs>\n  ) => {\n    const decimals = parseInt(inp.decimals);\n    const mint = new Keypair();\n    const amountOutExpanded = utils.tokens.fromReadableNumber(\n      parseFloat(inp.amountOut),\n      decimals\n    );\n\n    const outTokenAccount = await utils.tokens.getTokenAccountUsedByMalloc(\n      provider.wallet.publicKey,\n      mint.publicKey,\n      opts?.preferredTokenAccounts\n    );\n\n    const authority = new PublicKey(inp.authority || provider.wallet.publicKey);\n\n    return {\n      isolatedAction: {\n        addDefaultTokAccounts: false,\n        actionData: serializeData(amountOutExpanded.toString()),\n        tokenAccountOuts: [outTokenAccount],\n        actionAccounts: [],\n        actionProgram: new PublicKey(dummyPassThroughActionPID),\n        tokenMintIn: new PublicKey(inMint),\n        tokenMintOuts: [mint.publicKey],\n        additionalSigners: [mint],\n        tokenCreationOptions: {\n          skipOutTokenCreations: [0],\n        },\n        instructions: [\n          ...(await createMintInstructions(\n            provider,\n            authority,\n            mint.publicKey,\n            decimals\n          )),\n        ],\n      },\n    };\n  };\n\nconst serializeData = (amount: string) => Buffer.from(`[${amount}]`);\n\n/**\n * The file's main export\n */\nexport const MintAction: ActionLib<BuildIsolatedMintArgs> = {\n  buildIsolatedAction: buildIsolatedMintAction,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\nexport default MintAction;\n","import { ActionLib, BuildIsolatedActionFn, utils } from \"@malloc/sdk\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Ed25519Program, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { Provider } from \"../../../../anchor/ts/src\";\n\n/**\n * @param authoritySecret - a hex encoded secret key\n */\ntype BuildMintToArgs = {\n  recipientWallet: string;\n  authoritySecret?: string;\n};\n\nconst actionTypeUID = \"MALLOC_SPL_MINT_TO\";\n\nconst buildIsolatedMintTo: BuildIsolatedActionFn<BuildMintToArgs> = async (\n  inp: BuildMintToArgs,\n  mintAccount: string,\n  inputTokenAccount: string,\n  mintToPID,\n  provider: Provider\n) => {\n  // TODO: note the below is untested and will remain so till the hackathon is over\n  const authoritySigner = inp.authoritySecret\n    ? Keypair.fromSecretKey(\n        new Uint8Array(Buffer.from(inp.authoritySecret, \"hex\"))\n      )\n    : undefined;\n  const mintIn = new PublicKey(mintAccount);\n  // TODO: this pattern may be problematic... this account may exist after the initial run through of creating token accounts\n  // hmmmm.... whatever for now, but in the future I think we'll have to rethink the whole token account creation thing me thinks...\n  const {\n    associateTokAccount: associateTokAccountRecipient,\n    instr: createTokInstr,\n  } = await utils.tokens.tryCreateAssociatedAccountInst(\n    mintIn,\n    new PublicKey(inp.recipientWallet),\n    provider.connection,\n    provider.wallet.publicKey\n  );\n\n  return {\n    isolatedAction: {\n      tokenMintIn: mintIn,\n      actionData: Buffer.from([]),\n      actionProgram: new PublicKey(mintToPID),\n      actionAccounts: [\n        {\n          address: mintIn,\n          isWriteable: true,\n        },\n        {\n          address: associateTokAccountRecipient,\n          isWriteable: true,\n        },\n        {\n          address: authoritySigner?.publicKey || provider.wallet.publicKey,\n          isSigner: true,\n        },\n        {\n          address: TOKEN_PROGRAM_ID,\n        },\n      ],\n      additionalSigners: authoritySigner ? [authoritySigner] : [],\n      tokenMintOuts: [],\n      tokenAccountOuts: [],\n      instructions: createTokInstr ? [createTokInstr] : undefined,\n      tokenCreationOptions: {\n        skipInTokenCreation: true,\n      },\n    },\n  };\n};\n\nexport const MintToAction: ActionLib<BuildMintToArgs> = {\n  buildIsolatedAction: buildIsolatedMintTo,\n  actionTypeUID,\n  expectedNumberOfOutMints: 0,\n};\n","import {\n  Account,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { MintInfo, TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport { Side, SwapAccounts, SwapInstructionByte } from \"./swap-interfaces\";\nimport {\n  ActionLib,\n  AccountsArray,\n  Action,\n  ActionMetadata,\n  BuildIsolatedActionFn,\n  BuildIsolatedActionFnOpts,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider, web3 } from \"@project-serum/anchor\";\nimport { TokenInfo, TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Market, OpenOrders, TokenInstructions } from \"@project-serum/serum\";\nimport {\n  connection,\n  parseMintAccount,\n  SendTxRequest,\n} from \"@project-serum/common\";\nimport { Swap } from \"@project-serum/swap\";\n\nexport * from \"./swap-interfaces\";\n\nconst actionTypeUID = \"MALLOC_SPL_SWAP\";\n\ninterface SwapInput {\n  // outTokenAccount: string; //TODO: hmmm...\n  outMint: string;\n  serumDexProgramId: string;\n  rent: string;\n  openOrdersAccount?: string;\n}\n\ntype BuildIsolatedSwapArgs = SwapInput & {\n  minOut: string;\n};\nexport const buildIsolatedSwapAction: BuildIsolatedActionFn<BuildIsolatedSwapArgs> =\n  async (\n    inp: BuildIsolatedSwapArgs,\n    inMint: string,\n    inTokenAccount: string,\n    swapPID: string,\n    provider: Provider,\n    opts?: BuildIsolatedActionFnOpts<BuildIsolatedSwapArgs>\n  ) => {\n    const outTokenAccount = await utils.tokens.getTokenAccountUsedByMalloc(\n      provider.wallet.publicKey,\n      new PublicKey(inp.outMint),\n      opts?.preferredTokenAccounts\n    );\n    const swapInfo = await buildSwapAccounts(\n      inp,\n      inMint,\n      inTokenAccount,\n      outTokenAccount.toBase58(),\n      provider\n    );\n\n    return {\n      isolatedAction: {\n        addDefaultTokAccounts: false,\n        actionData: packSwapData(\n          SwapInstructionByte.BasicSwap,\n          swapInfo.side,\n          new u64(inp.minOut)\n        ),\n        tokenAccountOuts: [outTokenAccount],\n        actionAccounts: swapAccountsToActionAccounts(\n          swapInfo.swapAccounts,\n          swapInfo.side\n        ),\n        actionProgram: new PublicKey(swapPID),\n        tokenMintIn: new PublicKey(inMint),\n        tokenMintOuts: [new PublicKey(inp.outMint)],\n        preActionTxs: swapInfo.openOrderInitTx\n          ? [swapInfo.openOrderInitTx]\n          : [],\n      },\n    };\n  };\n\nexport const buildSwapAccounts = async (\n  inp: SwapInput,\n  inMint: string,\n  inTokenAccount: string,\n  outTokenAccount: string,\n  provider: Provider\n): Promise<{\n  swapAccounts: SwapAccounts;\n  openOrderInitTx?: SendTxRequest;\n  market: Market;\n  side: Side;\n}> => {\n  const serumDexId = new PublicKey(inp.serumDexProgramId);\n  const marketRet = await getMarket(\n    provider.connection,\n    new PublicKey(inMint),\n    new PublicKey(inp.outMint),\n    serumDexId\n  );\n  if (!marketRet) throw \"No markets found\";\n\n  const { side, pk: marketPk } = marketRet;\n  const marketSel = await Market.load(\n    provider.connection,\n    marketPk,\n    {},\n    serumDexId\n  );\n\n  const openOrderAccountData = await getOpenOrdersAccount(\n    provider.connection,\n    marketSel,\n    provider.wallet.publicKey,\n    new PublicKey(inp.serumDexProgramId)\n  );\n\n  const [vaultSigner, _] = await getVaultOwnerAndNonce(\n    marketSel.decoded.ownAddress,\n    new PublicKey(inp.serumDexProgramId)\n  );\n\n  const coinWallet = side === Side.Bid ? outTokenAccount : inTokenAccount;\n  const pcWallet = side === Side.Bid ? inTokenAccount : outTokenAccount;\n\n  return {\n    market: marketSel,\n    swapAccounts: {\n      market: {\n        market: marketSel.decoded.ownAddress,\n        requestQueue: marketSel.decoded.requestQueue,\n        eventQueue: marketSel.decoded.eventQueue,\n        bids: marketSel.decoded.bids,\n        asks: marketSel.decoded.asks,\n        coinVault: marketSel.decoded.baseVault,\n        pcVault: marketSel.decoded.quoteVault,\n        vaultSigner: vaultSigner,\n        // User params.\n        openOrders: new PublicKey(\n          inp.openOrdersAccount || openOrderAccountData.openOrderPk\n        ),\n        orderPayerTokenAccount: new PublicKey(inTokenAccount),\n        coinWallet: new PublicKey(coinWallet),\n      },\n      pcWallet: new PublicKey(pcWallet),\n      authority: provider.wallet.publicKey,\n      dexProgram: new PublicKey(inp.serumDexProgramId),\n      tokenProgram: new PublicKey(TOKEN_PROGRAM_ID),\n      rent: new PublicKey(inp.rent),\n    },\n\n    openOrderInitTx: inp.openOrdersAccount\n      ? undefined\n      : openOrderAccountData.openOrderTx,\n    side,\n  };\n};\n\n/**\n * get the open order accounts associated with the market and owner\n *\n * If none exist, create a new account and return a tx to create/ init the account as well\n */\nconst getOpenOrdersAccount = async (\n  connection: Connection,\n  market: Market,\n  owner: PublicKey,\n  dexPID: PublicKey\n): Promise<{\n  openOrderPk: PublicKey;\n  openOrderTx?: SendTxRequest;\n}> => {\n  const openOrders = await OpenOrders.findForMarketAndOwner(\n    connection,\n    market.address,\n    owner,\n    dexPID\n  );\n  if (openOrders.length === 0) {\n    const openOrderAccount = new Account(new Keypair().secretKey);\n    const openOrdersTx = new Transaction();\n    openOrdersTx.add(\n      await OpenOrders.makeCreateAccountTransaction(\n        connection,\n        market.decoded.ownAddress,\n        owner,\n        openOrderAccount.publicKey,\n        dexPID\n      )\n    );\n\n    return {\n      openOrderPk: openOrderAccount.publicKey,\n      openOrderTx: {\n        tx: openOrdersTx,\n        signers: [openOrderAccount],\n      },\n    };\n  } else {\n    return {\n      openOrderPk: openOrders[0].publicKey,\n    };\n  }\n};\n\n// TODO: this just takes the first market available... have some sorta best market in the future?\nexport const getMarket = async (\n  connection: Connection,\n  inMint: PublicKey,\n  outMint: PublicKey,\n  serumDexProgramId: PublicKey\n) => {\n  // TODO: slightly confused about side\n  let side = Side.Ask;\n  let marketPks = await getMarketsFromBaseMinttoQuoteMint(\n    connection,\n    inMint,\n    outMint,\n    serumDexProgramId\n  );\n\n  // Try the other market side\n  if (!marketPks || marketPks.length === 0) {\n    marketPks = await getMarketsFromBaseMinttoQuoteMint(\n      connection,\n      outMint,\n      inMint,\n      serumDexProgramId\n    );\n    side = Side.Bid;\n  }\n  if (!marketPks || marketPks.length === 0) return null;\n  return { pk: marketPks[0], side };\n};\n\nexport const packSwapData = (\n  instrByte: SwapInstructionByte,\n  side: Side,\n  minOut: u64\n): Buffer => {\n  const packedMinOut = minOut.toArrayLike(Buffer, \"be\", 8);\n  const initPart = Buffer.from(new Uint8Array([instrByte, side]));\n  return Buffer.concat([initPart, packedMinOut]);\n};\n\nexport const swapAccountsToActionAccounts = (\n  swapAccounts: SwapAccounts,\n  side: Side,\n  referralAccount?: PublicKey\n): AccountsArray => {\n  const tokenAccount =\n    side === Side.Bid ? swapAccounts.pcWallet : swapAccounts.market.coinWallet;\n  const outAccount =\n    side === Side.Bid ? swapAccounts.market.coinWallet : swapAccounts.pcWallet;\n  const accounts = [\n    {\n      isWriteable: true,\n      address: tokenAccount,\n    },\n    {\n      address: swapAccounts.tokenProgram,\n    },\n    {\n      address: swapAccounts.authority,\n      isSigner: true,\n    },\n    {\n      address: swapAccounts.rent,\n    },\n    {\n      address: swapAccounts.dexProgram,\n    },\n    {\n      address: outAccount,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.market,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.openOrders,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.requestQueue,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.eventQueue,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.bids,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.asks,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.orderPayerTokenAccount,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.coinVault,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.pcVault,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.vaultSigner,\n    },\n  ];\n  if (referralAccount) {\n    accounts.push({\n      address: referralAccount,\n      isWriteable: true,\n    });\n  }\n  return accounts;\n};\n\nexport async function getVaultOwnerAndNonce(\n  marketPublicKey: PublicKey,\n  dexProgramId: PublicKey\n): Promise<[PublicKey, BN]> {\n  const nonce = new BN(0);\n  while (nonce.toNumber() < 255) {\n    try {\n      const vaultOwner = await PublicKey.createProgramAddress(\n        [marketPublicKey.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)],\n        dexProgramId\n      );\n      return [vaultOwner, nonce];\n    } catch (e) {\n      nonce.iaddn(1);\n    }\n  }\n  throw new Error(\"Unable to find nonce\");\n}\n\nconst getMarketsFromBaseMinttoQuoteMint = async (\n  connection: Connection,\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  serumProgId: PublicKey\n): Promise<PublicKey[]> => {\n  const layout = await Market.getLayout(serumProgId);\n\n  return (\n    await Market.findAccountsByMints(\n      connection,\n      baseMint,\n      quoteMint,\n      serumProgId\n    )\n  ).map((e) => e.publicKey);\n};\n\nconst getAllMarkets = async (conn: Connection, progId: PublicKey) => {\n  Market.findAccountsByMints;\n};\n\nexport const getDemoTokenInfo = async (\n  provider: Provider,\n  fakeUsdc: PublicKey | string,\n  fakeTokA: PublicKey | string\n): Promise<TokenInfo[]> => {\n  const usdcMint = new PublicKey(fakeUsdc);\n  const aMint = new PublicKey(fakeTokA);\n  const usdcInfo = await getMintInfo(provider, usdcMint);\n  const aInfo = await getMintInfo(provider, aMint);\n  if (!usdcInfo || !aInfo) {\n    throw \"Expected info for these mints\";\n  }\n  return [\n    {\n      ...usdcInfo,\n      chainId: -1,\n      name: \"FAKE USDC\",\n      symbol: \"FUSDC\",\n      address: new PublicKey(fakeUsdc).toBase58(),\n    },\n    {\n      ...aInfo,\n      chainId: -1,\n      name: \"FAKE: A TOKEN\",\n      symbol: \"FA TOKEN\",\n      address: new PublicKey(fakeTokA).toBase58(),\n    },\n  ];\n};\n\nexport const getMintInfo = async (\n  provider: Provider,\n  mintAddr: PublicKey\n): Promise<MintInfo | null> => {\n  const account = await provider.connection.getAccountInfo(mintAddr);\n  if (!account) return null;\n  return parseMintAccount(account.data);\n};\n\n/**\n * The file's main export\n */\nexport const SwapAction: ActionLib<BuildIsolatedSwapArgs> = {\n  buildIsolatedAction: buildIsolatedSwapAction,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\nexport default SwapAction;\n","import { ActionLib, BuildIsolatedActionFn, utils } from \"@malloc/sdk\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Provider } from \"../../../../anchor/ts/src\";\n\ntype BuildTransferArgs = {\n  recipientWallet: string;\n};\n\nconst actionTypeUID = \"MALLOC_SPL_TRANSFER\";\n\nconst buildIsolatedTransfer: BuildIsolatedActionFn<BuildTransferArgs> = async (\n  inp: BuildTransferArgs,\n  mintAccount: string,\n  inputTokenAccount: string,\n  transferPID,\n  provider: Provider\n) => {\n  const mintIn = new PublicKey(mintAccount);\n  const { associateTokAccount, instr: createTokInstr } =\n    await utils.tokens.tryCreateAssociatedAccountInst(\n      mintIn,\n      new PublicKey(inp.recipientWallet),\n      provider.connection,\n      provider.wallet.publicKey\n    );\n\n  return {\n    isolatedAction: {\n      addDefaultTokAccounts: true,\n      tokenMintIn: mintIn,\n      actionData: Buffer.from([]),\n      actionProgram: new PublicKey(transferPID),\n      actionAccounts: [\n        {\n          address: associateTokAccount,\n          isWriteable: true,\n        },\n      ],\n      additionalSigners: [],\n      tokenMintOuts: [],\n      tokenAccountOuts: [],\n      instructions: createTokInstr ? [createTokInstr] : undefined,\n    },\n  };\n};\n\nexport const TransferAction: ActionLib<BuildTransferArgs> = {\n  buildIsolatedAction: buildIsolatedTransfer,\n  actionTypeUID,\n  expectedNumberOfOutMints: 0,\n};\n","import { ActionMetadata } from \"./interfaces\";\n\n// TODO: there is a lot of cool stuff to do here\n\ntype ToHitArg = { called: number[] };\n\nexport const buildSeqListOfActionCalls = (\n  actionMetas: ActionMetadata[],\n  initIndices: number[]\n): number[] => {\n  const initHitCounts = [...Array(actionMetas.length)].fill(0);\n  const called = simulateDAG(\n    actionMetas.map((a, i) => {\n      return { ...a, id: i };\n    }),\n    initHitCounts,\n    initIndices\n  );\n\n  return called;\n};\n\n// Returns an ordered list of indices hit\nconst simulateDAG = (\n  actionMetas: (ActionMetadata & { id: number })[],\n  hitCounts: number[],\n  toHit: number[]\n): number[] => {\n  if (toHit.length === 0) return [];\n  const newHitCounts = hitCounts.map((e, i) => getOccurrence(toHit, i) + e)\n  const newRipeActions = actionMetas.filter(\n    (a) => a.ripeAmount === newHitCounts[a.id] && toHit.includes(a.id)\n  );\n  const newToHit = newRipeActions\n    .map((a) => a.nextNodes.map((o) => o.map((i) => i.actionIdx)))\n    .flat()\n    .flat();\n  return [\n    ...newRipeActions.map((a) => a.id),\n    ...simulateDAG(actionMetas, newHitCounts, newToHit),\n  ];\n};\n\nconst getOccurrence = <T>(array: T[], value: T) =>\n  array.filter((v) => v === value).length;\n","import { u64 } from \"@solana/spl-token\";\nimport { LAMPORTS_PER_EPOCH, MS_PER_EPOCH } from \"./constants\";\n\nexport const calculateRent = (size: number, durationMs: number): number => {\n  const rentCost = Math.ceil(LAMPORTS_PER_EPOCH * size * (durationMs / MS_PER_EPOCH));\n\treturn rentCost\n};\n","import MALLOC_IDL from \"./idls/malloc.json\";\nimport * as BufferLayout from \"buffer-layout\";\nimport ACTION_TEMPLATE_IDL from \"./idls/action_template.json\";\nimport { BN, Program, Provider, Wallet, web3 } from \"@project-serum/anchor\";\n// import { BN, Program, Provider, web3 } from \"../../../../../anchor/ts\";\nimport { SendTxRequest } from \"@project-serum/anchor/dist/provider\";\nimport { TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport {\n  Signer,\n  Transaction,\n  PublicKey,\n  Keypair,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport {\n  CONSTRUCTION_ACCOUNT_SIZE,\n  LIFETIME_CONSTRUCTION_ACCOUNT_MS,\n  LIFETIME_RESULT_ACCOUNT_MS,\n} from \"./constants\";\nimport { buildSeqListOfActionCalls } from \"./graph-utils\";\nimport {\n  ActionCtxFinal,\n  Action,\n  ActionMetadata,\n  BNIsh,\n  AccountsArray,\n  PartialNextActionCtx,\n  ProcessActionNext,\n} from \"./interfaces\";\nimport { calculateRent } from \"./solana-utils\";\nimport {\n  AccountByMint,\n  createTokenAccountsForActions,\n  transferToTx,\n} from \"./utils/tokens\";\n\nexport interface SendRequestsOpts {\n  onPrepareAccountsDone?: (txHashes: string[]) => Promise<any>;\n  prepareCommitment?: web3.ConfirmOptions;\n  actionCommitment?: web3.ConfirmOptions;\n}\n\nexport interface ConstructionData {\n  txsPrepare: SendTxRequest[];\n  txsActionCalls: SendTxRequest[];\n  construction: Signer;\n  resultAccounts: Signer[];\n  tokenAccounts: AccountByMint;\n}\n\n/**\n * @param authority - B58 Encoded public key of the authority\n * @param actions.tokenAccount - B58 Encoded public key of the token account\n */\nexport interface ConstructionStateSerialized {\n  construction: {\n    authority: string;\n    actions: (ActionMetadata & { tokenAccount: string })[];\n    actionCalls: { callAmount: string; numbTimesHit: number }[];\n    readyCallIdxList: number[];\n  };\n}\n\nexport interface BuildEphemeralOpts {\n  preferredTokenAccounts?: {\n    [mint: string]: PublicKey;\n  };\n}\n\nexport type BuildEphemeralTxsInstr = {\n  actions: Action[];\n  initialSplits: number[];\n  initialActionIndices: number[];\n  amount: BNIsh;\n  authority?: Signer;\n  amountInAccount: PublicKey;\n  amountInAuthority?: Signer;\n  opts?: BuildEphemeralOpts;\n};\n\nexport class MallocSdk {\n  private readonly mallocProgram: Program;\n\n  constructor(\n    private readonly MALLOC_PROGRAM_ID: PublicKey,\n    private readonly provider: Provider\n  ) {\n    this.mallocProgram = new Program(\n      MALLOC_IDL as any,\n      MALLOC_PROGRAM_ID,\n      provider\n    );\n    // TODO: make new program with idl\n  }\n\n  // TODO: prepare and run should j be one thing\n  // Then, to deal with fact that token accounts can j be created, token creation tx's should j happen immediately preceding the first action to use that token\n\n  // TODO create token accounts and store there associations\n  // Append on \"withdraw\" functionality and tx to transfer initial into account\n  async buildTxs({\n    actions,\n    initialSplits,\n    initialActionIndices,\n    amount,\n    authority: _authority,\n    amountInAccount,\n    amountInAuthority: _inAuth,\n    opts,\n  }: BuildEphemeralTxsInstr): Promise<ConstructionData> {\n    let amountInAuthority = _inAuth || (this.provider.wallet as Wallet);\n    let authority = _authority || (this.provider.wallet as Wallet);\n\n    const { accounts: tokenAccounts, txs: tokenTxs } =\n      // TODO: disable this and then later have an option to reenable\n      await createTokenAccountsForActions(\n        this.provider,\n        authority,\n        actions,\n        this.provider.wallet as Wallet,\n        opts?.preferredTokenAccounts\n      );\n    const { construction, tx: constructionTx } =\n      await createAndInitConstruction(\n        this.mallocProgram,\n        authority.publicKey,\n        actions.length\n      );\n    const addConstructionActionsTx = addActionsToConstruction(\n      this.mallocProgram,\n      construction.publicKey,\n      actions.map((a) => a.actionMetadata),\n      authority\n    );\n\n    if (!checkMintsAreTheSame(initialActionIndices.map((i) => actions[i]))) {\n      throw \"Expected all initial token types to be the same\";\n    }\n\n    if (initialActionIndices.length === 0)\n      throw \"Expected initial actions to have length more than 0\";\n\n    const initMint = actions[initialActionIndices[0]].tokenMintIn;\n\n    const transferTx = await transferToTx(\n      amountInAccount,\n      tokenAccounts[initMint.toBase58()].publicKey,\n      new BN(amount), // Add 1 to ensure the accounts don't go to 0 // TODO: does this make sense\n      amountInAuthority\n    );\n\n    const prepareConstructionTx = prepareConstruction(\n      this.mallocProgram,\n      construction.publicKey,\n      initialActionIndices,\n      initialSplits,\n      authority,\n      new BN(amount)\n    );\n\n    const hitOrder = buildSeqListOfActionCalls(\n      actions.map((a) => a.actionMetadata),\n      initialActionIndices\n    );\n    if (hitOrder.length !== actions.length)\n      throw \"An error occurred trying to forecast your construction\";\n\n    const initResultAccounts = await Promise.all(\n      actions.map((a) =>\n        initResultAccount(\n          new Program(\n            ACTION_TEMPLATE_IDL as any,\n            a.actionProgram,\n            this.provider\n          ),\n          // Set the number of out amounts to equal the amount of next nodes\n          a.actionMetadata.nextNodes.length\n        )\n      )\n    );\n\n    // The additional accounts added onto action action accounts follow conventional malloc standards for token\n    // TODO: have an option to not pass in the token accounts\n    const actionCtxFilled: PartialNextActionCtx[] = actions.map((action, i) => {\n      const toAdd = action.addDefaultTokAccounts\n        ? [\n            {\n              address: tokenAccounts[action.tokenMintIn.toBase58()].publicKey,\n              isWriteable: true,\n              isSigner: false,\n            },\n            {\n              address: TOKEN_PROGRAM_ID,\n              isWriteable: false,\n              isSigner: false,\n            },\n            {\n              address: authority.publicKey,\n              isSigner: true,\n              isWriteable: false,\n            },\n          ]\n        : [];\n\n      return {\n        ctx: {\n          resultAccount: initResultAccounts[i].resultAccount.publicKey,\n          actionProgram: action.actionProgram,\n        },\n        actionAccounts: [...toAdd, ...action.actionAccounts] as AccountsArray,\n      };\n    });\n\n    const processTxs = hitOrder.map((hitIndex) =>\n      processAction(\n        this.mallocProgram,\n        hitIndex,\n        construction.publicKey,\n        actionCtxFilled[hitIndex],\n        authority,\n        {\n          data: actions[hitIndex].actionData,\n          instructions: actions[hitIndex].instructions,\n          additionalSigners: actions[hitIndex].additionalSigners,\n          preActionTxs: actions[hitIndex].preActionTxs,\n        }\n      )\n    );\n\n    const atStartOfPrepareTxs = getAllAtStartOfPrepareTxs(actions);\n    // TODO: optional withdraw to accounts\n\n    const txsPrepare = [\n      ...atStartOfPrepareTxs,\n      ...tokenTxs,\n      transferTx,\n      constructionTx,\n      addConstructionActionsTx,\n      prepareConstructionTx,\n      ...initResultAccounts.map((i) => i.tx),\n    ];\n    const txsActionsCalls = [...processTxs.flat()];\n\n    return {\n      construction,\n      txsPrepare: txsPrepare,\n      txsActionCalls: txsActionsCalls,\n      tokenAccounts,\n      resultAccounts: initResultAccounts.map((a) => a.resultAccount),\n    };\n  }\n\n  async getConstructionState(\n    data: ConstructionData\n  ): Promise<ConstructionStateSerialized> {\n    const constructionState: any =\n      (await this.mallocProgram.account.construction.fetch(\n        data.construction.publicKey\n      )) as any;\n    const actionSerialize = (a: any) => {\n      return {\n        tokenAccount: new PublicKey(a.tokenAccount).toBase58(),\n        ripeAmount: a.ripeAmount,\n        nextNodes: a.nextNodes.map((o) =>\n          o.map((nextNode) => {\n            return {\n              actionIdx: nextNode.actionIdx,\n              fraction: new BN(nextNode.fraction).toString(),\n            };\n          })\n        ),\n      };\n    };\n    const actionCallSerialize = (a: any) => {\n      return {\n        numbTimesHit: a.numbTimesHit,\n        callAmount: new BN(a.callAmount).toString(),\n      };\n    };\n    return {\n      construction: {\n        authority: new PublicKey(constructionState.authority).toBase58(),\n        actions: constructionState.actions.map(actionSerialize),\n        actionCalls: constructionState.actionCalls.map(actionCallSerialize),\n        readyCallIdxList: constructionState.readyCallIdxList,\n      },\n    };\n  }\n\n  // TODO:!\n  async deleteEphemeralAccounts(constructionData: ConstructionData) {\n    const withdrawAllRentInstr = (account: Signer) => {};\n    constructionData.construction;\n  }\n\n  async sendRequests(\n    data: ConstructionData,\n    options?: SendRequestsOpts\n  ): Promise<string[]> {\n    await this.provider;\n    const txHashesPrepare =\n      data.txsPrepare.length > 0\n        ? await this.provider.sendAll(data.txsPrepare, {\n            // skipPreflight: true,\n            ...(options?.prepareCommitment || {}),\n          })\n        : [];\n    if (options?.onPrepareAccountsDone && txHashesPrepare.length > 0)\n      await options.onPrepareAccountsDone(txHashesPrepare);\n    const txHashes = await this.provider.sendAll(data.txsActionCalls, {\n      // skipPreflight: true,\n      ...(options?.actionCommitment || {}),\n    });\n    return [...txHashesPrepare, ...txHashes];\n  }\n}\n\nconst createAndInitConstruction = async (\n  program: Program,\n  authority: PublicKey,\n  numbActions: number\n): Promise<{ construction: Signer; tx: SendTxRequest }> => {\n  const ConstructionAccount = web3.Keypair.generate();\n  const tx = program.transaction.initConstruction(numbActions, {\n    accounts: {\n      construction: ConstructionAccount.publicKey,\n      authority,\n      rent: web3.SYSVAR_RENT_PUBKEY,\n    },\n    signers: [ConstructionAccount],\n    instructions: [\n      await SystemProgram.createAccount({\n        fromPubkey: program.provider.wallet.publicKey,\n        newAccountPubkey: ConstructionAccount.publicKey,\n        space: CONSTRUCTION_ACCOUNT_SIZE + 8,\n        lamports: calculateRent(\n          CONSTRUCTION_ACCOUNT_SIZE + 8,\n          LIFETIME_CONSTRUCTION_ACCOUNT_MS\n        ),\n        programId: program.programId,\n      }),\n      // await program.account.construction.createInstruction,\n    ],\n  });\n\n  return {\n    tx: { tx, signers: [ConstructionAccount] },\n    construction: ConstructionAccount,\n  };\n};\n\nconst addActionsToConstruction = (\n  program: Program,\n  construction: PublicKey,\n  actions: ActionMetadata[],\n  authority: Signer | Wallet\n): SendTxRequest => {\n  const signers = (authority as Signer).secretKey ? [authority as Signer] : [];\n  const actionMetadataWithU64: ActionMetadata[] = actions.map((action) => {\n    return {\n      ripeAmount: action.ripeAmount,\n      nextNodes: action.nextNodes.map((nextNode) =>\n        nextNode.map((n) => {\n          return {\n            actionIdx: n.actionIdx,\n            fraction: new u64(n.fraction),\n          };\n        })\n      ),\n    };\n  });\n  return {\n    tx: program.transaction.addActions(actionMetadataWithU64, {\n      accounts: {\n        authority: authority.publicKey,\n        construction: construction,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers: signers,\n    }),\n    signers,\n  };\n};\n\nconst getAllAtStartOfPrepareTxs = (actions: Action[]) =>\n  actions.map((a) => a.atStartOfPrepareTxs || []).flat();\n\nconst prepareConstruction = (\n  program: Program,\n  construction: PublicKey,\n  initActionIdx: number[],\n  initActionSplits: number[],\n  authority: Signer | Wallet,\n  amount: BN\n): SendTxRequest => {\n  const signers = (authority as Signer).secretKey ? [authority as Signer] : [];\n  return {\n    tx: program.transaction.prepareConstruction(\n      initActionIdx,\n      initActionSplits.map((i) => new BN(i)),\n      amount,\n      {\n        accounts: {\n          authority: authority.publicKey,\n          construction: construction,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers,\n      }\n    ),\n    signers,\n  };\n};\n\n/**\n * @param tokenAuthority - defaults to the authority if not provided\n */\nconst processAction = (\n  program: Program,\n  actionIdx: number,\n  construction: PublicKey,\n  actionAccountsCtx: PartialNextActionCtx,\n  authority: Signer | Wallet,\n  opts: {\n    data?: Buffer;\n    tokenAuthority?: Signer | Wallet;\n    instructions?: TransactionInstruction[];\n    additionalSigners?: Signer[];\n    preActionTxs?: SendTxRequest[];\n  }\n): SendTxRequest[] => {\n  const auth = (authority as Signer)?.secretKey ? [authority as Signer] : [];\n  const tokauth = (opts.tokenAuthority as Signer)?.secretKey\n    ? [opts.tokenAuthority as Signer]\n    : [];\n  const signersIsolated = opts.tokenAuthority\n    ? [...tokauth, ...auth]\n    : [...auth];\n  const signers = [...signersIsolated, ...(opts.additionalSigners || [])];\n  return [\n    ...(opts.preActionTxs || []),\n    {\n      tx: program.transaction.processAction(\n        actionIdx,\n        opts.data || Buffer.from([]),\n        {\n          accounts: {\n            construction: construction,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n            authority: authority.publicKey,\n            actionCtxProxy: actionAccountsCtx.ctx,\n            actionAccounts: actionAccountsCtx.actionAccounts,\n          } as ProcessActionNext,\n          signers,\n          instructions: opts.instructions || undefined,\n        }\n      ),\n      signers,\n    },\n  ];\n};\n\nconst initResultAccount = async (\n  actionTemplateProgram: Program,\n  numberOfPossibleOutputTokens: number\n): Promise<{ tx: SendTxRequest; resultAccount: Signer }> => {\n  const result = Keypair.generate();\n  actionTemplateProgram.provider.connection.getMinimumBalanceForRentExemption;\n  const resultSize = calcSizeResultAccount(numberOfPossibleOutputTokens);\n  const tx = actionTemplateProgram.transaction.initResultAccount(\n    numberOfPossibleOutputTokens,\n    {\n      accounts: {\n        result: result.publicKey,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        await SystemProgram.createAccount({\n          fromPubkey: actionTemplateProgram.provider.wallet.publicKey,\n          newAccountPubkey: result.publicKey,\n          space: resultSize,\n          lamports: calculateRent(resultSize, LIFETIME_RESULT_ACCOUNT_MS),\n          programId: actionTemplateProgram.programId,\n        }),\n      ],\n      signers: [result],\n    }\n  );\n  return {\n    tx: { tx, signers: [result] },\n    resultAccount: result,\n  };\n};\n\n// From https://github.com/solana-labs/solana-program-library/blob/30406eea40671afefa18b5ae6c9b37ffcb6235d0/token/js/client/token.js#L1850\n/**\n * Construct a Close instruction\n *\n * @param programId SPL Token program account\n * @param account Account to close\n * @param dest Account to receive the remaining balance of the closed account\n * @param authority Account Close authority\n * @param multiSigners Signing accounts if `owner` is a multiSig\n */\nconst createCloseAccountInstruction = (\n  programId: PublicKey,\n  account: PublicKey,\n  dest: PublicKey,\n  owner: PublicKey\n): TransactionInstruction => {\n  throw \"TODO\";\n};\n\n// 8 for the discriminator, 32 for the owner pubkey, 4 for the number of results, and the rest for numb actions, then 64 as a buffer\nconst calcSizeResultAccount = (numberOfActions: number) =>\n  8 + 32 + 4 + numberOfActions * 8 + 64;\n\nconst checkMintsAreTheSame = (actions: Action[]) => {\n  if (actions.length === 0) return true;\n  const mint = actions[0].tokenMintIn.toBase58();\n  return actions.every((a) => a.tokenMintIn.toBase58() === mint);\n};\n","export * from \"./contexts\";\nexport * from \"./common\";\n","export const getConstants = () => {\n  const env = process.env.REACT_APP_SOLANA_NETWORK;\n  switch (env) {\n    case \"devnet\":\n      return {\n        MALLOC_PROGRAM_ID: \"9i4MAnhYagLr1vEo5jdmLehRe8Sm5Lx8fHaQNJfbFCve\",\n        mallocSpl: {\n          TRANSFER_PROGRAM_ID: \"ETpyJNQLorJbAcrPQpM9bkYxYMakegBh93kqZ1KnTBjr\",\n          SWAP_PROGRAM_ID: \"7T6seoCvCQeUeSTf2EAwX5SnyrZvX7BFUMHi74ZodBKH\",\n          DUMMY_PASS_THROUGH: \"DBhGd4VREBAw14vV1yaLXfCTtanPBwQfEErg1fe27diJ\",\n          MINT_TO: \"77WQMNHSBe6BNdMY8R1FD4JX89o2fXr5FhKNerTcJsHJ\",\n        },\n        projectSerum: {\n          DEX_PROGRAM_ID: \"DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY\",\n        },\n        demo: {\n          FAKE_USDC: \"AkzN2jJrorpUY2ApfL2UsBeTfuv1XHFKGLQurZJg6BhN\",\n          FAKE_USDC_GD: \"2BB7fDrLgBNSMCLqD835GisCHrHrGHsS8SJr6brtnWk2\",\n          FAKE_TOKEN_A: \"9GmQdigrAFdX67EMrVFwMepEN8rEdMdp8CPUEPJRY8sj\",\n        },\n        INITIAL_SPLITTER_ID_UUID: \"initial\",\n        solana: {\n          RPC: \"https://explorer-api.devnet.solana.com\",\n          NETWORK: env,\n        },\n      };\n\n    default:\n      throw \"Unexpected env\";\n  }\n  throw \"Unexpected env\";\n};\n","// TODO: there is probably a faster way to do this\nexport const deepCloneObject = (obj: any): any => {\n  if (obj === null || typeof obj !== \"object\" || \"isActiveClone\" in obj)\n    return obj;\n\n  // @ts-ignore\n  if (obj instanceof Date) var temp = new obj.constructor();\n  //or new Date(obj);\n  else var temp = obj.constructor();\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      obj[\"isActiveClone\"] = null;\n      temp[key] = deepCloneObject(obj[key]);\n      delete obj[\"isActiveClone\"];\n    }\n  }\n  return temp;\n};\n","import { Provider } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport {\n  Action,\n  ActionMetadata,\n  BuildActionMap,\n  Construction,\n  NextNode,\n  NonUserSpecificConstruction,\n} from \"..\";\nimport { buildSeqListOfActionCalls } from \"../graph-utils\";\nimport { deepCloneObject } from \"../utils/object\";\nimport {\n  getTokenAccountUsedByMalloc,\n  PreferredTokenAccounts,\n} from \"../utils/tokens\";\n\nconst getPreviousActions = (\n  actionIdx: number,\n  actions: (Action | undefined)[]\n): { idx: number; idxInNextNodes: [number, number] }[] => {\n  // First add indices to each action\n  // Then remove the undefined actions\n  // Then search if the action has the actionIdx\n  return actions\n    .map((a, i) => {\n      return a ? { ...a, idx: i } : a;\n    })\n    .filter((a) => !!a)\n    .map((a: Action & { idx: number }) => {\n      const idxInNextNodes: [number, number] = [-1, -1];\n      // TODO: note this assumes that each action is only called once from a prior\n      for (let i = 0; i < a.actionMetadata.nextNodes.length; i++) {\n        idxInNextNodes[1] = a.actionMetadata.nextNodes[i]\n          .map((item) => item.actionIdx)\n          .indexOf(actionIdx);\n        if (idxInNextNodes[1] !== -1) {\n          idxInNextNodes[0] = i;\n          break;\n        }\n      }\n      if (idxInNextNodes[0] === -1 || idxInNextNodes[1] === -1)\n        return undefined;\n      return {\n        idx: a.idx,\n        idxInNextNodes,\n      };\n    })\n    .filter((i) => !!i);\n};\n\n/**\n * Get the mint from prior actions\n *\n * This assumes that the action given is not an initial action\n */\nconst getMintAccountFromPriorActions = (\n  actionIdx: number,\n  actions: (Action | undefined)[]\n): string => {\n  const previousActions = getPreviousActions(actionIdx, actions);\n  const mints = previousActions.map((prev) => {\n    const action = actions[prev.idx] as Action; // assume its not undefined because getPreviousAction ensures its not undefined\n    const mint = action.tokenMintOuts[prev.idxInNextNodes[0]];\n    return mint.toBase58();\n  });\n  if (mints.length < 1)\n    throw `Expected to find a previous action for a non initial action`;\n  const firstMint = mints[0];\n  if (!mints.every((mint) => mint === firstMint))\n    throw `Expected all previous mints to be the same for the action`;\n  return firstMint;\n};\n\nexport const buildConstructionFromNonUserSpecific = async (\n  construction: NonUserSpecificConstruction,\n  buildActionMap: BuildActionMap,\n  initTokenAccount: string,\n  initMintAccount: string,\n  provider: Provider,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<Construction> => {\n  const orderActionsHit = buildSeqListOfActionCalls(\n    construction.actionDatas.map((a) => a.actionMetadata),\n    construction.initialActionIndices\n  );\n\n  if (orderActionsHit.length !== construction.actionDatas.length)\n    throw `An unexpected error occurred, the order of actions hit should match the length of actions`;\n\n  const actions: (Action | undefined)[] = [\n    ...Array(construction.actionDatas.length),\n  ];\n  for (let i = 0; i < orderActionsHit.length; i++) {\n    const actionIdx = orderActionsHit[orderActionsHit[i]];\n    const mintAccount = construction.initialActionIndices.includes(actionIdx)\n      ? initMintAccount\n      : getMintAccountFromPriorActions(actionIdx, actions);\n    const actionData = construction.actionDatas[actionIdx];\n    const buildFN = buildActionMap[actionData.actionTypeUID].buildIsolatedAction;\n    if (!buildFN)\n      throw `Could not find a builder function for action with UID ${actionData.actionTypeUID}`;\n    const tokenAccount = construction.initialActionIndices.includes(i)\n      ? initTokenAccount\n      : (\n          await getTokenAccountUsedByMalloc(\n            provider.wallet.publicKey,\n            new PublicKey(mintAccount),\n            preferredTokenAccounts\n          )\n        ).toBase58();\n    const { isolatedAction } = await buildFN(\n      actionData.buildActionInputs,\n      mintAccount,\n      tokenAccount,\n      actionData.actionPID,\n      provider,\n      {\n        preferredTokenAccounts,\n      }\n    );\n    const action = {\n      ...isolatedAction,\n      actionMetadata: actionData.actionMetadata,\n    };\n    actions[actionIdx] = action;\n  }\n\n  return {\n    actions,\n    initialActionIndices: construction.initialActionIndices,\n    initialSplits: construction.initialSplits,\n    amount: new BN(construction.amount),\n  };\n};\n\nconst offsetNextNodes = (\n  nextNodes: ActionMetadata[\"nextNodes\"],\n  offset: number\n): ActionMetadata[\"nextNodes\"] =>\n  nextNodes.map((nextNodeSet) =>\n    nextNodeSet.map((n) => {\n      return {\n        actionIdx: n.actionIdx + offset,\n        fraction: n.fraction,\n      } as NextNode;\n    })\n  );\n\n/**\n * Merge two constructions into 1. One is the parent and keeps its initial indices and amounts,\n * the other discards the amount value and initial indices/ splits and replaces them with the specified inputs\n *\n * @param appendChildInitToParent - where to append the initial action indices of the child construction\n * to the parent.\n */\nexport const mergeConstructions = (\n  parentConstruction: NonUserSpecificConstruction,\n  childConstruction: NonUserSpecificConstruction,\n  appendChildInitToParent: {\n    appendToInitial?: boolean;\n    indexInParent?: {\n      actionIdx: number;\n      nextNodeIdx: number;\n    };\n    splitFrac: number | string;\n  }[]\n): NonUserSpecificConstruction => {\n  // deep copy the child and parent\n  const childConstructionCloned = deepCloneObject(childConstruction);\n  const parentConstructionClone = deepCloneObject(parentConstruction);\n\n  if (\n    appendChildInitToParent.length! ==\n      childConstructionCloned.initialActionIndices.length &&\n    appendChildInitToParent.length !==\n      childConstructionCloned.initialSplits.length\n  ) {\n    throw `Expected the info to append the child to the parent to provide the same number of indices as the number of initial splits in the child`;\n  }\n  const newActionDatasArray = [\n    ...parentConstructionClone.actionDatas,\n    ...childConstructionCloned.actionDatas.map((a) => {\n      return {\n        ...a,\n        actionMetadata: {\n          ...a.actionMetadata,\n          nextNodes: offsetNextNodes(\n            a.actionMetadata.nextNodes,\n            parentConstructionClone.actionDatas.length\n          ),\n        },\n      };\n    }),\n  ];\n\n  const childInitialActionsToAdd = [];\n  for (let i = 0; i < appendChildInitToParent.length; i++) {\n    if (appendChildInitToParent[i].appendToInitial) {\n      childInitialActionsToAdd.push({\n        idx: i + parentConstructionClone.actionDatas.length,\n        fraction: appendChildInitToParent[i].splitFrac,\n      });\n    } else if (appendChildInitToParent[i].indexInParent) {\n      newActionDatasArray[\n        appendChildInitToParent[i].indexInParent.actionIdx\n      ].actionMetadata.nextNodes[\n        appendChildInitToParent[i].indexInParent.nextNodeIdx\n      ].push({\n        fraction: appendChildInitToParent[i].splitFrac,\n        actionIdx: i + parentConstructionClone.actionDatas.length,\n      });\n    } else {\n      throw `Expected the appendChildInitToParent to either append to initial or contain info as to where to append in the parent`;\n    }\n  }\n\n  const newInitialActionIndices = [\n    ...parentConstructionClone.initialActionIndices,\n    ...childInitialActionsToAdd.map((c) => c.idx),\n  ];\n  const newIninitialSplits = [\n    ...parentConstructionClone.initialSplits,\n    ...childInitialActionsToAdd.map((c) => c.fraction),\n  ];\n  return {\n    actionDatas: newActionDatasArray,\n    initialActionIndices: newInitialActionIndices,\n    initialSplits: newIninitialSplits,\n    amount: parentConstructionClone.amount,\n  };\n};\n"],"sourceRoot":""}