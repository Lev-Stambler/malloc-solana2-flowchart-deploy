{"version":3,"sources":["components/node-selector.tsx","components/flow-controls.tsx","state/flowchart-store.ts","utils/raydium.ts","utils/spl-tokens.ts","components/tokens/TokenLine.tsx","components/tokens/TokenAccountChooser.tsx","components/node-infos/raydium-swap.tsx","components/node-infos/transfer.tsx","components/loaders/ProgressBar.tsx","components/input-slider.tsx","components/node-infos/source-node-info.tsx","components/node-infos/raydium-lp-deposit.tsx","components/node-infos/node-info.tsx","components/estimates-panel.tsx","components/tablegui.tsx","utils/anchor.ts","Home.tsx","components/error-snackbar.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/p5-classes.ts","components/graph-visualizer.tsx","utils/malloc.ts","utils/files.ts","default-flow.ts","globalStore.ts","utils/localStorage.ts","components/colors.ts","config/constants.ts"],"names":["NodeSelector","state","useStore","globalStore","className","onChange","e","context","selectedActionType","parseInt","target","value","setState","Object","keys","splConstants","BUILD_ACTION_UIDS","map","action","index","FlowControls","error","errorStore","wallet","useAnchorWallet","useState","loadingCompileAndRun","setLoadingCompileAndRun","rerunningFromFailed","setRerunningFromFailed","loadingBuild","setLoadingBuild","runFlowWrapper","rerunFromFailed","loadingFn","malloc","rerunFromAction","failedAction","undefined","console","log","runFlow","alert","style","display","justifyContent","gap","onClick","setGlobalStoreFromFile","downloadGlobalStore","tryPartialBuild","finally","disabled","solanaConstantsStore","Store","derivedTokenAccounts","tokenList","raydium","liquidityPools","getAllRaydiumPools","a","getCached","splUtils","getMainnetRaydiumPools","pools","usedMints","getAllMints","TokenListProvider","resolve","Strategy","Solana","tokens","filterByClusterSlug","getConstants","solana","NETWORK","getList","getMint","mint","infos","find","tok","address","toString","TokenLine","props","_tok","setTok","useEffect","then","chainId","name","decimals","symbol","cursor","logoURI","src","height","amount","utils","toReadableNumber","BN","StyledModal","styled","ModalUnstyled","Backdrop","width","bgcolor","border","p","px","pb","TokenAccountChooser","React","open","setOpen","type","buttonText","onClose","BackdropComponent","Box","sx","id","includedMints","onSelect","TokenDropDown","inputValue","setInputValue","label","setLabel","options","setOptions","token","toks","opts","tokList","toFilterBy","filter","t","includes","getOptions","Autocomplete","event","newValue","onInputChange","newInputValue","getOptionLabel","isOptionEqualToValue","opt","val","backgroundColor","renderOption","params","renderInput","TextField","RaydiumSwapNodeInfo","setIncludedMints","getPossibleOutMintsForInMint","_inpMint","lps","inpMint","PublicKey","lp","baseMint","equals","quoteMint","toBase58","inputMint","mints","input","outMint","updateInput","TransferNodeInfo","err","setError","setVal","recipientWallet","DARK_3","InputProps","color","LIGHT_1","onBlur","ProgressBar","progressBarState","setProgress","timer","setInterval","oldProgress","diff","Math","random","min","clearInterval","LinearProgress","variant","max","InputField","MuiInput","InputSlider","edgeObject","nodes","selectedNodeId","outEdges","outEdgeId","nextActions","setValue","onMouseOver","highlighted","onMouseOut","alignItems","gridTemplateColumns","size","Number","updateNextActions","inputProps","step","getNextActionGroupTotal","_e","node1","node2","mintIdx","selectedOutMintIndex","isSource","construction","source","actionDatas","group","reduce","prev","curr","InputGroup","SourceNodeInfo","inputMints","length","m","updateSource","RaydiumLPDepositInfo","FormGroup","FormControlLabel","control","Checkbox","defaultChecked","hasFarm","checked","actionType","SOURCE_NAME","TRANSFER","RAYDIUM_LP_STAKE","RAYDIUM_LP_DEPOSIT","RAYDIUM_SWAP","inMints","SOLEND_LP_DEPOSIT","NodeInfo","NSPConstructionNode","actionInputs","selectedAction","actionTypeUID","inputs","MallocSPLBuildActionMap","expectedNumberOutMints","newMints","inp","InputComponent","getNextActionGroup","node_id","node","mintActions","EstimateLines","amounts","i","isVis","estimates","EstimatesPanel","inEstimates","outEstimates","TableGUI","padding","loading","progress","getProvider","Provider","Connection","RPC","ConnectButton","WalletDialogButton","Home","span","balance","setBalance","message","severity","alertState","setAlertState","useWallet","anchorWallet","setMallocSdk","MallocSdk","constants","PIDS","mainnet","MALLOC","publicKey","connection","getBalance","formatted","parseFloat","toFixed","connected","marginTop","shortenAddress","toLocaleString","href","Snackbar","autoHideDuration","Alert","ErrorSnackbar","changeToggle","handleClose","reason","IconButton","fontSize","rpcHost","anchor","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","inferContextFromConstruction","autoConnect","txTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","vectorAdd","b","vectorSub","vectorScale","s","vectorMag","sqrt","dist","x1","y1","x2","y2","Node","pos","selected","vel","acc","r","r2","r3","hover","hover2","successfullyRan","failedRunning","this","x","y","dir","d","force","p5","noStroke","fill","circle","stroke","GREEN_1","strokeWeight","noFill","RED_FAIL","DARK_2","LIGHT_2","textSize","text","textWidth","GREEN_1_transparent","mouseIsPressed","Edge","weight","arrowSize","base","vec","push","translate","line","rotate","atan2","triangle","pop","drawArrow","dummyState","initialized","scale","activeEdge","SOURCE","randomPos","xMin","yMin","xMax","yMax","round","saveContext","entries","savedContext","sourceActions","sourceNode","action_id","edge","nextAction_id","node_pos","updateSelection","selected_id","GraphVisualizer","edgeStart","edgeEnd","nodeDragged","edgeDragged","coordMap","setup","canvasParentRef","lazyFillNextMints","currentNextAction","container","createCanvas","clientWidth","parent","mouseClicked","doubleClicked","newActionType","values","result","characters","charactersLength","charAt","floor","makeid","mouseX","mouseY","newAction","actionPID","MAINNET","CPI_ACTION","mousePressed","mouseReleased","newEdge","current_node","outMintIdx","mouseMoved","updateHover","mouseWheel","deltaX","deltaY","draw","background","rect","createVector","buildConstructionAndFill","buildWithFill","ret","filledNonSpecific","MallocErrorTypes","MALLOC_ACTION_BUILDER","filled","filledNonSpecificConstruction","setMallocError","currErrorState","actionName","mallocErrorMarker","MALLOC_RUNNER","chars","slice","getRunOpts","onTxDone","total","actionNames","actionSuccess","retryTxOnTimeout","customTxTimeoutMs","commitment","skipPreflight","setLoading","initialMints","Promise","all","getTokenAccountUsedByMalloc","initTokenAccounts","constrSigner","getConstructionSignerFromStorage","build","cleanupAtEnd","built","compileConstruction","actionMap","amountInAccounts","constructionAccount","compiledInst","runConstructionFromAction","saveConstructionSigner","constructionSigner","runConstruction","saveStringToFile","data","filename","JSON","stringify","blob","Blob","createEvent","createElement","download","window","URL","createObjectURL","dataset","downloadurl","join","initMouseEvent","dispatchEvent","getFileContent","fileDialog","accept","default_flow","swapToUsdc","lpDepositUsdcRay","farmUsdcRay","swapToRay","lpDepositSolRay","farmSolRay","So11111111111111111111111111111111111111112","initState","fileContents","parsed","parse","file","on","StoreEventType","Update","info","Date","CONSTRUCTION_KEY","localStorage","setItem","secretKey","k","getItem","arr","sk","Uint8Array","Keypair","fromSecretKey","getComputedStyle","body","getPropertyValue","env","MALLOC_PROGRAM_ID","mallocSpl","TRANSFER_PROGRAM_ID","SWAP_PROGRAM_ID","DUMMY_PASS_THROUGH","MINT_TO","SOLEND_ACTION","projectSerum","DEX_PROGRAM_ID","demo","FAKE_USDC","FAKE_USDC_GD","FAKE_TOKEN_A","INITIAL_SPLITTER_ID_UUID"],"mappings":"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","file":"static/js/main.dcffc74e.chunk.js","sourcesContent":["import React, { useState, FC } from \"react\";\n\nimport { splConstants } from \"@malloc-protocol/spl\";\nimport { useStore } from \"react-stores\";\nimport { globalStore } from \"../globalStore\";\nimport { fontFamily } from \"@mui/system\";\n\nconst NodeSelector: FC = () => {\n  const state = useStore(globalStore);\n\n  return (\n    <div>\n      <select\n        className=\"form-select\"\n        aria-label=\"Default select example\"\n        onChange={(e) => {\n          state.context.selectedActionType = parseInt(e.target.value);\n          globalStore.setState({ ...state });\n        }}\n      >\n        {Object.keys(splConstants.BUILD_ACTION_UIDS).map((action, index) => {\n          return <option value={index}>{action}</option>;\n        })}\n      </select>\n      <span className=\"fine-print\">\n        double click to create a new{\" \"}\n        {\n          Object.keys(splConstants.BUILD_ACTION_UIDS)[\n            state.context.selectedActionType\n          ]\n        }{\" \"}\n        action\n      </span>\n    </div>\n  );\n};\n\nexport default NodeSelector;\n","import React, { useState, FC } from \"react\";\n\nimport { useStore } from \"react-stores\";\nimport {\n  downloadGlobalStore,\n  errorStore,\n  globalStore,\n  setGlobalStoreFromFile,\n} from \"../globalStore\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport NodeSelector from \"./node-selector\";\nimport { runFlow, setMallocError, tryPartialBuild } from \"../utils/malloc\";\n\nconst FlowControls: FC = () => {\n  const state = useStore(globalStore);\n  const error = useStore(errorStore);\n  const wallet = useAnchorWallet();\n\n  // Control panel loaders\n  const [loadingCompileAndRun, setLoadingCompileAndRun] = useState(false);\n  const [rerunningFromFailed, setRerunningFromFailed] = useState(false);\n  const [loadingBuild, setLoadingBuild] = useState(false);\n  // End control panel loaders\n  const runFlowWrapper = (\n    rerunFromFailed: boolean,\n    loadingFn: (v: boolean) => void\n  ) => {\n    if (!state.malloc || !wallet) {\n      alert(\"Please connect your wallet before running a flow\");\n      return;\n    }\n    const rerunFromAction = rerunFromFailed\n      ? error.failedAction\n      : undefined;\n    if (rerunningFromFailed && !rerunFromAction) {\n      alert(\n        \"You can only rerun from a failure if a previous failure has occurred\"\n      );\n      return;\n    }\n    console.log(rerunFromAction)\n    runFlow(state, wallet, loadingFn, rerunFromAction);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <div style={{ display: \"flex\", justifyContent: \"left\", gap: \"1rem\" }}>\n        <NodeSelector />\n      </div>\n      <div style={{ display: \"flex\", justifyContent: \"right\", gap: \"1rem\" }}>\n        <button className=\"controls\" onClick={() => setGlobalStoreFromFile()}>\n          Import\n        </button>\n        <button className=\"controls\" onClick={() => downloadGlobalStore()}>\n          Export\n        </button>\n        <button\n          className=\"controls\"\n          onClick={() => {\n            setLoadingBuild(true);\n            tryPartialBuild(state).finally(() => setLoadingBuild(false));\n          }}\n          disabled={loadingBuild}\n        >\n          {loadingBuild ? \"Building...\" : \"Build\"}\n        </button>\n        <button\n          className=\"controls\"\n          disabled={loadingCompileAndRun}\n          onClick={() => runFlowWrapper(false, setLoadingCompileAndRun)}\n        >\n          {loadingCompileAndRun ? \"Running...\" : \"Build and Run\"}\n        </button>\n\n        {error.failedAction && (\n          <button\n            className=\"controls\"\n            disabled={loadingCompileAndRun}\n            onClick={() => runFlowWrapper(true, setRerunningFromFailed)}\n          >\n            {rerunningFromFailed ? \"Rerunning...\" : \"Rerun failed\"}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FlowControls;\n","import { Elements, FlowElement } from \"react-flow-renderer\";\nimport { Store } from \"react-stores\";\nimport { SPLToken } from \"../interfaces\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey, Signer } from \"@solana/web3.js\";\nimport { u64 } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { utils as splUtils } from \"@malloc-protocol/spl\";\nimport { Awaited, Unpacked } from \"../utils/types\";\n\nexport type RaydiumLiquidityPool = Unpacked<\n  Awaited<ReturnType<typeof splUtils.raydium.getMainnetRaydiumPools>>\n>;\n\nexport interface IFlowChart {\n  elements: Elements<any>;\n  initSplits: number[];\n  initTokenAccount?: PublicKey;\n  initAmount: u64;\n}\n\nexport interface SolanaConstants {\n  derivedTokenAccounts: SPLToken[] | null;\n  tokenList: TokenInfo[] | null;\n  raydium: {\n    liquidityPools: RaydiumLiquidityPool[] | null;\n  };\n}\n\nexport const solanaConstantsStore = new Store<SolanaConstants>({\n  derivedTokenAccounts: null,\n  tokenList: null,\n  raydium: { liquidityPools: null },\n});\n","import {\n  RaydiumLiquidityPool,\n  solanaConstantsStore,\n} from \"../state/flowchart-store\";\nimport { utils as splUtils } from \"@malloc-protocol/spl\";\n\nexport const getAllRaydiumPools = async (): Promise<RaydiumLiquidityPool[]> => {\n  const getCached = async () => {\n    if (solanaConstantsStore.state.raydium.liquidityPools)\n      return solanaConstantsStore.state.raydium.liquidityPools;\n    const pools = await splUtils.raydium.getMainnetRaydiumPools();\n\n    solanaConstantsStore.setState({\n      ...solanaConstantsStore.state,\n      raydium: {\n        ...solanaConstantsStore.state.raydium,\n        liquidityPools: pools,\n      },\n    });\n    return pools;\n  };\n  const pools = await getCached();\n  return pools;\n};\n","import { getProvider, Provider } from \"@malloc-protocol/anchor\";\nimport { parseTokenAccount, parseMintAccount } from \"@project-serum/common\";\nimport {\n  AccountInfo,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  MintInfo,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport {\n  TokenListProvider,\n  TokenInfo,\n  TokenListContainer,\n  Strategy,\n} from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { solanaConstantsStore } from \"../state/flowchart-store\";\nimport { getConstants } from \"../config/constants\";\n\nexport const usedMints = [\n  \"So11111111111111111111111111111111111111112\",\n  \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\",\n  \"2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk\",\n  \"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\",\n  \"BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\",\n  \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n  \"BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW\",\n  \"3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB\",\n  \"CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG\",\n  \"Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8\",\n  \"AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy\",\n  \"CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K\",\n  \"SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX\",\n  \"BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN\",\n  \"5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv\",\n  \"DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw\",\n  \"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\",\n  \"AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3\",\n  \"MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L\",\n  \"GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd\",\n  \"EcqExpGNFBve2i1cMJUTR4bPXj4ZoqmDD2rTkeCcaTFX\",\n  \"EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX\",\n  \"GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza\",\n  \"GUohe4DJUA5FKPWo3joiPgsB7yzer7LpDmt1Vhzy3Zht\",\n  \"9F9fNTT6qwjsu4X4yWYKZpsbw5qT7o6yR2i57JF2jagy\",\n  \"EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp\",\n  \"kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6\",\n  \"MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb\",\n  \"z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M\",\n  \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n  \"3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE\",\n  \"8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh\",\n  \"StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT\",\n  \"ETAtLmCmsoiEEKfNrHKJ2kYy3MoABhU6NQvpSfij5tDs\",\n  \"8PMHT4swUMtBzgHnh5U564N5sjPSiUz2cjEQzFnnP1Fo\",\n  \"MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K\",\n  \"TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs\",\n  \"4dmKkXNHdgYsXqBHCuMikNQWwVomZURhYvkkX5c4pQ7y\",\n  \"SLRSSpSLUTP7okbCUBYStWCo1vUgyt775faPqz8HUMr\",\n  \"E5rk3nmgLUuKUiS94gg4bpWwWwyjCMtddsAXkTFLtHEy\",\n  \"BLwTnYKqf7u4qjgZrrsKeNs2EzWkMLqVCu6j8iHyrNA3\",\n  \"7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU\",\n  \"CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5\",\n  \"ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU\",\n  \"3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR\",\n  \"GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z\",\n  \"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\",\n  \"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\",\n  \"PoRTjZMPXb9T7dyU7tpLEZRQj7e6ssfAE62j2oQuc6y\",\n  \"MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac\",\n  \"DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz\",\n  \"ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx\",\n  \"poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk\",\n  \"8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA\",\n  \"3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc\",\n  \"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\",\n  \"Lrxqnh6ZHKbGy3dcrCED43nsoLkM1LTzU2jRfWe8qUC\",\n  \"E5ndSkaB17Dm7CsD22dvcjfrYSDLCxFcMd6z8ddCk5wp\",\n  \"51tMb3zBKDiQhNwGqpgwbavaGH54mk8fXFzxTc1xnasg\",\n  \"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\",\n  \"4wjPQJ6PrkC4dHhYghwJzGBVP78DkBzA2U3kHoFNBuhj\",\n  \"5tN42n9vMi6ubp67Uy4NnmM5DMZYN8aS8GeB3bEDHr6E\",\n  \"HZRCwxP2Vq9PCpPXooayhJ2bxTpo5xfpQrwB1svh332p\",\n  \"xxxxa1sKNGwFtw2kFn8XauW9xq8hBZ5kVtcSesTT9fW\",\n  \"PRT88RkA4Kg5z7pKnezeNH4mafTvtQdfFgpQTGRjz44\",\n  \"Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1\",\n  \"EdAhkbj5nF9sRM7XN7ewuW8C9XEUMs8P7cnoQ57SYE96\",\n  \"a11bdAAuV8iB2fu7X6AxAvDTo1QZ8FXB3kk5eecdasp\",\n  \"iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a\",\n  \"BRLsMczKuaR5w9vSubF4j8HwEGGprVAyyVgS4EX7DKEg\",\n  \"ErGB9xa24Szxbk1M28u2Tx8rKPqzL6BroNkkzk5rG4zj\",\n  \"AURYydfxJib1ZkTir1Jn1J9ECYUtjb6rKQVmtYaixWPP\",\n  \"FnKE9n6aGjQoNWRBZXy4RW6LZVao7qwBonUbiD7edUmZ\",\n  \"9nEqaUcb16sQ3Tn1psbkWqyhPdLmfHWjKGymREjsAgTE\",\n  \"orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE\",\n  \"SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp\",\n  \"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\",\n  \"8FU95xFJhUUkyyCLU13HSzDLs7oC4QZdXQHL6SCeab36\",\n  \"ChVzxWRmrTeSgwd3Ui3UumcN8KX7VK3WaD4KGeSKpypj\",\n  \"GFX1ZjR2P15tmrSwow6FjyDYcEkoFb4p4gJCpLBjaxHD\",\n  \"inL8PMVd6iiW3RCBJnr5AsrRN6nqr4BTrcNuQWQSkvY\",\n  \"4Hx6Bj56eGyw8EJrrheM6LBQAvVYRikYCWsALeTrwyRU\",\n  \"HCgybxq5Upy8Mccihrp7EsmwwFqYZtrHrsmsKwtGXLgW\",\n  \"HysWcbHiYY9888pHbaqhwLYZQeZrcQMXKQWRqS7zcPK5\",\n  \"CiKu4eHsVrc1eueVQeHn7qhXTcVu95gSQmBpX4utjL9z\",\n];\n\nexport const getAllMints = async (): Promise<TokenInfo[]> => {\n  const getCached = async () => {\n    if (solanaConstantsStore.state.tokenList)\n      return solanaConstantsStore.state.tokenList;\n    const tokens = await new TokenListProvider().resolve(Strategy.Solana);\n    const tokenList = tokens\n      .filterByClusterSlug(getConstants().solana.NETWORK)\n      .getList();\n    solanaConstantsStore.setState({\n      ...solanaConstantsStore.state,\n      tokenList,\n    });\n    return tokenList;\n  };\n  const tokenList = await getCached();\n  return tokenList;\n};\n\nexport const getMint = async (\n  mint: string | PublicKey\n): Promise<TokenInfo | undefined> => {\n  const infos = await getAllMints();\n  return infos.find((tok) => tok.address === mint.toString());\n};\n\n// // TODO: have a store for token metadata which has a list of all tokens as well as their metadata\n\n// // See https://github.com/solana-labs/token-list\n// export const getTokenLists = async (\n//   provider: Provider\n// ): Promise<TokenInfo[]> => {\n// const getCached = async () => {\n//   if (solanaSplStore.state.tokenList) return solanaSplStore.state.tokenList;\n//   const tokens = await new TokenListProvider().resolve();\n//   const tokenList = tokens\n//     .filterByClusterSlug(getConstants().solana.NETWORK)\n//     .getList();\n//   solanaSplStore.setState({\n//     ...solanaSplStore.state,\n//     tokenList,\n//   });\n//   return tokenList;\n// };\n// const tokenList = await getCached();\n\n// // Add in demo tokens\n// return tokenList;\n// };\n\n// export const getTokenListContainer = async (\n//   provider: Provider\n// ): Promise<TokenListContainer> =>\n//   new TokenListContainer(await getTokenLists(provider));\n\n// // See https://spl.solana.com/associated-token-account\n// export const findAssociatedTokenAddress = async (\n//   walletAddress: PublicKey,\n//   tokenMintAddress: PublicKey | string\n// ): Promise<PublicKey> => {\n//   const associated = await PublicKey.findProgramAddress(\n//     [\n//       walletAddress.toBuffer(),\n//       TOKEN_PROGRAM_ID.toBuffer(),\n//       new PublicKey(tokenMintAddress).toBuffer(),\n//     ],\n//     SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n//   );\n//   return associated[0];\n// };\n// export const findAllAssociatedTokenAddress = async (\n//   walletAddress: PublicKey,\n//   mints: (PublicKey | string)[]\n// ): Promise<PublicKey[]> =>\n//   Promise.all(mints.map((m) => findAssociatedTokenAddress(walletAddress, m)));\n\n// export const getTokenAccountInfo = async (\n//   provider: Provider,\n//   tokenAddr: PublicKey\n// ): Promise<AccountInfo | null> => {\n//   let account;\n//   try {\n//     account = await provider.connection.getAccountInfo(tokenAddr);\n//   } catch {\n//     return null;\n//   }\n//   if (!account) return null;\n//   try {\n//     const data = parseTokenAccount(account.data);\n//     return data;\n//   } catch (e) {\n//     console.error(\"An error occured parsing the data, returning null\", e);\n//     return null;\n//   }\n// };\n\n// export const getMintInfo = async (\n//   provider: Provider,\n//   mintAddr: PublicKey\n// ): Promise<MintInfo | null> => {\n//   const account = await provider.connection.getAccountInfo(mintAddr);\n//   if (!account) return null;\n//   return parseMintAccount(account.data);\n// };\n","import { BNIsh, utils } from \"@malloc-protocol/sdk\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { useEffect, useState } from \"react\";\nimport { getMint } from \"../../utils/spl-tokens\";\n\nconst TokenLine = (props: {\n  tok?: TokenInfo;\n  mint?: string | PublicKey;\n  amount?: BNIsh;\n  onClick?: (tok: TokenInfo) => void;\n}) => {\n  const { tok: _tok, mint } = props;\n  const [tok, setTok] = useState<TokenInfo | null>(null);\n\n  useEffect(() => {\n    if (!mint) return;\n    getMint(mint).then((_tok) => {\n      if (_tok) setTok(_tok);\n      else {\n        setTok({\n          chainId: 0,\n          address: mint.toString(),\n          name: \"Unkown token\",\n          decimals: 6,\n          symbol: \"UNKOWN\",\n        });\n      }\n    });\n  }, [mint]);\n\n  useEffect(() => {\n    if (_tok) setTok(_tok);\n  }, [_tok]);\n  if (!tok) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div\n      style={{ cursor: \"pointer\" }}\n      onClick={() => {\n        if (props.onClick) props.onClick(tok);\n      }}\n    >\n      {tok.logoURI && <img src={tok.logoURI} style={{ height: \"14px\" }} />}{\" \"}\n      {props.amount\n        ? utils.tokens.toReadableNumber(new BN(props.amount), tok.decimals)\n        : \"\"}{\" \"}\n      {tok.symbol}\n    </div>\n  );\n};\n\nexport default TokenLine;\n","import * as React from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport { styled, Box } from \"@mui/system\";\nimport ModalUnstyled from \"@mui/base/ModalUnstyled\";\nimport { SPLToken } from \"../../interfaces\";\nimport { getAllMints, usedMints } from \"../../utils/spl-tokens\";\nimport { solanaConstantsStore } from \"../../state/flowchart-store\";\nimport { useStore } from \"react-stores\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport TokenLine from \"./TokenLine\";\n\nconst StyledModal = styled(ModalUnstyled)`\n  position: fixed;\n  z-index: 1300;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Backdrop = styled(\"div\")`\n  z-index: -1;\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  -webkit-tap-highlight-color: transparent;\n`;\n\nconst style = {\n  width: 400,\n  bgcolor: \"background.paper\",\n  border: \"2px solid #000\",\n  p: 2,\n  px: 4,\n  pb: 3,\n};\n\ntype SelectFn = (token: TokenInfo) => void | Promise<void>;\n\nexport default function TokenAccountChooser(props: {\n  buttonText?: string;\n  includedMints?: string[];\n  onSelect: SelectFn;\n}) {\n  const [open, setOpen] = React.useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <div>\n      <button type=\"button\" className=\"controls2\" onClick={handleOpen}>\n        {props.buttonText ?? \"Choose Token\"}\n      </button>\n      <StyledModal\n        aria-labelledby=\"unstyled-modal-title\"\n        aria-describedby=\"unstyled-modal-description\"\n        open={open}\n        onClose={handleClose}\n        BackdropComponent={Backdrop}\n      >\n        <Box sx={style}>\n          <h2 id=\"unstyled-modal-title\">Select Mint</h2>\n          <div>\n            <TokenDropDown\n              includedMints={props.includedMints}\n              onSelect={props.onSelect}\n            />\n          </div>\n        </Box>\n      </StyledModal>\n    </div>\n  );\n}\n\ninterface TokenDropdownOpts {\n  label: string;\n  token: TokenInfo;\n}\n\nconst TokenDropDown = (props: {\n  onSelect?: SelectFn;\n  includedMints?: string[];\n}) => {\n  const { onSelect } = props;\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [label, setLabel] = React.useState<null | TokenDropdownOpts>(null);\n  const [options, setOptions] = React.useState<TokenDropdownOpts[] | null>(\n    null\n  );\n\n  const getOptions = (tokList: TokenInfo[]) => {\n    const toFilterBy = props.includedMints ?? usedMints;\n    const tokListFiltered = tokList.filter((t) =>\n      toFilterBy.includes(t.address)\n    );\n    return tokListFiltered.map((tok) => {\n      return {\n        label: tok.symbol,\n        token: tok,\n      };\n    });\n  };\n\n  React.useEffect(() => {\n    if (label && onSelect) onSelect(label?.token);\n  }, [label]);\n\n  React.useMemo(() => {\n    console.log(\"GO\");\n    getAllMints().then((toks) => {\n      const opts = getOptions(toks);\n      setOptions(opts);\n    });\n  }, []);\n\n  return (\n    <div>\n      {options ? (\n        <Autocomplete\n          value={label}\n          inputValue={inputValue}\n          onChange={(event, newValue) => {\n            setLabel(newValue);\n          }}\n          onInputChange={(event, newInputValue) => {\n            setInputValue(newInputValue);\n          }}\n          id=\"combo-box-demo\"\n          getOptionLabel={(opts) => opts.label}\n          isOptionEqualToValue={(opt, val) => opt.label === val.label}\n          options={options}\n          sx={{ width: 300, backgroundColor: \"white\" }}\n          renderOption={(params, opt) => (\n            <>\n              <TokenLine\n                tok={opt.token}\n                onClick={(tok) => {\n                  setLabel({\n                    label: tok.symbol,\n                    token: tok,\n                  });\n                }}\n              />\n            </>\n          )}\n          // renderTags={(opts) => <TokenLine tok={opts[0].token} />}\n          renderInput={(params) => (\n            <>\n              {/* {params} */}\n              <TextField {...params} label=\"Mint\" />\n            </>\n          )}\n        />\n      ) : (\n        <div>loading...</div>\n      )}\n    </div>\n  );\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { NodeInfoProps } from \"../../interfaces\";\nimport { RaydiumLiquidityPool } from \"../../state/flowchart-store\";\nimport { getAllRaydiumPools } from \"../../utils/raydium\";\nimport TokenAccountChooser from \"../tokens/TokenAccountChooser\";\nimport TokenLine from \"../tokens/TokenLine\";\n\nconst RaydiumSwapNodeInfo = (props: NodeInfoProps & { inputMint?: string }) => {\n  const [includedMints, setIncludedMints] = useState<string[] | undefined>(\n    undefined\n  );\n  const getPossibleOutMintsForInMint = async (_inpMint: string | PublicKey) => {\n    const lps = await getAllRaydiumPools();\n    const inpMint = new PublicKey(_inpMint);\n    return lps\n      .filter(\n        (lp) => lp.baseMint.equals(inpMint) || lp.quoteMint.equals(inpMint)\n      )\n      .map((lp) => {\n        if (lp.baseMint.equals(inpMint)) return lp.quoteMint.toBase58();\n        else return lp.baseMint.toBase58();\n      });\n  };\n  // TODO: put set/ unset into its own component\n  useEffect(() => {\n    console.log(\"HEREH\");\n    if (props.inputMint) {\n      getPossibleOutMintsForInMint(props.inputMint).then((mints) =>\n        setIncludedMints(mints)\n      );\n    }\n  }, [props.inputMint]);\n  return (\n    <>\n      Out Mint:{\" \"}\n      {props.input.outMint ? (\n        <TokenLine mint={props.input.outMint} />\n      ) : (\n        <>Unset</>\n      )}\n      {/* {props.input.outMint} */}\n      <TokenAccountChooser\n        buttonText={\"Choose mint\"}\n        includedMints={includedMints}\n        onSelect={(token) => {\n          console.log(\"AAAA\");\n          props.updateInput({\n            outMint: token.address,\n          });\n        }}\n      />\n    </>\n  );\n};\n\nexport default RaydiumSwapNodeInfo;\n","import { TextField } from \"@mui/material\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport React, { useEffect, useState, FC } from \"react\";\nimport { NodeInfoProps } from \"../../interfaces\";\nimport { DARK_3, LIGHT_1 } from \"../colors\";\nimport TokenAccountChooser from \"../tokens/TokenAccountChooser\";\n\nconst TransferNodeInfo = (props: NodeInfoProps) => {\n  const [err, setError] = useState(false);\n  const [val, setVal] = useState<null | string>(null);\n  useEffect(() => {\n    if (props.input?.recipientWallet) {\n      setVal(props.input.recipientWallet);\n    }\n  }, [props.input]);\n\n  return (\n    <>\n      Recipient Address:{\" \"}\n      <TextField\n        error={err}\n        style={{ backgroundColor: DARK_3 }}\n        InputProps={{ style: { color: LIGHT_1 } }}\n        label={err ? \"Please enter a valid wallet address\" : \"\"}\n        value={val}\n        onChange={(e) => setVal(e.target.value)}\n        onBlur={(e) => {\n          try {\n            new PublicKey(e.target.value);\n            props.updateInput({\n              recipientWallet: e.target.value,\n            });\n            setError(false);\n          } catch {\n            setError(true);\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default TransferNodeInfo;\n","import * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\n\nexport type ProgressBarState = { value: number; min: number; max: number };\nexport const defaultProgressBarState = { value: 0, min: 0, max: 0 };\n\nconst normalize = (progressBarState: ProgressBarState) =>\n  ((progressBarState.value - progressBarState.min) * 100) /\n  (progressBarState.max - progressBarState.min);\n\nexport default function ProgressBar(props: ProgressBarState) {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((oldProgress) => {\n        if (oldProgress === 100) {\n          return 0;\n        }\n        const diff = Math.random() * 10;\n        return Math.min(oldProgress + diff, 100);\n      });\n    }, 500);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <LinearProgress variant=\"determinate\" value={normalize(props)} />\n    </Box>\n  );\n}\n","import React, { useState, FC } from \"react\";\nimport { useStore } from \"react-stores\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Slider from \"@mui/material/Slider\";\nimport MuiInput from \"@mui/material/Input\";\n\nimport { globalStore } from \"../globalStore\";\nimport ProgressBar from \"./loaders/ProgressBar\";\nimport { NonSpecificConstruction } from \"@malloc-protocol/sdk\";\nimport { UpdateActionNextActionsFn } from \"../interfaces\";\n\ninterface InputProps {\n  nextActions: NonSpecificConstruction[\"source\"][\"nextActions\"];\n  updateNextActions: UpdateActionNextActionsFn;\n  outEdgeId: string;\n}\n\nexport const InputField = styled(MuiInput)`\n  width: 100px;\n`;\n\nexport const InputSlider: FC<InputProps> = (props) => {\n  const state = useStore(globalStore);\n  const selectedNode = state.context.nodes[state.context.selectedNodeId];\n  const edgeObject = selectedNode.outEdges[props.outEdgeId];\n\n  const [value, setValue] = React.useState<\n    number | string | Array<number | string>\n  >(props.nextActions[props.outEdgeId]);\n\n  // const handleSliderChange = (_event: Event, newValue: number | number[]) => {\n  //   setValue(newValue);\n  // };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value === \"\" ? 0 : Number(event.target.value);\n    setValue(newValue);\n\n    props.nextActions[props.outEdgeId] = newValue;\n    props.updateNextActions(props.nextActions);\n  };\n\n  // lower bound at zero\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    }\n    // else if (value > 100) {\n    //   setValue(100);\n    // }\n  };\n\n  return (\n    <Box\n      sx={{ width: 400 }}\n      onMouseOver={() => {\n        edgeObject.highlighted = true;\n      }}\n      onMouseOut={() => {\n        edgeObject.highlighted = false;\n      }}\n    >\n      <div\n        style={{\n          display: \"grid\",\n          gap: \"1rem\",\n          alignItems: \"center\",\n          // gridTemplateColumns: \"150px 1fr 30px\",\n          gridTemplateColumns: \"120px 1fr 1fr 30px\",\n        }}\n      >\n        <h6>{props.outEdgeId}</h6>\n        {/* <Slider\n          value={Number(value)}\n          onChange={handleSliderChange}\n          aria-labelledby=\"input-slider\"\n        /> */}\n        <InputField\n          value={value}\n          size=\"small\"\n          onChange={handleInputChange}\n          onBlur={handleBlur}\n          style={{\n            color: \"#ffffff\",\n          }}\n          inputProps={{\n            step: 10,\n            min: 0,\n            // max: 100,\n            type: \"number\",\n            \"aria-labelledby\": \"input-slider\",\n          }}\n        />\n        <ProgressBar\n          value={Number(value) / getNextActionGroupTotal(props.nextActions)}\n          min={0}\n          max={1}\n        />\n        <button\n          className=\"delete\"\n          onClick={(_e) => {\n            let node1 = edgeObject.node1;\n            let node2 = edgeObject.node2;\n            let mintIdx = state.context.selectedOutMintIndex;\n            delete state.context.nodes[node1.id].outEdges[node2.id];\n\n            if (node1.isSource) {\n              delete state.construction.source.nextActions[node2.id];\n            } else {\n              // @ts-ignore\n              delete state.construction.actionDatas[node1.id].action\n                .nextActions[mintIdx][node2.id];\n            }\n            globalStore.setState({\n              ...state,\n            });\n          }}\n        >\n          x\n        </button>\n      </div>\n    </Box>\n  );\n};\n\nconst getNextActionGroupTotal = (\n  group: NonSpecificConstruction[\"source\"][\"nextActions\"]\n) => {\n  return Object.keys(group).reduce(\n    (prev: number, curr: string) => prev + group[curr],\n    0\n  );\n};\n\n// no-slider input group\n// uses progress bars as read only view of inputs\nconst InputGroup = (props: {\n  updateNextActions: UpdateActionNextActionsFn;\n  nextActions: NonSpecificConstruction[\"source\"][\"nextActions\"];\n}) => {\n  return (\n    <div>\n      {Object.keys(props.nextActions).map((action: string) => {\n        return (\n          <InputSlider\n            outEdgeId={action}\n            nextActions={props.nextActions}\n            updateNextActions={props.updateNextActions}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default InputGroup;\n","import { NonSpecificConstruction } from \"@malloc-protocol/sdk\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { NodeInfoProps, UpdateSourceFn } from \"../../interfaces\";\nimport { getAllRaydiumPools } from \"../../utils/raydium\";\nimport { LIGHT_1 } from \"../colors\";\nimport { InputField } from \"../input-slider\";\nimport TokenAccountChooser from \"../tokens/TokenAccountChooser\";\nimport TokenLine from \"../tokens/TokenLine\";\n\nconst SourceNodeInfo = (props: {\n  updateSource: UpdateSourceFn;\n  inputMints: NonSpecificConstruction[\"source\"][\"mints\"];\n}) => {\n  const [includedMints, setIncludedMints] = useState<string[] | undefined>(\n    undefined\n  );\n\n  return (\n    <>\n      {props.inputMints !== undefined &&\n      Object.keys(props.inputMints).length !== 0 ? (\n        Object.keys(props.inputMints).map((m) => (\n          <div\n            style={{\n              display: \"grid\",\n              gap: \"1rem\",\n              alignItems: \"center\",\n              gridTemplateColumns: \"150px 1fr 30px\",\n            }}\n          >\n            <TokenLine mint={m} amount={props.inputMints![m].toString()} />\n            <InputField\n              value={props.inputMints![m].toString()}\n              size=\"small\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                props.inputMints[m] =\n                  event.target.value === \"\" ? \"0\" : event.target.value;\n                props.updateSource(props.inputMints);\n              }}\n              style={{\n                color: LIGHT_1,\n              }}\n            />\n            {Object.keys(props.inputMints).length > 1 && (\n              <button\n                className=\"controls2\"\n                onClick={() => {\n                  delete props.inputMints[m];\n                  props.updateSource(props.inputMints);\n                }}\n              >\n                x\n              </button>\n            )}\n          </div>\n        ))\n      ) : (\n        <>Unset</>\n      )}\n      {/* TODO:: Have a way to add and delete input mints */}\n      <br />\n\n      <TokenAccountChooser\n        buttonText={\"add mint\"}\n        includedMints={includedMints}\n        onSelect={(token) => {\n          console.log(\"AAAA\", token);\n\n          const newMintAmount = \"100\";\n          props.inputMints[token.address] = newMintAmount;\n          props.updateSource(props.inputMints);\n        }}\n      />\n      <br />\n    </>\n  );\n};\n\nexport default SourceNodeInfo;\n","import { Checkbox, FormControlLabel, FormGroup } from \"@mui/material\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useEffect, useState } from \"react\";\nimport { NodeInfoProps } from \"../../interfaces\";\n\nconst RaydiumLPDepositInfo = (props: NodeInfoProps) => {\n  // TODO: put set/ unset into its own component\n  return (\n    <>\n      <FormGroup>\n        <FormControlLabel\n          control={\n            <Checkbox\n              defaultChecked={props.input?.hasFarm ?? false}\n              onChange={(e) => {\n                props.updateInput({\n                  hasFarm: e.target.checked,\n                });\n              }}\n            />\n          }\n          label=\"Ensure that a farm exists\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nexport default RaydiumLPDepositInfo;\n","import React, { useEffect, useState, FC } from \"react\";\n\nimport { useStore } from \"react-stores\";\nimport { globalStore } from \"../../globalStore\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { MallocSPLBuildActionMap, splConstants } from \"@malloc-protocol/spl\";\nimport { saveStringToFile } from \"../../utils/files\";\n\nimport { TokenListProvider, TokenInfo, ENV } from \"@solana/spl-token-registry\";\nimport RaydiumSwapNodeInfo from \"./raydium-swap\";\nimport { Box } from \"@mui/system\";\nimport {\n  UpdateActionInputFn,\n  UpdateActionNextActionsFn,\n  UpdateSourceFn,\n} from \"../../interfaces\";\nimport {\n  NonSpecificAction,\n  NonSpecificActionFilled,\n  NonSpecificConstruction,\n  NonSpecificConstructionOpts,\n} from \"@malloc-protocol/sdk\";\nimport TransferNodeInfo from \"./transfer\";\nimport { SOURCE_NAME } from \"../../config/constants\";\nimport { buildConstructionAndFill } from \"../../utils/malloc\";\nimport InputGroup from \"../input-slider\";\nimport SourceNodeInfo from \"./source-node-info\";\nimport RaydiumLPDepositInfo from \"./raydium-lp-deposit\";\n\nconst renderInput = (\n  actionType: string,\n  updateInput: UpdateActionInputFn,\n  updateSource: UpdateSourceFn,\n  input: any,\n  inputMints: NonSpecificConstruction[\"source\"][\"mints\"],\n  action?: NonSpecificActionFilled\n) => {\n  switch (actionType) {\n    case SOURCE_NAME:\n      return (\n        <SourceNodeInfo updateSource={updateSource} inputMints={inputMints} />\n      );\n    case splConstants.BUILD_ACTION_UIDS.TRANSFER:\n      return <TransferNodeInfo updateInput={updateInput} input={input} />;\n    case splConstants.BUILD_ACTION_UIDS.RAYDIUM_LP_STAKE:\n      return null;\n    case splConstants.BUILD_ACTION_UIDS.RAYDIUM_LP_DEPOSIT:\n      return <RaydiumLPDepositInfo updateInput={updateInput} input={input} />;\n    case splConstants.BUILD_ACTION_UIDS.RAYDIUM_SWAP:\n      const DEFAULT_IN_MINT_IDX_TO_CHECK = 0;\n      return (\n        <RaydiumSwapNodeInfo\n          updateInput={updateInput}\n          input={input}\n          inputMint={action?.inMints?.[DEFAULT_IN_MINT_IDX_TO_CHECK]}\n        />\n      );\n    case splConstants.BUILD_ACTION_UIDS.SOLEND_LP_DEPOSIT:\n      return null;\n    // SOURCE\n    default:\n      return null;\n  }\n};\n\nconst NodeInfo: FC<{}> = () => {\n  // const wallet = useAnchorWallet();\n  const state = useStore(globalStore);\n\n  const selectedAction = state.context.nodes[state.context.selectedNodeId];\n  const isSource = selectedAction.isSource;\n\n  let expectedNumberOfOutMints: number | undefined;\n  let NSPConstructionNode: NonSpecificActionFilled | undefined,\n    actionType: string,\n    actionInputs: any,\n    nextActions: any;\n  // @ts-ignore\n\n  if (isSource) {\n    actionType = SOURCE_NAME;\n    actionInputs = null;\n    nextActions = state.construction.source.nextActions;\n  } else {\n    NSPConstructionNode = (\n      state.construction.actionDatas[selectedAction.id] as any\n    ).action as NonSpecificActionFilled;\n    actionType = NSPConstructionNode.actionTypeUID;\n    actionInputs = NSPConstructionNode.inputs;\n    nextActions = NSPConstructionNode.nextActions;\n    expectedNumberOfOutMints =\n      MallocSPLBuildActionMap[actionType].expectedNumberOutMints;\n  }\n\n  const updateSource: UpdateSourceFn = (newMints) => {\n    state.construction.source.mints = newMints;\n    globalStore.setState({\n      ...state,\n    });\n  };\n\n  const updateInput = (inp: any) => {\n    //@ts-ignore\n    (\n      (state.construction.actionDatas[selectedAction.id] as any)\n        .action as NonSpecificAction\n    ).inputs = inp;\n\n    globalStore.setState({\n      ...state,\n    });\n  };\n  const InputComponent = isSource\n    ? renderInput(\n        actionType,\n        updateInput,\n        updateSource,\n        actionInputs,\n        state.construction.source.mints\n      )\n    : renderInput(\n        actionType,\n        updateInput,\n        updateSource,\n        actionInputs,\n        state.construction.source.mints,\n        NSPConstructionNode\n      );\n\n  const updateNextActions: UpdateActionNextActionsFn = (nextActions) => {\n    if (selectedAction.isSource) {\n      state.construction.source.nextActions = nextActions;\n    } else {\n      (\n        (state.construction.actionDatas[selectedAction.id] as any)\n          .action as NonSpecificAction\n      ).nextActions[state.context.selectedOutMintIndex] = nextActions;\n    }\n\n    globalStore.setState({\n      ...state,\n    });\n  };\n\n  const getNextActionGroup = () => {\n    return selectedAction.isSource\n      ? state.construction.source.nextActions\n      : (\n          (state.construction.actionDatas[selectedAction.id] as any)\n            .action as NonSpecificAction\n        ).nextActions[state.context.selectedOutMintIndex];\n  };\n\n  return (\n    <div className=\"card\">\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <input\n          value={selectedAction.id}\n          type=\"text\"\n          className=\"inputField\"\n          style={{ width: \"90%\" }}\n          // TODO: rename node id's\n          // current issue => state.context datastructure => requires alot of search\n          // @shiva revisit this\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n            // const newKey = event.target.value;\n            // if (newKey === \"\") return;\n            // if (!state.context.nodes.hasOwnProperty(newKey)) {\n            //   state.context.nodes[newKey] = JSON.parse(\n            //     JSON.stringify(selectedAction)\n            //   );\n            //   delete state.context.nodes[selectedAction.id];\n            //   state.construction.actionDatas[newKey] = JSON.parse(\n            //     JSON.stringify(\n            //       state.construction.actionDatas[selectedAction.id]\n            //     )\n            //   );\n            //   delete state.construction.actionDatas[selectedAction.id];\n            //   selectedAction.id = newKey;\n            //   globalStore.setState({\n            //     ...state,\n            //   });\n            // }\n          }}\n        ></input>\n        {!selectedAction.isSource && (\n          <button\n            className=\"delete\"\n            onClick={() => {\n              // delete all edges linked to selected node\n              for (let node_id of Object.keys(state.context.nodes)) {\n                if (node_id != selectedAction.id) {\n                  let node = state.context.nodes[node_id];\n                  if (node.outEdges[selectedAction.id]) {\n                    delete node.outEdges[selectedAction.id];\n\n                    if (node.isSource) {\n                      delete state.construction.source.nextActions[\n                        selectedAction.id\n                      ];\n                    } else {\n                      // @ts-ignore\n                      delete state.construction.actionDatas[node_id].action\n                        .nextActions[selectedAction.id];\n                    }\n                  }\n                }\n              }\n\n              // delete node\n              delete state.context.nodes[state.context.selectedNodeId];\n              delete state.construction.actionDatas[\n                state.context.selectedNodeId\n              ];\n              state.context.selectedNodeId = \"SOURCE\";\n              globalStore.setState({\n                ...state,\n              });\n            }}\n          >\n            x\n          </button>\n        )}\n      </div>\n\n      <Box sx={{ m: 2 }}>\n        <h5>Input</h5>\n      </Box>\n      {InputComponent && InputComponent}\n\n      {/* {(expectedNumberOfOutMints === undefined ||\n        expectedNumberOfOutMints > 0) && ( */}\n      <div>\n        {(isSource || nextActions && nextActions.length >= 1) && (\n          <>\n            <h5>Next Actions</h5>\n\n            {isSource && (\n              <InputGroup\n                updateNextActions={updateNextActions}\n                nextActions={getNextActionGroup()}\n              />\n            )}\n            {!isSource &&\n              nextActions.map((mintActions: any, index: number) => {\n                return (\n                  <InputGroup\n                    updateNextActions={updateNextActions}\n                    nextActions={getNextActionGroup()}\n                  />\n                );\n              })}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NodeInfo;\n","import { MintWithAmount, NonSpecificActionFilled } from \"@malloc-protocol/sdk\";\nimport React, { useState, FC, ReactNode } from \"react\";\nimport { useStore } from \"react-stores\";\nimport { globalStore } from \"../globalStore\";\nimport TokenLine from \"./tokens/TokenLine\";\n\nconst EstimateLines = (props: { mints: string[]; amounts: string[] }) => {\n  const { mints, amounts } = props;\n\n  return (\n    <>\n      {mints.map((m, i) => {\n        return <TokenLine mint={m} amount={amounts[i]} key={`Estimate-line-${i}-${m.toString()}`}/>;\n      })}\n    </>\n  );\n};\n\nconst isVis = (estimates?: MintWithAmount<string, string>[]): boolean => {\n  return estimates !== undefined;\n};\n\nconst EstimatesPanel: FC = () => {\n  const state = useStore(globalStore);\n  const selectedAction = state.context.nodes[state.context.selectedNodeId];\n  const NSPConstructionNode = (\n    state.construction.actionDatas[selectedAction.id] as any\n  ).action as NonSpecificActionFilled;\n\n  return (\n    <div className=\"card\" style={{}}>\n      <h3>Estimates</h3>\n      <div>\n        <h4>Expected In</h4>\n        {isVis(NSPConstructionNode.inEstimates) || (\n          <p>We can only give estimates once the entire flow can be built!</p>\n        )}\n        {isVis(NSPConstructionNode.inEstimates) && (\n          <EstimateLines\n            mints={NSPConstructionNode.inEstimates!.map((e) => e.mint)}\n            amounts={NSPConstructionNode.inEstimates!.map((e) => e.amount)}\n          />\n        )}\n      </div>\n      <div>\n        {isVis(NSPConstructionNode.outEstimates) || (\n          <>\n            <h4>Expected Out</h4>\n            <p>We can only give estimates once the entire flow can be built!</p>\n          </>\n        )}\n        {isVis(NSPConstructionNode.outEstimates) &&\n          NSPConstructionNode.outEstimates!.length > 0 && (\n            <>\n              <h4>Expected Out</h4>\n              <EstimateLines\n                mints={NSPConstructionNode.outEstimates!.map((e) => e.mint)}\n                amounts={NSPConstructionNode.outEstimates!.map((e) => e.amount)}\n              />\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default EstimatesPanel;\n","import React, { useState, FC } from \"react\";\n\nimport FlowControls from \"./flow-controls\";\nimport NodeSelector from \"./node-selector\";\nimport NodeInfo from \"./node-infos/node-info\";\nimport GraphVisualizer from \"./graph-visualizer\";\nimport EstimatesPanel from \"./estimates-panel\";\nimport { useStore } from \"react-stores\";\nimport { globalStore } from \"../globalStore\";\nimport ProgressBar from \"./loaders/ProgressBar\";\n\nconst TableGUI: FC = () => {\n  const state = useStore(globalStore);\n  const selectedAction = state.context.nodes[state.context.selectedNodeId];\n  const isSource = selectedAction.isSource;\n\n  return (\n    <div>\n      <div\n        style={{\n          display: \"grid\",\n          padding: \"2rem\",\n          gap: \"2rem\",\n          gridTemplateColumns: \"1fr 2fr\",\n        }}\n      >\n        <div\n          style={{\n            // height: \"500px\",\n            // overflow: \"auto\",\n            display: \"grid\",\n          }}\n        >\n          <NodeInfo />\n          {isSource || <EstimatesPanel />}\n        </div>\n        <div\n          id=\"graph-container\"\n          style={{ display: \"grid\", gap: \"1rem\", alignItems: \"flex-start\" }}\n        >\n          <FlowControls />\n          <GraphVisualizer />\n          <span className=\"fine-print\">\n            Create nodes and edges in the canvas. Delete nodes and edges in the\n            editor panel\n          </span>\n\n          {state.loading && (\n            <div>\n              <h4>Running your flow...</h4>\n            <ProgressBar\n              value={state.loading.progress}\n              max={state.loading.max}\n              min={0}\n            /></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TableGUI;\n","import { Provider } from \"@malloc-protocol/anchor\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getConstants } from \"../config/constants\";\n\nexport const getProvider = (wallet: AnchorWallet): Provider => {\n  return new Provider(new Connection(getConstants().solana.RPC), wallet, {});\n};\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport * as anchor from \"@malloc-protocol/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  shortenAddress,\n} from \"./utils/malloc\";\nimport { useStore } from \"react-stores\";\nimport LoadingTX from \"./components/tx-handler/LoadingTX\";\nimport TableGUI from \"./components/tablegui\";\nimport { globalStore } from \"./globalStore\";\nimport { constants, MallocSdk, utils } from \"@malloc-protocol/sdk\";\nimport { getProvider } from \"./utils/anchor\";\nimport { Alert, Snackbar } from \"@mui/material\";\nimport { BN } from \"@malloc-protocol/anchor\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nexport interface HomeProps {\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<string>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const wallet = useWallet();\n  const anchorWallet = useAnchorWallet();\n  const state = useStore(globalStore);\n\n  const setMallocSdk = () => {\n    if (anchorWallet) {\n      globalStore.setState({\n        ...state,\n        malloc: new MallocSdk(\n          constants.PIDS.mainnet.MALLOC,\n          getProvider(anchorWallet!),\n          \"mainnet-beta\"\n        ),\n      });\n    }\n  };\n\n  useEffect(() => {\n    setMallocSdk();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (anchorWallet?.publicKey) {\n        const balance = await props.connection.getBalance(\n          anchorWallet.publicKey\n        );\n        const formatted = utils.tokens.toReadableNumber(new BN(balance), 9);\n        setBalance(parseFloat(formatted).toFixed(4));\n        setMallocSdk();\n      }\n    })();\n  }, [wallet.publicKey]);\n\n  return (\n    <main>\n      <div className=\"header\">\n        <div style={{ display: \"flex\", justifyContent: \"left\", gap: \"1rem\" }}>\n          <h1>malloc</h1>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"right\", gap: \"1rem\" }}>\n          {/* <ConnectButton>Connect Wallet</ConnectButton> */}\n          {wallet.connected && (\n            <div>\n              <p style={{ marginTop: 0 }}>\n                Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")}{\" \"}\n                <br />\n                Balance: {(balance || 0).toLocaleString()} SOL\n              </p>\n            </div>\n          )}\n          {!wallet.connected && <ConnectButton>Connect Wallet</ConnectButton>}\n          <a\n            href=\"https://github.com/Lev-Stambler/malloc-solana2\"\n            target=\"_blank\"\n          >\n            <i className=\"bi bi-github\"></i>\n          </a>\n          <a href=\"https://twitter.com/MallocProtocol\" target=\"_blank\">\n            <i className=\"bi bi-twitter\"></i>\n          </a>\n          <a href=\"mailto:mallocprotocol@gmail.com\" target=\"_blank\">\n            <i className=\"bi bi-mailbox\"></i>\n          </a>\n        </div>\n      </div>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n\n      {wallet.connected && <TableGUI />}\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import * as React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useStore } from \"react-stores\";\nimport { errorStore, globalStore } from \"../globalStore\";\n\nexport default function ErrorSnackbar() {\n  const store = useStore(globalStore);\n  const error = useStore(errorStore);\n  const [open, setOpen] = React.useState(true);\n\n  React.useEffect(() => {\n    setOpen(true);\n  }, [error.changeToggle]);\n\n  const handleClose = (e: any, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const action = (\n    <React.Fragment>\n      {/* <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n        UNDO\n      </Button> */}\n      <IconButton\n        size=\"small\"\n        aria-label=\"close\"\n        color=\"inherit\"\n        onClick={handleClose}\n      >\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </React.Fragment>\n  );\n  if (!error.message) return <></>;\n\n  return (\n    <>\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        message={error.message || \"\"}\n        action={action}\n      />\n    </>\n  );\n}\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport { useEffect, useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@malloc-protocol/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { getConstants } from \"./config/constants\";\nimport ErrorSnackbar from \"./components/error-snackbar\";\nimport { inferContextFromConstruction } from \"./components/graph-visualizer\";\nimport { globalStore } from \"./globalStore\";\nimport { useStore } from \"react-stores\";\n\nconst network = getConstants().solana.NETWORK;\n\nconst rpcHost = getConstants().solana.RPC;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const state = useStore(globalStore);\n  const endpoint = useMemo(() => clusterApiUrl(\"mainnet-beta\"), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  useEffect(() => {\n    inferContextFromConstruction(state);\n  }, []);\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletDialogProvider>\n          <Home connection={connection} txTimeout={txTimeout} />\n          <ErrorSnackbar />\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import p5Types from \"p5\";\nimport { splConstants } from \"@malloc-protocol/spl\";\nimport { SOURCE_NAME } from \"../config/constants\";\nimport {\n  RED_FAIL,\n  GREEN_SUCCESS,\n  LIGHT_1,\n  GREEN_1,\n  GREEN_1_transparent,\n  LIGHT_2,\n  DARK_2,\n} from \"./colors\";\n\nexport const vectorAdd = (a: number[], b: number[]) => {\n  return [a[0] + b[0], a[1] + b[1]];\n};\n\nexport const vectorSub = (a: number[], b: number[]) => {\n  return [a[0] - b[0], a[1] - b[1]];\n};\n\nexport const vectorScale = (a: number[], s: number) => {\n  return [a[0] * s, a[1] * s];\n};\n\nexport const vectorMag = (a: number[]): number => {\n  return Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n};\n\nexport const dist = (x1: number, y1: number, x2: number, y2: number) => {\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n};\n\nexport const vectorHeading = (a: number[]) => {\n  return Math.atan2(a[1], a[0]);\n};\n\nexport class Node {\n  pos: number[];\n  vel: number[];\n  acc: number[];\n  actionType: any;\n  r: number; // radius of circle\n  r2: number; // radius of influence for mouseDrag\n  r3: number; // radius of influence for force direction\n  hover: boolean;\n  hover2: boolean;\n  id: string;\n  selected: boolean;\n  successfullyRan: boolean;\n  failedRunning: boolean;\n  isSource: boolean;\n  outEdges: { [actionId: string]: Edge };\n\n  constructor(\n    id: string,\n    pos = [0, 0],\n    isSource = false,\n    selected = false,\n    type = null\n  ) {\n    this.pos = pos;\n    this.vel = [0, 0];\n    this.acc = [0, 0];\n    this.r = 15;\n    this.r2 = 2 * this.r;\n    this.r3 = this.r * 4;\n    this.hover = false;\n    this.hover2 = false;\n    this.actionType = type;\n    this.id = id;\n    this.selected = selected;\n    this.isSource = isSource;\n    this.failedRunning = false;\n    this.successfullyRan = false;\n    this.outEdges = {};\n  }\n\n  updateHover(x: number, y: number) {\n    this.hover = dist(x, y, this.pos[0], this.pos[1]) < this.r;\n    this.hover2 = dist(x, y, this.pos[0], this.pos[1]) < this.r2;\n  }\n\n  repel(p: Node) {\n    let dir = vectorSub(this.pos, p.pos);\n    let d = vectorMag(dir);\n    dir = vectorScale(dir, 1 / d);\n\n    if (d < this.r3) {\n      let force = -1 / (d * d);\n      p.acc = vectorAdd(p.acc, vectorScale(dir, force));\n    } else {\n      p.acc = [0, 0];\n    }\n  }\n\n  draw(p5: p5Types) {\n    p5.noStroke();\n    // TODO: @Shiva please style lmao\n\n    p5.fill(LIGHT_1);\n    p5.circle(this.pos[0], this.pos[1], 2 * this.r);\n\n    if (this.selected) {\n      p5.stroke(GREEN_1);\n      p5.strokeWeight(3);\n      p5.noFill();\n      p5.circle(this.pos[0], this.pos[1], 2 * this.r * 1.5);\n    }\n\n    if (this.failedRunning) {\n      p5.fill(RED_FAIL);\n    } else if (this.successfullyRan) {\n      p5.fill(GREEN_1);\n    } else if (this.isSource) {\n      p5.fill(DARK_2);\n    } else {\n      p5.fill(LIGHT_2);\n    }\n    p5.noStroke();\n    p5.circle(this.pos[0], this.pos[1], 2 * this.r * 0.7);\n\n    if (this.hover) {\n      p5.fill(LIGHT_1);\n      // p5.textFont(\n      //   p5.loadFont(\n      //     \"./src/fonts/Open_Sans/static/OpenSans/OpenSans-LightItalic.ttf\"\n      //   )\n      // );\n      p5.textSize(15);\n      p5.text(\n        this.id,\n        this.pos[0] - p5.textWidth(this.id) / 2,\n        this.pos[1] - 30\n      );\n    } else if (this.hover2) {\n      p5.noStroke();\n      p5.fill(GREEN_1_transparent);\n      p5.circle(this.pos[0], this.pos[1], 2 * this.r2);\n    }\n\n    if (!p5.mouseIsPressed) {\n      this.pos = vectorAdd(this.pos, this.vel);\n      this.vel = vectorAdd(this.vel, this.acc);\n    }\n  }\n}\n\nexport class Edge {\n  node1: Node;\n  node2: Node;\n  highlighted: boolean;\n  weight: number;\n  arrowSize: number;\n\n  constructor(a: Node, b: Node) {\n    this.node1 = a;\n    this.node2 = b;\n\n    // styling stuff\n    this.weight = 5;\n    this.highlighted = false;\n    this.arrowSize = 10;\n  }\n\n  drawArrow(p5: p5Types) {\n    let base = this.node1.pos;\n    let vec = vectorSub(this.node2.pos, base);\n\n    p5.push();\n    p5.translate(base[0], base[1]);\n    p5.line(0, 0, vec[0], vec[1]);\n\n    p5.rotate(vectorHeading(vec));\n    let arrowSize = this.arrowSize;\n    p5.translate(vectorMag(vec) - arrowSize - this.node2.r, 0);\n    p5.triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n    p5.pop();\n  }\n\n  draw(p5: p5Types) {\n    p5.strokeWeight(this.weight);\n    p5.stroke(LIGHT_2);\n    p5.fill(LIGHT_2);\n\n    // p5.line(\n    //   this.node1.pos[0],\n    //   this.node1.pos[1],\n    //   this.node2.pos[0],\n    //   this.node2.pos[1]\n    // );\n    // p5.circle(this.node2.pos[0], this.node2.pos[1], this.arrowSize);\n    this.drawArrow(p5);\n\n    if (this.highlighted) {\n      p5.stroke(GREEN_1_transparent);\n      p5.strokeWeight(this.weight * 5);\n\n      p5.line(\n        this.node1.pos[0],\n        this.node1.pos[1],\n        this.node2.pos[0],\n        this.node2.pos[1]\n      );\n    }\n  }\n}\n\nexport interface P5State {\n  initialized: boolean;\n  scale: number;\n  translate: number[];\n  selectedOutMintIndex: number;\n  selectedActionType: number;\n  selectedNodeId: string;\n  activeEdge: Edge | null;\n  nodes: { [actionId: string]: Node };\n}\n\nexport const dummyState: P5State = {\n  initialized: false,\n  scale: 1,\n  translate: [0, 0],\n  selectedOutMintIndex: 0,\n  selectedActionType: 0,\n  selectedNodeId: SOURCE_NAME,\n  activeEdge: null,\n  nodes: {\n    SOURCE: new Node(SOURCE_NAME, [0, 0], true),\n  },\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Sketch from \"react-p5\";\nimport p5Types from \"p5\";\nimport { P5State, Node, Edge, dummyState, dist } from \"./p5-classes\";\n\nimport { useStore } from \"react-stores\";\n// import { StoreEvent, StoreEventType } from \"react-stores\";\nimport { globalStore, MallocState } from \"../globalStore\";\nimport { splConstants } from \"@malloc-protocol/spl\";\nimport { NonSpecificAction } from \"@malloc-protocol/sdk\";\nimport { SOURCE_NAME } from \"../config/constants\";\nimport { DARK_2, DARK_3 } from \"./colors\";\n\nconst randomPos = (\n  xMin: number,\n  yMin: number,\n  xMax: number,\n  yMax: number\n): number[] => {\n  console.log(\"called!\");\n  let x = Math.round(Math.random() * (xMax - xMin) + xMin);\n  let y = Math.round(Math.random() * (yMax - yMin) + yMin);\n  return [x, y];\n};\n\nexport interface savedContextState {\n  nodes: { [actionId: string]: number[] };\n  translate: number[];\n  scale: number;\n}\n\nexport const saveContext = (state: MallocState): savedContextState => {\n  const nodes = state.context.nodes;\n  let context: savedContextState = {\n    nodes: {},\n    translate: state.context.translate,\n    scale: state.context.scale,\n  };\n  for (const [node_id, node] of Object.entries(nodes)) {\n    context.nodes[node_id] = node.pos;\n  }\n  return context;\n};\n\nexport const inferContextFromConstruction = (\n  state: MallocState,\n  savedContext?: savedContextState\n) => {\n  const sourceActions = state.construction.source.nextActions;\n  const actionDatas = state.construction.actionDatas;\n\n  let nodes = state.context.nodes;\n  let sourceNode = nodes[SOURCE_NAME];\n  sourceNode.selected = true;\n\n  // start with inferred source nodes\n  for (const [action_id, amount] of Object.entries(sourceActions)) {\n    let pos = randomPos(-100, -100, 100, 100);\n    let node = new Node(action_id, pos);\n    nodes[action_id] = node;\n\n    let edge = new Edge(sourceNode, node);\n    sourceNode.outEdges[action_id] = edge;\n  }\n\n  // CREATE NODE\n  for (const action_id of Object.keys(actionDatas)) {\n    if (!nodes[action_id]) {\n      let pos = randomPos(-100, -100, 100, 100);\n      nodes[action_id] = new Node(action_id, pos);\n    }\n  }\n\n  // CREATE OUT EDGES\n  for (const action_id of Object.keys(actionDatas)) {\n    let node = nodes[action_id];\n    // @ts-ignore\n    for (const outMint of actionDatas[action_id].action.nextActions) {\n      for (const nextAction_id of Object.keys(outMint)) {\n        let node2 = nodes[nextAction_id];\n        let edge = new Edge(node, node2);\n        node.outEdges[nextAction_id] = edge;\n      }\n    }\n  }\n\n  if (savedContext) {\n    state.context.translate = savedContext.translate;\n    state.context.scale = savedContext.scale;\n\n    for (let [node_id, node_pos] of Object.entries(savedContext.nodes)) {\n      state.context.nodes[node_id].pos = node_pos;\n    }\n  }\n\n  globalStore.setState({\n    ...state,\n  });\n};\n\nfunction updateSelection(s: P5State, selected_id: string) {\n  s.nodes[s.selectedNodeId].selected = false;\n  s.selectedNodeId = selected_id;\n  s.nodes[s.selectedNodeId].selected = true;\n}\n\n// tests with p5\nconst GraphVisualizer = () => {\n  const state = useStore(globalStore);\n\n  // const [dimensions, setDimensions] = React.useState({\n  //   height: 500,\n  //   width: container?.clientWidth,\n  // });\n\n  let s = state.context;\n\n  let clickPos = [0, 0];\n  let edgeStart: Node;\n  let edgeEnd: Node;\n  let canvasDragged = false;\n  let nodeDragged = false;\n  let edgeDragged = false;\n\n  const setup = (p5: p5Types, canvasParentRef: Element) => {\n    // Select a node if mouse over\n    const mouseClicked = (e: any) => {\n      for (const [id, node] of Object.entries(s.nodes)) {\n        if (node.hover) {\n          updateSelection(s, id);\n        }\n      }\n\n      globalStore.setState({\n        ...state,\n      });\n    };\n\n    const makeid = (length: number) => {\n      var result = \"\";\n      var characters =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(\n          Math.floor(Math.random() * charactersLength)\n        );\n      }\n      return result;\n    };\n\n    // add new node at current position and set selected\n    const doubleClicked = (e: any) => {\n      let newActionType = Object.values(splConstants.BUILD_ACTION_UIDS)[\n        s.selectedActionType\n      ];\n      let actionIdBase = Object.keys(splConstants.BUILD_ACTION_UIDS)[\n        s.selectedActionType\n      ];\n\n      let id = actionIdBase + \"-\" + makeid(5);\n      s.nodes[id] = new Node(id, coordMap(p5.mouseX, p5.mouseY));\n      updateSelection(s, id);\n\n      let newAction: NonSpecificAction = {\n        actionTypeUID: newActionType,\n        actionPID: splConstants.PIDS.MAINNET.CPI_ACTION,\n        inputs: {},\n        nextActions: [],\n      };\n\n      state.construction.actionDatas[id] = { action: newAction };\n\n      globalStore.setState({\n        ...state,\n      });\n    };\n\n    const lazyFillNextMints = (\n      mintIdx: number,\n      currentNextAction: NonSpecificAction[\"nextActions\"]\n    ): NonSpecificAction[\"nextActions\"] => {\n      if (!currentNextAction[mintIdx]) {\n        // Fill in the next action with empty next actions\n        for (let i = currentNextAction.length; i <= mintIdx; i++) {\n          currentNextAction.push({});\n        }\n      }\n      return currentNextAction;\n    };\n\n    // start canvas drag or edge drag\n    const mousePressed = (e: any) => {\n      for (const [id, node] of Object.entries(s.nodes)) {\n        if (node.hover) {\n          nodeDragged = true;\n          edgeStart = node;\n          return;\n        }\n        if (node.hover2) {\n          edgeDragged = true;\n          edgeStart = node;\n          edgeEnd = new Node(\"temp\", coordMap(p5.mouseX, p5.mouseY));\n          edgeEnd.r = 0;\n          s.activeEdge = new Edge(edgeStart, edgeEnd);\n          return;\n        }\n      }\n\n      // canvasDragged = true;\n      // let [x, y] = coordMap(p5.mouseX, p5.mouseY);\n      // clickPos = [s.translate[0] - x, s.translate[1] - y];\n    };\n\n    // end canvas drag or edge drag\n    const mouseReleased = (e: any) => {\n      if (nodeDragged) nodeDragged = false;\n      // if (canvasDragged) canvasDragged = false;\n\n      if (edgeDragged) {\n        for (const [id, node] of Object.entries(s.nodes)) {\n          if (node.hover2 && node != edgeStart) {\n            // adds frontend edge\n            const newEdge = new Edge(edgeStart, node);\n            const newEdgeAmount = 100;\n            edgeStart.outEdges[node.id] = newEdge;\n\n            if (edgeStart.id === SOURCE_NAME) {\n              state.construction.source.nextActions[node.id] = newEdgeAmount;\n            } else {\n              const current_node = state.construction.actionDatas[edgeStart.id];\n              const outMintIdx = s.selectedOutMintIndex;\n\n              const nextActions = lazyFillNextMints(\n                outMintIdx,\n                // @ts-ignore\n                current_node.action.nextActions\n              );\n              nextActions[outMintIdx][node.id] = newEdgeAmount;\n            }\n\n            globalStore.setState({\n              ...state,\n            });\n          }\n        }\n        edgeDragged = false;\n        s.activeEdge = null;\n      }\n    };\n\n    // updates dx, dy\n    const mouseMoved = (e: any) => {\n      // if (canvasDragged) {\n      //   s.translate[0] = p5.mouseX + clickPos[0];\n      //   s.translate[1] = p5.mouseY + clickPos[1];\n      // }\n\n      if (nodeDragged) {\n        edgeStart.pos = coordMap(p5.mouseX, p5.mouseY);\n      }\n\n      if (edgeDragged) {\n        edgeEnd.pos = coordMap(p5.mouseX, p5.mouseY);\n      }\n\n      let [x, y] = coordMap(p5.mouseX, p5.mouseY);\n      for (const [id, node] of Object.entries(s.nodes)) node.updateHover(x, y);\n    };\n\n    // TODO: implement scrolling\n    const mouseWheel = (e: any) => {\n      s.translate[0] -= e.deltaX;\n      s.translate[1] -= e.deltaY;\n      // s.scale -= 0.01 * e.deltaY;\n    };\n\n    // TODO\n    const windowResized = (e: any) => {};\n    // s.windowResized = e => {s.resizeCanvas(window.innerWidth, window.innerHeight)}\n\n    const container = document.getElementById(\"graph-container\");\n\n    // @ts-ignore\n    p5.createCanvas(container?.clientWidth, 500)\n      .parent(canvasParentRef)\n      .mouseClicked(mouseClicked)\n      .doubleClicked(doubleClicked)\n      .mousePressed(mousePressed)\n      .mouseReleased(mouseReleased)\n      .mouseMoved(mouseMoved)\n      .mouseWheel(mouseWheel);\n\n    s.translate = [p5.width / 2, p5.height / 2];\n  };\n\n  const coordMap = (x: number, y: number) => [\n    x / s.scale - s.translate[0],\n    y / s.scale - s.translate[1],\n  ];\n\n  const applyForces = () => {\n    for (const [node_id, node] of Object.entries(s.nodes)) {\n      for (const [node2_id, node2] of Object.entries(s.nodes)) {\n        if (node_id != node2_id) {\n          node.repel(node2);\n        }\n      }\n    }\n  };\n\n  const draw = (p5: p5Types) => {\n    p5.background(DARK_2);\n    p5.noStroke();\n    p5.fill(DARK_3);\n    const r = 20;\n    p5.rect(0, 0, p5.width, p5.height, r, r, r, r);\n\n    p5.push();\n    p5.translate(p5.createVector(...s.translate));\n    p5.scale(s.scale);\n\n    // draw currently created edge if relevant\n    if (s.activeEdge != null) {\n      s.activeEdge.draw(p5);\n    }\n\n    // draw edges\n    for (const [node_id, node] of Object.entries(s.nodes)) {\n      for (const [edge_id, edge] of Object.entries(node.outEdges)) {\n        edge.draw(p5);\n      }\n    }\n\n    // draw nodes\n    for (const [node_id, node] of Object.entries(s.nodes)) {\n      node.draw(p5);\n    }\n\n    p5.pop();\n    // applyForces();\n  };\n\n  // FIX RESIZING LATER\n  // useEffect(() => {\n  //   function handleResize() {\n  //     setDimensions({\n  //       height: 500,\n  //       width: container?.clientWidth,\n  //     });\n  //   }\n\n  //   window.addEventListener(\"resize\", handleResize);\n  // });\n\n  return <Sketch setup={setup} draw={draw} />;\n};\n\nexport default GraphVisualizer;\n","import * as anchor from \"@malloc-protocol/anchor\";\nimport {\n  MallocActionBuilderError,\n  MallocError,\n  MallocErrorTypes,\n  MallocRunnerError,\n  MallocSdk,\n  RunConstructionOpts,\n  utils,\n} from \"@malloc-protocol/sdk\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  ErrorState,\n  errorStore,\n  globalStore,\n  MallocState,\n} from \"../globalStore\";\nimport { MallocSPLBuildActionMap } from \"@malloc-protocol/spl\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  getConstructionSignerFromStorage,\n  saveConstructionSigner,\n} from \"./localStorage\";\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\n/**\n * Build the construction and fill in input/ out mint data on failure\n */\nexport const buildConstructionAndFill = async () => {\n  console.log(\"Partial build started\");\n  console.log(globalStore.state.construction);\n  try {\n    if (globalStore.state.malloc) {\n      const ret = await globalStore.state.malloc.buildWithFill(\n        globalStore.state.construction,\n        MallocSPLBuildActionMap\n      );\n      console.log(\"Partial build ended\");\n      const state = globalStore.state;\n      state.construction.actionDatas = ret.filledNonSpecific.actionDatas;\n      globalStore.setState({\n        ...state,\n      });\n    }\n  } catch (e: any) {\n    if (e?.type === MallocErrorTypes.MALLOC_ACTION_BUILDER) {\n      const filled = (e as MallocActionBuilderError)\n        .filledNonSpecificConstruction;\n      if (filled) {\n        const state = globalStore.state;\n        state.construction = filled;\n        globalStore.setState({\n          ...state,\n        });\n      }\n    }\n    console.log(\"Partial build ended\");\n    throw e;\n  }\n};\n\nexport const setMallocError = (\n  e: any | MallocError,\n  state: MallocState,\n  currErrorState: ErrorState\n) => {\n  console.error(\"Error building flow\", e);\n  let actionName: string | undefined = currErrorState.failedAction;\n  if (\n    (e as MallocError).mallocErrorMarker &&\n    (e as MallocError).type === MallocErrorTypes.MALLOC_RUNNER\n  ) {\n    actionName = (e as MallocRunnerError).actionName;\n    if (actionName) {\n      state.context.nodes[actionName].failedRunning = true;\n      state.context.nodes[actionName].successfullyRan = false;\n    }\n  }\n\n  state.loading = undefined;\n  globalStore.setState({\n    ...state,\n  });\n  errorStore.setState({\n    ...currErrorState,\n    failedAction: actionName,\n    changeToggle: !currErrorState.changeToggle,\n    message: e?.message || `An unexpected error occurred: ${e}`,\n  });\n};\n\nexport const tryPartialBuild = async (state: MallocState) => {\n  try {\n    await buildConstructionAndFill();\n  } catch (e: any) {\n    setMallocError(e, state, errorStore.state);\n  }\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const getMallocSdk = (wallet: anchor.Provider): MallocSdk => {\n  return new MallocSdk(\n    new PublicKey(getConstants().MALLOC_PROGRAM_ID || \"\"),\n    wallet,\n    \"mainnet-beta\"\n  );\n};\n\nconst getRunOpts = (state: MallocState): RunConstructionOpts => {\n  return {\n    onTxDone: (curr, total, actionNames) => {\n      if (actionNames) {\n        console.log(\"ACTIONS SUCCESSFULLY RAN\", actionNames);\n        actionNames.map((actionSuccess) => {\n          state.context.nodes[actionSuccess].successfullyRan = true;\n          state.context.nodes[actionSuccess].failedRunning = false;\n        });\n      }\n      state.loading = {\n        progress: curr,\n        max: total,\n      };\n      globalStore.setState(state);\n    },\n\n    retryTxOnTimeout: 1,\n    customTxTimeoutMs: 20 * 1000,\n    commitment: {\n      skipPreflight: true,\n      commitment: \"single\",\n    },\n  };\n};\n\nexport const runFlow = async (\n  state: MallocState,\n  wallet: AnchorWallet,\n  setLoading: (v: boolean) => void,\n  rerunFromAction?: string\n) => {\n  if (!state.malloc) {\n    alert(\"Please connect your wallet before running a flow\");\n    return;\n  }\n  setLoading(true);\n  const initialMints = Object.keys(state.construction.source.mints);\n  const initTokenAccounts = await Promise.all(\n    initialMints.map((mint) =>\n      utils.tokens.getTokenAccountUsedByMalloc(wallet.publicKey, mint)\n    )\n  );\n\n  // Reset all the actions which ran successfully\n  if (!rerunFromAction) {\n    Object.keys(state.construction.actionDatas).map((actionName) => {\n      state.context.nodes[actionName].successfullyRan = false;\n      state.context.nodes[actionName].failedRunning = false;\n    });\n    globalStore.setState(state);\n  }\n\n  try {\n    if (rerunFromAction) {\n      const constrSigner = getConstructionSignerFromStorage();\n      if (!constrSigner) {\n        alert(\"Cannot rerun a flow which has yet to run\");\n        setLoading(false);\n        return;\n      }\n      const built = await state.malloc.build(\n        state.construction,\n        MallocSPLBuildActionMap,\n        { cleanupAtEnd: true }\n      );\n      const compiledInst = await state.malloc.compileConstruction({\n        construction: built,\n        actionMap: MallocSPLBuildActionMap,\n        amountInAccounts: initTokenAccounts,\n        opts: {\n          cleanupAtEnd: true,\n          constructionAccount: constrSigner,\n        },\n      });\n      await state.malloc.runConstructionFromAction(\n        compiledInst,\n        rerunFromAction,\n        getRunOpts(state)\n      );\n    } else {\n      const built = await state.malloc.build(\n        state.construction,\n        MallocSPLBuildActionMap,\n        { cleanupAtEnd: true }\n      );\n      const compiledInst = await state.malloc.compileConstruction({\n        construction: built,\n        actionMap: MallocSPLBuildActionMap,\n        amountInAccounts: initTokenAccounts,\n        opts: { cleanupAtEnd: true },\n      });\n      saveConstructionSigner(compiledInst.constructionSigner);\n      await state.malloc.runConstruction(compiledInst, getRunOpts(state));\n    }\n    alert(\"Flow ran successfully!\");\n\n    state.loading = undefined;\n    globalStore.setState(state);\n\n    // Reset the failed action status\n    errorStore.setState({\n      ...errorStore.state,\n      failedAction: undefined,\n    });\n  } catch (e: any | MallocError) {\n    console.error(\"An error occurred running the flow\", e);\n    setMallocError(e, state, errorStore.state);\n  }\n  setLoading(false);\n};\n","import fileDialog from \"file-dialog\";\n/* function to save JSON to file from browser\n * adapted from http://bgrins.github.io/devtools-snippets/#console-save\n * @param {Object} data -- json object to save\n * @param {String} file -- file name to save to\n */\nexport const saveStringToFile = (data: any, filename: string) => {\n  if (!data) {\n    console.error(\"No data\");\n    return;\n  }\n\n  if (!filename) filename = \"console.json\";\n\n  if (typeof data === \"object\") {\n    data = JSON.stringify(data, undefined, 4);\n  }\n\n  var blob = new Blob([data], { type: \"text/json\" }),\n    e = document.createEvent(\"MouseEvents\"),\n    a = document.createElement(\"a\");\n\n  a.download = filename;\n  a.href = window.URL.createObjectURL(blob);\n  a.dataset.downloadurl = [\"text/json\", a.download, a.href].join(\":\");\n  e.initMouseEvent(\n    \"click\",\n    true,\n    false,\n    window,\n    0,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    0,\n    null\n  );\n  a.dispatchEvent(e);\n};\n\nexport const getFileContent = async () => {\n\treturn await fileDialog({\n\t\taccept: 'application/json'\n\t})\n};\n","const default_flow = {\n  construction: {\n    actionDatas: {\n      swapToUsdc: {\n        action: {\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_SWAP\",\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          inputs: {\n            outMint: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n          },\n          nextActions: [{ lpDepositUsdcRay: 1 }],\n        },\n      },\n      lpDepositUsdcRay: {\n        action: {\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_LP_DEPOSIT\",\n          inputs: {},\n          nextActions: [{ farmUsdcRay: 1 }],\n        },\n      },\n      farmUsdcRay: {\n        action: {\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_LP_STAKE_FARM\",\n          inputs: {},\n          nextActions: [],\n        },\n      },\n      swapToRay: {\n        action: {\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_SWAP\",\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          inputs: {\n            outMint: \"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\",\n          },\n          nextActions: [{ lpDepositSolRay: 1, lpDepositUsdcRay: 1 }],\n        },\n      },\n      lpDepositSolRay: {\n        action: {\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_LP_DEPOSIT\",\n          inputs: { hasFarm: true },\n          nextActions: [{ farmSolRay: 1 }],\n        },\n      },\n      farmSolRay: {\n        action: {\n          actionPID: \"muZ8k7AinSTHUwyDU34FL9Ebfy2SdAPHFbMLpnUC6yM\",\n          actionTypeUID: \"MALLOC_SPL_RAYDIUM_LP_STAKE_FARM\",\n          inputs: {},\n          nextActions: [],\n        },\n      },\n    },\n    source: {\n      nextActions: {\n        swapToRay: 100,\n        lpDepositSolRay: 100,\n        swapToUsdc: 100,\n      },\n      mints: { So11111111111111111111111111111111111111112: \"2000\" },\n    },\n  },\n  savedContext: {\n    nodes: {\n      SOURCE: [-183.15625, -19],\n      swapToRay: [-60.15625, -37],\n      lpDepositSolRay: [-47.15625, -168],\n      swapToUsdc: [-52.15625, 79],\n      lpDepositUsdcRay: [50.84375, 10.984375],\n      farmUsdcRay: [203.84375, 14],\n      farmSolRay: [87.84375, -172],\n    },\n    translate: [316.5, 250],\n    scale: 1,\n  },\n};\n\nexport default default_flow;\n","import { Store, StoreEventType } from \"react-stores\";\n// import {\n//   Input,\n//   ActionEdge,\n//   NodeType,\n//   GraphType,\n//   SourceNodeInput,\n//   NextAction,\n//   HiddenInputData,\n//   InputClassNames as CellClassNames,\n// } from \"./interfaces\";\nimport { getFileContent, saveStringToFile } from \"./utils/files\";\nimport dummy from \"./dummy\";\nimport default_flow from \"./default-flow\";\nimport {\n  MallocSdk,\n  NonSpecificConstruction,\n  NonSpecificConstructionFilled,\n} from \"@malloc-protocol/sdk\";\nimport { P5State, dummyState } from \"./components/p5-classes\";\nimport {\n  inferContextFromConstruction,\n  saveContext,\n  savedContextState,\n} from \"./components/graph-visualizer\";\n\nexport interface MallocState {\n  malloc?: MallocSdk;\n  construction: NonSpecificConstructionFilled;\n  context: P5State;\n\n  loading?: {\n    progress: number;\n    max: number;\n  };\n}\n\nexport interface ErrorState {\n  failedAction?: string;\n  message?: string;\n  changeToggle: boolean;\n}\n\nconst initState: MallocState = {\n  construction: default_flow.construction,\n  context: dummyState,\n};\n\nconst initErrorState: ErrorState = {\n  changeToggle: false,\n};\n\nexport const globalStore = new Store<MallocState>(initState);\nexport const errorStore = new Store<ErrorState>(initErrorState);\ninferContextFromConstruction(initState, default_flow.savedContext);\n\nexport const getGlobalStore = () => globalStore.state;\n\n// TODO: UPDATE\nexport const setGlobalStoreFromFile = async () => {\n  const fileContents = await getFileContent();\n  if (fileContents.length < 1) {\n    alert(\"Please select a file\");\n    return;\n  }\n\n  const parsed = JSON.parse(await fileContents[0].text()) as fileType;\n\n  let state = globalStore.state;\n  state.construction = parsed.construction;\n  inferContextFromConstruction(state, parsed.savedContext);\n  globalStore.setState({ ...state });\n  console.log(parsed);\n\n  // // TODO: use have the input be the nonspecific construction (and validated via malloc sdk) and then have a function which interpolates\n  // const parsed = JSON.parse(\n  //   await fileContents[0].text()\n  // ) as NonSpecificConstruction;\n  // const state = globalStore.state;\n  // state.construction = parsed;\n  // inferContextFromConstruction(state);\n  // globalStore.setState({ ...state });\n  // console.log(parsed);\n  // // // Set the token account in to be undefined\n  // // parsed.graph[SOURCE_NODE_ID].input[0][1].value = \"\";\n  // // globalStore.setState(parsed);\n};\n\ninterface fileType {\n  construction: NonSpecificConstruction;\n  savedContext: savedContextState;\n}\n\nexport const downloadGlobalStore = async () => {\n  let file: fileType = {\n    construction: globalStore.state.construction,\n    savedContext: saveContext(globalStore.state),\n  };\n\n  console.log(file);\n\n  await saveStringToFile(JSON.stringify(file), \"flow.json\");\n};\n\nglobalStore.on(StoreEventType.Update, () =>\n  console.info(new Date(), \"Updated Global Store\")\n);\n","import { Keypair, Signer } from \"@solana/web3.js\";\n\nconst CONSTRUCTION_KEY = \"ConstructionSigner\";\n\nexport const saveConstructionSigner = (construction: Signer) => {\n  window.localStorage.setItem(\n    CONSTRUCTION_KEY,\n    JSON.stringify([...construction.secretKey])\n  );\n};\n\nexport const getConstructionSignerFromStorage = (): Signer | undefined => {\n  const k = window.localStorage.getItem(CONSTRUCTION_KEY);\n  if (!k) return undefined;\n  const arr: number[] = JSON.parse(k);\n  const sk = new Uint8Array(arr);\n  return Keypair.fromSecretKey(sk);\n};\n","export const GREEN_SUCCESS = \"#B4EA69\";\nexport const RED_FAIL = \"#F14A21\";\n\n// follows from app.css colors\nexport const style = getComputedStyle(document.body);\nexport const LIGHT_1 = style.getPropertyValue(\"--light-1\");\nexport const LIGHT_2 = style.getPropertyValue(\"--light-2\");\nexport const GREEN_1 = style.getPropertyValue(\"--green-1\");\nexport const GREEN_1_transparent = GREEN_1 + \"55\";\nexport const GREEN_2 = style.getPropertyValue(\"--green-2\");\nexport const DARK_1 = style.getPropertyValue(\"--dark-1\");\nexport const DARK_2 = style.getPropertyValue(\"--dark-2\");\nexport const DARK_3 = style.getPropertyValue(\"--dark-3\");\n","export const SOURCE_NAME = \"SOURCE\"\nexport const getConstants = (env=\"mainnet-beta\") => {\n  switch (env) {\n    case \"mainnet-beta\":\n      return {\n        solana: {\n          RPC: \"https://ssc-dao.genesysgo.net/\",\n          // RPC: 'https://api.mainnet-beta.solana.com',\n          NETWORK: env,\n        },\n      };\n    case \"devnet\":\n      return {\n        MALLOC_PROGRAM_ID: \"9i4MAnhYagLr1vEo5jdmLehRe8Sm5Lx8fHaQNJfbFCve\",\n        mallocSpl: {\n          TRANSFER_PROGRAM_ID: \"ETpyJNQLorJbAcrPQpM9bkYxYMakegBh93kqZ1KnTBjr\",\n          SWAP_PROGRAM_ID: \"7T6seoCvCQeUeSTf2EAwX5SnyrZvX7BFUMHi74ZodBKH\",\n          DUMMY_PASS_THROUGH: \"DBhGd4VREBAw14vV1yaLXfCTtanPBwQfEErg1fe27diJ\",\n          MINT_TO: \"77WQMNHSBe6BNdMY8R1FD4JX89o2fXr5FhKNerTcJsHJ\",\n          SOLEND_ACTION: \"BVmJHQLHAAdgALGi6rdGxdsk5ate41kbpDMGL9XAVanP\",\n        },\n        projectSerum: {\n          DEX_PROGRAM_ID: \"DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY\",\n        },\n        demo: {\n          FAKE_USDC: \"AkzN2jJrorpUY2ApfL2UsBeTfuv1XHFKGLQurZJg6BhN\",\n          FAKE_USDC_GD: \"2BB7fDrLgBNSMCLqD835GisCHrHrGHsS8SJr6brtnWk2\",\n          FAKE_TOKEN_A: \"9GmQdigrAFdX67EMrVFwMepEN8rEdMdp8CPUEPJRY8sj\",\n        },\n        INITIAL_SPLITTER_ID_UUID: \"initial\",\n        solana: {\n          RPC: \"https://explorer-api.devnet.solana.com\",\n          NETWORK: env,\n        },\n      };\n\n    default:\n      throw \"Unexpected env\";\n  }\n  throw \"Unexpected env\";\n};\n"],"sourceRoot":""}