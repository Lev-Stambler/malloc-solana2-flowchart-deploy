{"version":3,"sources":["../../../malloc-core/ts-packages/malloc-sdk/lib/index.ts","interfaces.ts","utils/files.ts","utils/graph.ts","globalStore.ts","../../../malloc-spl/src/index.ts","utils/action-types.ts","components/node-selector.tsx","state/flowchart-store.ts","utils/spl-tokens.ts","utils/anchor.ts","components/tokens/TokenAccountChooser.tsx","components/table/table-cells.tsx","components/node-info.tsx","components/graph-visualizer.jsx","utils/errors.ts","utils/sdk-interpelator.ts","components/usdc-airdrop/perform-usdc-airdrop.ts","components/node-visualizer.tsx","components/tablegui.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","../../../malloc-spl/src/swap/swap-interfaces.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/utils/tokens.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/constants.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/utils/object.ts","utils/malloc.ts","../../../malloc-spl/src/mint/index.ts","../../../malloc-spl/src/mint-to/index.ts","../../../malloc-spl/src/solend/index.ts","../../../malloc-spl/src/swap/index.ts","../../../malloc-spl/src/transfer/index.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/graph-utils.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/solana-utils.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/malloc-sdk.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/interfaces/index.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/builder/index.ts","config/constants.ts","../../../malloc-core/ts-packages/malloc-sdk/lib/utils/serde.ts"],"names":["InputClassNames","saveStringToFile","data","filename","JSON","stringify","undefined","blob","Blob","type","e","document","createEvent","a","createElement","download","href","window","URL","createObjectURL","dataset","downloadurl","join","initMouseEvent","dispatchEvent","console","error","getFileContent","fileDialog","accept","getSourceNode","g","SOURCE_NODE_ID","getSourceNodeAccount","inp","value","getSourceNodeAmount","getAllVertices","Object","keys","getVertexType","v","split","getNextVertices","vertex","next_actions","map","nextActionSet","slice","nextAction","amount","parseInt","id","filter","i","getNextActionRow","nextMintIdx","className","actionVertex","wholeNumber","INIT_NEXT_ACTION","readOnly","initState","selected","counter","new_action","graph","sourceMint","hiddenInputData","input","CellClassNames","tokenAccountOnlyInit","fractionNumber","globalStore","Store","setGlobalStoreFromFile","fileContents","length","alert","text","parsed","parse","log","setState","downloadGlobalStore","state","MallocSPLBuildActionMap","addActionToMap","actionLib","actionTypeUID","SwapAction","TransferAction","MintAction","MintAndMintToAction","SolendAction","ACTION_TYPES","getActionTypeUIDFromVertex","vertexType","getActionPIDFromVertex","getConstants","mallocSpl","SWAP_PROGRAM_ID","TRANSFER_PROGRAM_ID","MINT_TO","SOLEND_ACTION","NodeSelector","useStore","actions","size","aria-label","onChange","target","key","index","onClick","node_id","toString","init","other","mintAccount","hiddenData","rent","SYSVAR_RENT_PUBKEY","toBase58","serumDexProgramId","projectSerum","DEX_PROGRAM_ID","getInitInputForActionType","new_node","Array","expectedNumberOfOutMints","solanaSplStore","derivedTokenAccounts","tokenList","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","getTokenLists","provider","getCached","TokenListProvider","resolve","tokens","filterByClusterSlug","solana","NETWORK","getList","getDemoTokenInfo","usdcMint","PublicKey","demo","FAKE_USDC","aMint","FAKE_TOKEN_A","getMintInfo","usdcInfo","aInfo","chainId","name","symbol","address","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","associated","findAllAssociatedTokenAddress","mints","Promise","all","m","getTokenAccountInfo","tokenAddr","connection","getAccountInfo","account","parseTokenAccount","mintAddr","parseMintAccount","getProvider","wallet","Provider","Connection","RPC","getModalStyle","top","left","transform","useStyles","makeStyles","theme","createStyles","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","TokenLine","tok","setChoosen","style","display","gridTemplateColumns","gap","info","shortenAddress","mint","balance","utils","toReadableNumber","u64","decimals","TokenAccountChooser","props","onlyWithInitializedAccounts","classes","React","useState","modalStyle","open","setOpen","customTokenAccount","setCustomTokenAccount","customMintAccount","setCustomMintAccount","useAnchorWallet","choosen","solanaSplStoreHook","loadTokens","publicKey","t","associatedAddr","addr","bals","accounts","accountsFiltered","accountsMapped","useEffect","useRef","handleClose","onClose","choosenType","tokenAccount","tokAccountData","mintInfo","bal","body","onBlur","currentTarget","blur","height","zIndex","justifyItems","justifyContent","alignItems","overflow","maxHeight","includeCustomTokenAccount","TextField","label","onFocus","buttonText","InputEditor","Input","cell","isWholeNumber","isFractionNumber","TokenOrMintEditor","onlyWithInitialized","splTok","ActionVertexEditor","vertices","initIdx","indexOf","splice","getActionVertices","active","setActive","pause","setPause","paused","Select","labelId","MenuItem","onMouseOver","TableCellEditor","nextActionMintIdx","mintAccountOnlyInit","NodeInfo","setInput","mintName","sourceAccount","deleted_key","object","deepCloneObject","x","hideColumnIndicators","hideRowIndicators","DataEditor","next_action_by_mint","temp","GraphVisualizer","svgRef","nodes","edges","node","node_edges","val","push","source","concat","links","types","color","d3","linkArc","d","Math","hypot","y","create","simulation","force","strength","svg","current","attr","append","selectAll","link","location","call","on","event","alphaTarget","restart","fx","fy","drag","clone","lower","ref","handleError","errorType","eCast","msg","fullError","ErrorGenerator","tokAccount","newFrontendError","PID","MALLOC_PROGRAM_ID","getMallocSdk","MallocSdk","getInputFromActionInput","actionInput","ret","inpItem","getActionData","actionId","allActionIds","incomingVertices","some","nextEdgeSet","includes","getAllIncomingVertexIds","nextNodes","next","actionIdx","fraction","getNextNodes","buildActionInputs","actionPID","actionMetadata","ripeAmount","_buildNonUserSpecificConstruction","hiddenInputDatas","actionVertices","initialSplits","initialActionIndices","actionDatas","getInitialInfo","inAccount","sourceNode","tokenInInfo","amountInF","parseFloat","amountIn","fromReadableNumber","nextFromSource","initialMint","n","compileStateIntoSDKInput","preferredTokenAccounts","nonUserSpecific","builder","buildConstructionFromNonUserSpecific","construction","amountInAccount","opts","run","sdk","buildTxs","sendRequests","prepareCommitment","skipPreflight","preflightCommitment","commitment","actionCommitment","compileAndRunMallocSDK","buildInst","txs","richUSDCAirdroperSK","Uint8Array","richUSDCSigner","Wallet","Keypair","fromSecretKey","getRichUsdcProvider","endpointURL","performUsdcAirdrop","userAddr","tryCreateAssociatedAccount","airdrop","FAKE_USDC_GD","instr","Token","createAssociatedTokenAccountInstruction","tx","Transaction","add","send","gdUsdc","airDropToTokenAccounts","amountAirdrop","transferTxs","createTransferInstruction","NodeVisualizer","loadingAirdrop","setLoadingAirdrop","loadingCompileAndRun","setLoadingCompileAndRun","disabled","then","_","catch","TableGUI","ConnectButton","styled","WalletDialogButton","Home","span","setBalance","message","severity","alertState","setAlertState","useWallet","getBalance","LAMPORTS_PER_SOL","connected","marginTop","toLocaleString","Snackbar","autoHideDuration","Alert","config","anchor","network","rpcHost","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSolletWallet","autoConnect","txTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","Side","SwapInstructionByte","tryCreateAssociatedAccountInst","owner","payer","inst","associateTokAccount","transferToTx","destination","authority","signer","secretKey","transfer","signers","getTokenAccountUsedByMalloc","tokenAuthority","createTokenAccountsForActions","fundingAccount","getMintsNoDuplicates","tokenCreationOptions","skipOutTokenCreations","skipIdxs","tokenMintOuts","forEach","skipInTokenCreation","tokenMintIn","flat","pk","associatedToSignerAccount","insts","createTokTx","Set","pkToStr","number","wholeStr","substring","fractionStr","padStart","pattern","test","replace","formatWithCommas","wholePart","fracPart","Error","padEnd","CONSTRUCTION_ACCOUNT_SIZE","LIFETIME_RESULT_ACCOUNT_MS","ONE_HOUR_MS","LIFETIME_CONSTRUCTION_ACCOUNT_MS","LAMPORTS_PER_EPOCH","MS_PER_EPOCH","obj","constructor","chars","buildIsolatedMintAction","inMint","inTokenAccount","dummyPassThroughActionPID","amountOutExpanded","amountOut","outTokenAccount","serializeData","createMintInstructions","addDefaultTokAccounts","actionData","tokenAccountOuts","actionAccounts","actionProgram","additionalSigners","instructions","isolatedAction","Buffer","from","buildIsolatedAction","ActionData","serde","Assignable","schema","Map","kind","fields","inputMint","inputTokenAccount","mintToPID","authoritySigner","authoritySecret","createMintSecretKey","associateTokAccountRecipient","optionalAmountWholeNumber","initialSupply","atStartTxs","borshSer","amount_override","isWriteable","isSigner","atStartOfPrepareTxs","solendActionPID","mintIn","tokenAccountIn","solendConfig","solend","assetSymbol","assets","find","asset","mintAddress","mainMarket","markets","reserve","reserves","r","collateralMint","collateralMintAddress","destinationCollateralAccount","oracle","oracles","o","refreshReserveInstruction","priceAddress","refreshData","programID","liquidityAddress","authorityAddress","SYSVAR_CLOCK_PUBKEY","TransactionInstruction","programId","pubkey","isWritable","switchboardFeedAddress","buildIsolatedSwapAction","swapPID","outMint","buildSwapAccounts","swapInfo","packSwapData","BasicSwap","side","minOut","swapAccountsToActionAccounts","swapAccounts","preActionTxs","openOrderInitTx","serumDexId","getMarket","marketRet","marketPk","Market","load","marketSel","getOpenOrdersAccount","openOrderAccountData","getVaultOwnerAndNonce","decoded","ownAddress","vaultSigner","coinWallet","Bid","pcWallet","market","requestQueue","eventQueue","bids","asks","coinVault","baseVault","pcVault","quoteVault","openOrders","openOrdersAccount","openOrderPk","orderPayerTokenAccount","dexProgram","tokenProgram","openOrderTx","dexPID","OpenOrders","findForMarketAndOwner","openOrderAccount","Account","openOrdersTx","makeCreateAccountTransaction","Ask","getMarketsFromBaseMinttoQuoteMint","marketPks","instrByte","packedMinOut","toArrayLike","referralAccount","outAccount","marketPublicKey","dexProgramId","nonce","BN","toNumber","createProgramAddress","vaultOwner","iaddn","baseMint","quoteMint","serumProgId","getLayout","findAccountsByMints","transferPID","recipient","recipientWallet","createTokInstr","equals","buildSeqListOfActionCalls","actionMetas","initIndices","initHitCounts","fill","simulateDAG","hitCounts","toHit","newHitCounts","getOccurrence","newRipeActions","newToHit","array","calculateRent","durationMs","ceil","mallocProgram","this","Program","MALLOC_IDL","_authority","_inAuth","amountInAuthority","tokenAccounts","tokenTxs","createAndInitConstruction","constructionTx","addConstructionActionsTx","addActionsToConstruction","checkMintsAreTheSame","initMint","transferTx","prepareConstructionTx","prepareConstruction","hitOrder","initResultAccount","ACTION_TEMPLATE_IDL","initResultAccounts","actionCtxFilled","action","toAdd","ctx","resultAccount","processTxs","hitIndex","processAction","getAllAtStartOfPrepareTxs","txsPrepare","txsActionsCalls","txsActionCalls","resultAccounts","fetch","constructionState","actionSerialize","nextNode","actionCallSerialize","numbTimesHit","callAmount","actionCalls","readyCallIdxList","constructionData","options","sendAll","txHashesPrepare","onPrepareAccountsDone","txHashes","program","numbActions","ConstructionAccount","web3","generate","transaction","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","lamports","initConstruction","actionMetadataWithU64","addActions","initActionIdx","initActionSplits","actionAccountsCtx","auth","tokauth","signersIsolated","actionCtxProxy","actionTemplateProgram","numberOfPossibleOutputTokens","result","getMinimumBalanceForRentExemption","resultSize","calcSizeResultAccount","numberOfActions","every","getMintAccountFromPriorActions","idx","idxInNextNodes","item","getPreviousActions","prev","firstMint","buildActionMap","initTokenAccount","initMintAccount","orderActionsHit","buildFN","mergeConstructions","parentConstruction","childConstruction","appendChildInitToParent","childConstructionCloned","parentConstructionClone","newActionDatasArray","offset","nextNodeSet","childInitialActionsToAdd","appendToInitial","splitFrac","indexInParent","nextNodeIdx","c","env","process","DUMMY_PASS_THROUGH","INITIAL_SPLITTER_ID_UUID","properties"],"mappings":"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","file":"static/js/main.17bddd14.chunk.js","sourcesContent":["export * from \"./malloc-sdk\";\nexport * from \"./interfaces\";\nexport * as utils from \"./utils\";\nexport * as serializer from \"./serializer\";\nexport * as builder from './builder'\nimport _MallocIdl from \"./idls/malloc.json\";\nexport const MallocIdl = _MallocIdl;\n","import { MintInfo, u64 } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { FlowElement } from \"react-flow-renderer\";\nimport internal from \"stream\";\n\nexport enum InputClassNames {\n  actionVertex = \"ACTION_VERTEX\",\n  tokenAccount = \"TOKEN_ACCOUNT\",\n  mintAccount = \"MINT_ACCOUNT\",\n  tokenAccountOnlyInit = \"TOKEN_ACCOUNT_ONLY_INIT\",\n  mintAccountOnlyInit = \"MINT_ACCOUNT_ONLY_INIT\",\n  wholeNumber = \"WHOLE_NUMBER\",\n  fractionNumber = \"FRACTION_NUMBER\",\n  other = \"OTHER\",\n}\n\nexport type SPLToken = { account: string } & {\n  info: Partial<TokenInfo> & { decimals: number; mint: PublicKey };\n  balance: string | u64 | null;\n};\n\nexport type NextAction = [\n  { value: string; readOnly?: boolean; className?: string },\n  { value: string; readOnly?: boolean; className?: string }\n];\n\nexport type Input = [\n  { value: string; readOnly: true },\n  { value: string; className?: string }\n][];\nexport type SourceNodeInput = [\n  [{ value: string; readOnly: true }, { value: string; className?: string }],\n  [{ value: string; readOnly: true }, { value: string; className?: string }]\n];\nexport type ActionEdge = { id: string; amount: number };\nexport type NodeType = { input: Input; next_actions: NextAction[][] };\nexport type GraphType = { [id: string]: NodeType };\nexport type HiddenInputData = { [id: string]: any };\n","import fileDialog from \"file-dialog\";\n/* function to save JSON to file from browser\n * adapted from http://bgrins.github.io/devtools-snippets/#console-save\n * @param {Object} data -- json object to save\n * @param {String} file -- file name to save to\n */\nexport const saveStringToFile = (data: any, filename: string) => {\n  if (!data) {\n    console.error(\"No data\");\n    return;\n  }\n\n  if (!filename) filename = \"console.json\";\n\n  if (typeof data === \"object\") {\n    data = JSON.stringify(data, undefined, 4);\n  }\n\n  var blob = new Blob([data], { type: \"text/json\" }),\n    e = document.createEvent(\"MouseEvents\"),\n    a = document.createElement(\"a\");\n\n  a.download = filename;\n  a.href = window.URL.createObjectURL(blob);\n  a.dataset.downloadurl = [\"text/json\", a.download, a.href].join(\":\");\n  e.initMouseEvent(\n    \"click\",\n    true,\n    false,\n    window,\n    0,\n    0,\n    0,\n    0,\n    0,\n    false,\n    false,\n    false,\n    false,\n    0,\n    null\n  );\n  a.dispatchEvent(e);\n};\n\nexport const getFileContent = async () => {\n\treturn await fileDialog({\n\t\taccept: 'application/json'\n\t})\n};\n","import { SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport { INIT_NEXT_ACTION, SOURCE_NODE_ID } from \"src/globalStore\";\nimport {\n  ActionEdge,\n  GraphType,\n  HiddenInputData,\n  Input,\n  InputClassNames,\n  NextAction,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { ActionTypes } from \"./action-types\";\n\nexport const getSourceNode = (g: GraphType) => g[SOURCE_NODE_ID];\n\nexport const getSourceNodeAccount = (inp: SourceNodeInput) => inp[0][1].value;\nexport const getSourceNodeAmount = (inp: SourceNodeInput) => inp[1][1].value;\nexport const getAllVertices = (g: GraphType): string[] => Object.keys(g);\nexport const getActionVertices = (g: GraphType): string[] => {\n  const all = Object.keys(g);\n  const initIdx = all.indexOf(SOURCE_NODE_ID);\n  all.splice(initIdx, 1);\n  return all;\n};\n\nexport const getVertexType = (v: string): ActionTypes =>\n  v.split(\"-\")[0] as ActionTypes;\n\n// Discard the first element as those are just labels\nexport const getNextVertices = (\n  g: GraphType,\n  vertex: string\n): ActionEdge[][] => {\n  const nextActions = g[vertex].next_actions;\n  const ret = nextActions.map((nextActionSet) => {\n    const nextActionRemoveLabel = nextActionSet.slice(1);\n    const edgesRet = nextActionRemoveLabel.map((nextAction: NextAction) => {\n      if (!nextAction[1].value && !nextAction[0].value) {\n        return null;\n      }\n      return {\n        amount: parseInt(nextAction[1].value),\n        id: nextAction[0].value,\n      } as ActionEdge;\n    });\n    // Remove empty rows\n    return edgesRet.filter((e, i) => e !== null) as ActionEdge[];\n  });\n  return ret;\n};\n\nexport const getNextActionRow = (nextMintIdx: number) => {\n  return [\n    { value: \"\", className: `${InputClassNames.actionVertex}-${nextMintIdx}` },\n    { value: \"\", className: InputClassNames.wholeNumber },\n  ] as NextAction;\n};\n","import { Store } from \"react-stores\";\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  SourceNodeInput,\n  NextAction,\n  HiddenInputData,\n  InputClassNames as CellClassNames,\n} from \"src/interfaces\";\nimport { getFileContent, saveStringToFile } from \"./utils/files\";\nimport { getNextActionRow } from \"./utils/graph\";\n\nexport interface MallocState {\n  selected: string;\n  counter: number;\n  new_action: string;\n  graph: GraphType;\n  sourceMint: string;\n  hiddenInputData: HiddenInputData;\n}\n\nexport const SOURCE_NODE_ID = \"SOURCE-0\";\n\nexport const INIT_NEXT_ACTION: NextAction[] = [\n  [\n    { value: \"NextActionID\", readOnly: true },\n    { value: \"Parts of 1,000\", readOnly: true },\n  ],\n  getNextActionRow(0),\n];\n\nconst initState: MallocState = {\n  selected: SOURCE_NODE_ID,\n  counter: 1,\n  new_action: \"SERUM_SWAP\",\n  graph: {},\n  sourceMint: \"<UNSET>\",\n  hiddenInputData: {},\n};\n\ninitState.graph[SOURCE_NODE_ID] = {\n  input: [\n    [\n      {\n        value: \"InputTokenAccount\",\n        readOnly: true,\n      },\n      { value: \"\", className: CellClassNames.tokenAccountOnlyInit },\n    ],\n    [\n      {\n        value: \"Amount\",\n        readOnly: true,\n      },\n      { value: \"\", className: CellClassNames.fractionNumber },\n    ],\n  ] as SourceNodeInput,\n  next_actions: [INIT_NEXT_ACTION],\n};\n\nexport const globalStore = new Store<MallocState>(initState);\n\nexport const getGlobalStore = () => globalStore.state;\n\nexport const setGlobalStoreFromFile = async () => {\n  const fileContents = await getFileContent();\n  if (fileContents.length < 1) {\n    alert(\"Please select a file\");\n    return;\n  }\n  // TODO: use have the input be the nonspecific construction (and validated via malloc sdk) and then have a function which interpolates\n  const parsed = JSON.parse(await fileContents[0].text()) as MallocState;\n  console.log(parsed);\n  // Set the token account in to be undefined\n  parsed.graph[SOURCE_NODE_ID].input[0][1].value = \"\";\n  globalStore.setState(parsed);\n};\n\nexport const downloadGlobalStore = async () => {\n  await saveStringToFile(JSON.stringify(globalStore.state), \"flow.json\");\n};\n","import { ActionLib, BuildActionMap } from \"@malloc/sdk\";\nimport MintAction from \"./mint\";\nimport { MintAndMintToAction } from \"./mint-to\";\nimport { SolendAction } from \"./solend\";\nimport SwapAction from \"./swap\";\nimport { TransferAction } from \"./transfer\";\n\nexport { SwapAction } from \"./swap\";\nexport { TransferAction } from \"./transfer\";\nexport { MintAction } from \"./mint\";\nexport { MintAndMintToAction } from \"./mint-to\";\nexport { SolendAction } from \"./solend\";\n\nexport const MallocSPLBuildActionMap: BuildActionMap = {};\n\n// Add the spl actions to the default mapping\nconst addActionToMap = (actionLib: ActionLib<any>) => {\n  MallocSPLBuildActionMap[actionLib.actionTypeUID] = actionLib;\n};\n\naddActionToMap(SwapAction);\naddActionToMap(TransferAction);\naddActionToMap(MintAction);\naddActionToMap(MintAndMintToAction);\naddActionToMap(SolendAction);\n","import { utils } from \"@malloc/sdk\";\nimport {\n  MintAction,\n  MintAndMintToAction,\n  SolendAction,\n  SwapAction,\n  TransferAction,\n} from \"@malloc/spl\";\nimport { SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport {\n  HiddenInputData,\n  Input,\n  InputClassNames,\n  NextAction,\n} from \"src/interfaces\";\nimport { getVertexType } from \"./graph\";\n\nexport type ActionTypes =\n  | \"SERUM_SWAP\"\n  | \"TRANSFER\"\n  | \"MINT\"\n  | \"SOLEND DEPOSIT LIQUIDITY\";\nexport const ACTION_TYPES: ActionTypes[] = [\n  \"SERUM_SWAP\",\n  \"TRANSFER\",\n  \"MINT\",\n  \"SOLEND DEPOSIT LIQUIDITY\",\n];\n\nexport const getActionTypeUIDFromVertex = (vertexType: ActionTypes) => {\n  if (vertexType === \"SERUM_SWAP\") {\n    return SwapAction.actionTypeUID;\n  } else if (vertexType === \"TRANSFER\") {\n    return TransferAction.actionTypeUID;\n  } else if (vertexType === \"MINT\") {\n    return MintAndMintToAction.actionTypeUID;\n  } else if (vertexType === \"SOLEND DEPOSIT LIQUIDITY\") {\n    return SolendAction.actionTypeUID;\n  } else throw `unexpected vertex id of ${vertexType}`;\n};\n\n// TODO: move this over to Malloc SPL and use action type uids instead\nexport const getActionPIDFromVertex = (vertexType: ActionTypes) => {\n  if (vertexType === \"SERUM_SWAP\") {\n    return getConstants().mallocSpl.SWAP_PROGRAM_ID;\n  } else if (vertexType === \"TRANSFER\") {\n    return getConstants().mallocSpl.TRANSFER_PROGRAM_ID;\n  } else if (vertexType === \"MINT\") {\n    return getConstants().mallocSpl.MINT_TO;\n  } else if (vertexType === \"SOLEND DEPOSIT LIQUIDITY\") {\n    return getConstants().mallocSpl.SOLEND_ACTION;\n  }\n  throw `unexpected vertex id of ${vertexType}`;\n};\n\nexport const getInitInputForActionType = (\n  type: ActionTypes\n): { input: Input; hiddenData?: HiddenInputData } => {\n  switch (type) {\n    case \"SOLEND DEPOSIT LIQUIDITY\":\n      return {\n        input: [],\n      };\n    case \"MINT\":\n      return {\n        input: [\n          [\n            {\n              value: \"decimals\",\n              readOnly: true,\n            },\n            {\n              value: \"6\",\n              className: InputClassNames.wholeNumber,\n            },\n          ],\n          [\n            {\n              value: \"initialSupply\",\n              readOnly: true,\n            },\n            {\n              value: \"\",\n              className: InputClassNames.fractionNumber,\n            },\n          ],\n        ],\n      };\n\n    case \"TRANSFER\":\n      return {\n        input: [\n          [\n            {\n              value: \"recipientWallet\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.other },\n          ],\n        ],\n      };\n\n    case \"SERUM_SWAP\":\n      return {\n        input: [\n          [\n            {\n              value: \"outMint\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.mintAccount },\n          ],\n          [\n            {\n              value: \"minOut\",\n              readOnly: true,\n            },\n            { value: \"\", className: InputClassNames.wholeNumber },\n          ],\n        ],\n        hiddenData: {\n          rent: SYSVAR_RENT_PUBKEY.toBase58(),\n          serumDexProgramId: getConstants().projectSerum.DEX_PROGRAM_ID,\n        },\n      };\n\n    default:\n      throw `Unexpected action type ${type}`;\n  }\n};\n\nexport const setHardCodedNextActions = (\n  nextActions: NextAction[]\n): NextAction[] => {\n  const data = utils.object.deepCloneObject(nextActions);\n  for (let x = 0; x < data.length; x++) {\n    // TODO: this shouldn't be hardcoded\n    if (getVertexType(data[x][0]!.value) === \"MINT\") {\n      data[x][1]!.value = \"0\";\n      data[x][1]!.readOnly = true;\n    }\n  }\n  return data;\n};\n","import React, { useState, FC } from \"react\";\nimport Spreadsheet from \"react-spreadsheet\";\n\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  NextAction,\n  InputClassNames,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { useStore } from \"react-stores\";\nimport {\n  downloadGlobalStore,\n  globalStore,\n  INIT_NEXT_ACTION,\n  setGlobalStoreFromFile,\n  SOURCE_NODE_ID,\n} from \"../globalStore\";\nimport { compileAndRunMallocSDK } from \"src/utils/sdk-interpelator\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { getSourceNodeAccount } from \"src/utils/graph\";\nimport { MallocSPLBuildActionMap } from \"@malloc/spl\";\nimport { TableCellEditor } from \"./table/table-cells\";\nimport { performUsdcAirdrop } from \"./usdc-airdrop/perform-usdc-airdrop\";\nimport { saveStringToFile } from \"src/utils/files\";\nimport { Satellite } from \"@material-ui/icons\";\nimport { getMintInfo, getTokenAccountInfo } from \"src/utils/spl-tokens\";\nimport { getProvider } from \"src/utils/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  ActionTypes,\n  ACTION_TYPES,\n  getActionTypeUIDFromVertex,\n  getInitInputForActionType,\n} from \"src/utils/action-types\";\n\nconst NodeSelector: FC = () => {\n  const state = useStore(globalStore);\n  const actions = ACTION_TYPES;\n\n  return (\n    <div className=\"card\">\n      <h2>Node Id</h2>\n\n      <select\n        id=\"node-selector\"\n        className=\"form-select\"\n        size={5}\n        aria-label=\"size 3 select example\"\n        onChange={(e) => {\n          globalStore.setState({ selected: e.target.value });\n        }}\n      >\n        {Object.keys(state.graph).map(function (key, value) {\n          return <option value={key}>{key}</option>;\n        })}\n      </select>\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <select\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n            onChange={(e) => {\n              globalStore.setState({ new_action: e.target.value });\n            }}\n          >\n            {actions.map((value, index) => {\n              return <option value={value}>{value}</option>;\n            })}\n          </select>\n        </div>\n        <div className=\"col-2 justify-content-center\">\n          <button\n            onClick={() => {\n              let node_id = state.new_action + \"-\" + state.counter.toString();\n              const init = getInitInputForActionType(\n                state.new_action as ActionTypes\n              );\n              let new_node: NodeType = {\n                input: init.input,\n                // TODO: make a seperate fn\n                next_actions: [\n                  ...Array(\n                    MallocSPLBuildActionMap[\n                      getActionTypeUIDFromVertex(\n                        state.new_action as ActionTypes\n                      )\n                    ].expectedNumberOfOutMints\n                  ),\n                ].map((i) => INIT_NEXT_ACTION),\n              };\n              state.graph[node_id] = new_node;\n              state.hiddenInputData[node_id] = init.hiddenData || {};\n              globalStore.setState({\n                ...state,\n                // selected: node_id,\n                counter: state.counter + 1,\n                graph: { ...state.graph },\n              });\n            }}\n          >\n            add\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeSelector;\n","import { Elements, FlowElement } from \"react-flow-renderer\";\nimport { Store } from \"react-stores\";\nimport { SPLToken } from \"../interfaces\";\nimport {\n  AccountsArray,\n  Action,\n  IsolatedAction,\n} from \"../../../../malloc-core/ts-packages/malloc-sdk/lib/\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey, Signer } from \"@solana/web3.js\";\nimport { u64 } from \"@solana/spl-token\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\n\nexport interface IFlowChart {\n  elements: Elements<any>;\n  initSplits: number[];\n  initTokenAccount?: PublicKey;\n  initAmount: u64;\n}\n\nexport interface SolanaSpl {\n  derivedTokenAccounts: SPLToken[] | null;\n  tokenList: TokenInfo[] | null;\n}\n\nexport const solanaSplStore = new Store<SolanaSpl>({\n  derivedTokenAccounts: null,\n  tokenList: null,\n});\n","import { getProvider, Provider } from \"@project-serum/anchor\";\nimport { parseTokenAccount, parseMintAccount } from \"@project-serum/common\";\nimport {\n  AccountInfo,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  MintInfo,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport {\n  TokenListProvider,\n  TokenInfo,\n  TokenListContainer,\n} from \"@solana/spl-token-registry\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getConstants } from \"../config/constants\";\nimport { solanaSplStore } from \"../state/flowchart-store\";\n\n// TODO: where does this come from?\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID: PublicKey =\n  ASSOCIATED_TOKEN_PROGRAM_ID;\n\n// TODO: have a store for token metadata which has a list of all tokens as well as their metadata\n\n// See https://github.com/solana-labs/token-list\nexport const getTokenLists = async (\n  provider: Provider\n): Promise<TokenInfo[]> => {\n  const getCached = async () => {\n    if (solanaSplStore.state.tokenList) return solanaSplStore.state.tokenList;\n    const tokens = await new TokenListProvider().resolve();\n    const tokenList = tokens\n      .filterByClusterSlug(getConstants().solana.NETWORK)\n      .getList();\n    solanaSplStore.setState({\n      ...solanaSplStore.state,\n      tokenList,\n    });\n    return tokenList;\n  };\n  const tokenList = await getCached();\n\n  // Add in demo tokens\n  if (getConstants().solana.NETWORK === \"devnet\") {\n    return [...tokenList, ...(await getDemoTokenInfo(provider))];\n  } else {\n    return tokenList;\n  }\n};\n\nconst getDemoTokenInfo = async (provider: Provider): Promise<TokenInfo[]> => {\n  const usdcMint = new PublicKey(getConstants().demo.FAKE_USDC);\n  const aMint = new PublicKey(getConstants().demo.FAKE_TOKEN_A);\n  const usdcInfo = await getMintInfo(provider, usdcMint);\n  const aInfo = await getMintInfo(provider, aMint);\n  if (!usdcInfo || !aInfo) {\n    throw \"Expected info for these mints\";\n  }\n  return [\n    {\n      ...usdcInfo,\n      chainId: -1,\n      name: \"FAKE USDC\",\n      symbol: \"FUSDC\",\n      address: getConstants().demo.FAKE_USDC,\n    },\n    {\n      ...aInfo,\n      chainId: -1,\n      name: \"FAKE: A TOKEN\",\n      symbol: \"FA TOKEN\",\n      address: getConstants().demo.FAKE_TOKEN_A,\n    },\n  ];\n};\n\nexport const getTokenListContainer = async (\n  provider: Provider\n): Promise<TokenListContainer> =>\n  new TokenListContainer(await getTokenLists(provider));\n\n// See https://spl.solana.com/associated-token-account\nexport const findAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey | string\n): Promise<PublicKey> => {\n  const associated = await PublicKey.findProgramAddress(\n    [\n      walletAddress.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      new PublicKey(tokenMintAddress).toBuffer(),\n    ],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n  return associated[0];\n};\nexport const findAllAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  mints: (PublicKey | string)[]\n): Promise<PublicKey[]> =>\n  Promise.all(mints.map((m) => findAssociatedTokenAddress(walletAddress, m)));\n\nexport const getTokenAccountInfo = async (\n  provider: Provider,\n  tokenAddr: PublicKey\n): Promise<AccountInfo | null> => {\n  const account = await provider.connection.getAccountInfo(tokenAddr);\n  if (!account) return null;\n  try {\n    const data = parseTokenAccount(account.data);\n    return data;\n  } catch (e) {\n    console.error(\"An error occured parsing the data, returning null\", e);\n    return null;\n  }\n};\n\nexport const getMintInfo = async (\n  provider: Provider,\n  mintAddr: PublicKey\n): Promise<MintInfo | null> => {\n  const account = await provider.connection.getAccountInfo(mintAddr);\n  if (!account) return null;\n  return parseMintAccount(account.data);\n};\n","import { Provider } from \"@project-serum/anchor\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { Connection } from \"@solana/web3.js\";\nimport { getConstants } from \"../config/constants\";\n\nexport const getProvider = (wallet: AnchorWallet): Provider => {\n  return new Provider(new Connection(getConstants().solana.RPC), wallet, {});\n};\n","import React, { Ref, useRef } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useMemo } from \"react\";\nimport { useEffect } from \"react\";\nimport {\n  findAllAssociatedTokenAddress,\n  findAssociatedTokenAddress,\n  getMintInfo,\n  getTokenAccountInfo,\n  getTokenLists,\n} from \"../../utils/spl-tokens\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { SPLToken } from \"../../interfaces\";\nimport { shortenAddress } from \"../../utils/malloc\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { getProvider } from \"../../utils/anchor\";\nimport { isBundle } from \"typescript\";\nimport { useState } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { useStore } from \"react-stores\";\nimport { solanaSplStore } from \"../../state/flowchart-store\";\nimport { u64 } from \"@solana/spl-token\";\nimport { utils } from \"@malloc/sdk\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: \"absolute\",\n      width: \"auto\",\n      backgroundColor: theme.palette.background.paper,\n      border: \"2px solid #000\",\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\nconst TokenLine = ({\n  tok,\n  setChoosen,\n}: {\n  tok: SPLToken;\n  setChoosen: () => void;\n}) => {\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n        width: \"100%\",\n        gap: \"5px\",\n      }}\n    >\n      <button onClick={setChoosen}>Choose</button>\n      <div>{tok.info.name}</div>\n      <div>{shortenAddress(tok.info.mint.toBase58())}</div>\n      <div>\n        {shortenAddress(tok.account)}\n        {tok.balance ? \"\" : \" (currently nonexistent)\"}\n      </div>\n      <div>\n        {utils.tokens.toReadableNumber(\n          new u64(tok.balance || 0),\n          tok.info.decimals\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default function TokenAccountChooser(props: {\n  buttonText?: string;\n  onlyWithInitializedAccounts?: boolean;\n  onClose: (tok?: SPLToken) => void;\n  includeCustomTokenAccount?: boolean;\n}) {\n  const onlyWithInitializedAccounts = props.onlyWithInitializedAccounts ?? true;\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  const [customTokenAccount, setCustomTokenAccount] = React.useState(\"\");\n  const [customMintAccount, setCustomMintAccount] = React.useState(\"\");\n  const wallet = useAnchorWallet();\n  // If it is -1, then the custom state is choosen\n  const [choosen, setChoosen] = useState(-1);\n  const solanaSplStoreHook = useStore(solanaSplStore);\n\n  const provider = getProvider(wallet!);\n\n  const loadTokens = async () => {\n    const tokenList = await getTokenLists(provider);\n    const associatedAddr = await findAllAssociatedTokenAddress(\n      wallet?.publicKey!,\n      tokenList.map((t) => t.address)\n    );\n\n    const bals = await Promise.all(\n      associatedAddr.map(async (addr) => {\n        const data = await getTokenAccountInfo(provider, addr);\n        return data?.amount;\n      })\n    );\n    const accounts = associatedAddr.map((addr, i) => {\n      return {\n        account: addr.toBase58(),\n        info: tokenList[i],\n        balance: bals[i],\n      };\n    });\n    const accountsFiltered = onlyWithInitializedAccounts\n      ? accounts.filter((i) => i.balance)\n      : accounts;\n    const accountsMapped = accountsFiltered.map((i) => {\n      return {\n        ...i,\n        info: {\n          ...i.info,\n          mint: new PublicKey(i.info.address),\n        },\n        balance: i.balance?.toString() || null,\n      };\n    });\n\n    solanaSplStore.setState({\n      ...solanaSplStoreHook,\n      derivedTokenAccounts: accountsMapped,\n    });\n  };\n\n  useEffect(() => {\n    loadTokens();\n  }, []);\n\n  const modalRef = useRef(null);\n\n  const handleOpen = () => {\n    loadTokens();\n    setOpen(true);\n  };\n\n  const handleClose = async () => {\n    if (!solanaSplStoreHook.derivedTokenAccounts) {\n      setOpen(false);\n      props.onClose();\n      return;\n    }\n    if (choosen >= 0)\n      props.onClose(solanaSplStoreHook.derivedTokenAccounts[choosen]);\n    else {\n      const choosenType = choosen === -1 ? \"TOKEN\" : \"MINT\";\n      if (\n        (choosenType === \"TOKEN\" && !customTokenAccount) ||\n        (choosenType === \"MINT\" && !customMintAccount)\n      ) {\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n\n      const tokenAccount =\n        choosenType === \"TOKEN\"\n          ? customTokenAccount\n          : (\n              await findAssociatedTokenAddress(\n                wallet!.publicKey,\n                customMintAccount\n              )\n            ).toBase58();\n      const tokAccountData = await getTokenAccountInfo(\n        provider,\n        new PublicKey(tokenAccount)\n      );\n      if (choosenType === \"TOKEN\" && !tokAccountData) {\n        alert(\"Looks like an invalid SPL Token Account was provided\");\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      if (\n        choosenType === \"MINT\" &&\n        props.onlyWithInitializedAccounts !== false &&\n        !tokAccountData\n      ) {\n        alert(\n          \"Looks like there is no initialized associated account with this mint\"\n        );\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      const mintAddr =\n        choosenType === \"TOKEN\"\n          ? tokAccountData!.mint\n          : new PublicKey(customMintAccount);\n\n      const mintInfo = await getMintInfo(provider, mintAddr);\n      if (!mintInfo) {\n        alert(\"Looks like the mint associated with this token is invalid\");\n        setOpen(false);\n        props.onClose();\n        return;\n      }\n      const bal = tokAccountData?.amount || new u64(0);\n      props.onClose({\n        balance: bal,\n        account: tokenAccount,\n        info: {\n          ...mintInfo,\n          mint: mintAddr,\n        },\n      });\n    }\n    setOpen(false);\n    props.onClose();\n  };\n\n  const body = (\n    <div\n      onBlur={handleClose}\n      className=\"wrapper\"\n      // TODO: this is a bit ghetto but react modal isn't working with the cells\n      onClick={(e) => e.currentTarget.blur()}\n      style={{\n        position: \"fixed\",\n        top: \"0\",\n        left: \"0\",\n        height: \"100vh\",\n        width: \"100vw\",\n        zIndex: 100,\n        display: \"grid\",\n        justifyItems: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div style={{ ...modalStyle }} className={classes.paper}>\n        <h2 id=\"simple-modal-title\">Choose a token account</h2>\n        <p id=\"simple-modal-description\">\n          Choose from either your associated token accounts or add a custom\n          address\n        </p>\n        <div\n          className=\"options\"\n          style={{ overflow: \"scroll\", maxHeight: \"70vh\" }}\n        >\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr 1fr 1fr 1fr 1fr\",\n            }}\n          >\n            <span></span>\n            <div>Mint Name</div>\n            <div>Mint Address</div>\n            <div>Token Account Address</div>\n            <div>Amount</div>\n          </div>\n          {!solanaSplStoreHook.derivedTokenAccounts\n            ? \"Loading...\"\n            : solanaSplStoreHook.derivedTokenAccounts.map((tok, i) => (\n                <div\n                  key={`token-derived-account-${i}`}\n                  style={{\n                    padding: \"0.5rem\",\n                    border: choosen === i ? \"1px solid black\" : \"0px\",\n                  }}\n                >\n                  <TokenLine\n                    tok={tok}\n                    setChoosen={() => {\n                      setChoosen(i);\n                    }}\n                  />\n                  <br />\n                </div>\n              ))}\n          {/* TODO: add balance to the left of this once filled out */}\n          {props.includeCustomTokenAccount && (\n            <div\n              style={{\n                padding: \"0.5rem\",\n                border: choosen === -1 ? \"1px solid black\" : \"0px\",\n              }}\n            >\n              <TextField\n                label=\"Custom Token Account\"\n                value={customTokenAccount}\n                onChange={(e) => setCustomTokenAccount(e.target.value)}\n                onFocus={() => setChoosen(-1)}\n              />\n            </div>\n          )}\n          <p>Or</p>\n          <div\n            style={{\n              padding: \"0.5rem\",\n              border: choosen === -2 ? \"1px solid black\" : \"0px\",\n            }}\n          >\n            <TextField\n              label=\"Custom Mint Account\"\n              value={customMintAccount}\n              onChange={(e) => setCustomMintAccount(e.target.value)}\n              onFocus={() => setChoosen(-2)}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <button type=\"button\" onClick={handleOpen}>\n        {props.buttonText || \"Choose Token Account\"}\n      </button>\n\n      {/* <Modal\n        open={open}\n        ref={modalRef}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      > */}\n      {open && body}\n      {/* </Modal> */}\n    </div>\n  );\n}\n","import Input from \"@material-ui/core/Input\";\nimport { getVertexType } from \"src/utils/graph\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select from \"@mui/material/Select\";\nimport FocusTrap from \"focus-trap-react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  CellBase,\n  DataEditorComponent,\n  DataEditorProps,\n} from \"react-spreadsheet\";\nimport { useStore } from \"react-stores\";\nimport { globalStore, MallocState } from \"src/globalStore\";\nimport { InputClassNames } from \"src/interfaces\";\nimport { getActionVertices } from \"src/utils/graph\";\nimport TokenAccountChooser from \"../tokens/TokenAccountChooser\";\n\nconst InputEditor = (\n  props: DataEditorProps<CellBase> & {\n    isWholeNumber?: boolean;\n    isFractionNumber?: boolean;\n  }\n) => {\n  return (\n    <Input\n      onChange={(e) => {\n        props.onChange({\n          ...props.cell,\n          value: props.isWholeNumber\n            ? parseInt(e.target.value).toString()\n            : e.target.value,\n        });\n      }}\n      value={props.cell?.value || \"\"}\n      type={props.isFractionNumber || props.isWholeNumber ? \"number\" : \"text\"}\n    />\n  );\n};\n\nconst TokenOrMintEditor = (\n  props: DataEditorProps<CellBase> & {\n    type: \"mint\" | \"token\";\n    onlyWithInitialized: boolean;\n  }\n) => {\n  return (\n    <div>\n      <TokenAccountChooser\n        buttonText={\"select\"}\n        onlyWithInitializedAccounts={props.onlyWithInitialized}\n        onClose={(splTok) => {\n          if (splTok) {\n            const value =\n              props.type === \"token\"\n                ? splTok.account\n                : splTok.info.mint.toBase58();\n            props.onChange({\n              ...props.cell,\n              value,\n            });\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nconst ActionVertexEditor = (\n  props: DataEditorProps<CellBase> & {\n    nextActionMintIdx: number;\n  }\n) => {\n  const store = useStore(globalStore);\n  const vertices = getActionVertices(store.graph);\n  const [active, setActive] = useState(true);\n  const [pause, setPause] = useState(false);\n\n  const setState = (id: string) => {\n    props.onChange({ ...props.cell, value: id });\n    setActive(false);\n  };\n\n  return (\n    <div>\n      <FocusTrap active={active} paused={pause}>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={props.cell?.value}\n          label=\"Age\"\n          style={{\n            height: \"20px\",\n          }}\n        >\n          {vertices.map((id) => {\n            return (\n              <span key={`select-opts-${id}`}>\n                <MenuItem\n                  style={{ zIndex: 100 }}\n                  value={id}\n                  onMouseOver={() => setPause(true)}\n                  onFocus={() => setState(id)}\n                >\n                  {id}\n                </MenuItem>\n              </span>\n            );\n          })}\n        </Select>\n      </FocusTrap>\n    </div>\n  );\n};\n\nexport const TableCellEditor: DataEditorComponent<CellBase> = (\n  props: DataEditorProps<CellBase>\n) => {\n  const className = (props.cell?.className || \"\").split(\"-\")[0];\n  switch (className) {\n    case InputClassNames.actionVertex:\n      const nextActionMintIdx = parseInt(\n        props.cell!.className!.split(\"-\")[1] || \"\"\n      );\n      return ActionVertexEditor({ ...props, nextActionMintIdx });\n    case InputClassNames.mintAccountOnlyInit:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"mint\",\n        onlyWithInitialized: true,\n      });\n    case InputClassNames.tokenAccountOnlyInit:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"token\",\n        onlyWithInitialized: true,\n      });\n    case InputClassNames.mintAccount:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"mint\",\n        onlyWithInitialized: false,\n      });\n    case InputClassNames.tokenAccount:\n      return TokenOrMintEditor({\n        ...props,\n        type: \"token\",\n        onlyWithInitialized: false,\n      });\n    case InputClassNames.other:\n      return InputEditor(props);\n    case InputClassNames.wholeNumber:\n      return InputEditor({ ...props, isWholeNumber: true });\n    case InputClassNames.fractionNumber:\n      return InputEditor({ ...props, isFractionNumber: true });\n    default:\n      return InputEditor(props);\n  }\n};\n","import React, { useState, FC } from \"react\";\nimport Spreadsheet from \"react-spreadsheet\";\n\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  NextAction,\n  InputClassNames,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { useStore } from \"react-stores\";\nimport {\n  downloadGlobalStore,\n  globalStore,\n  INIT_NEXT_ACTION,\n  setGlobalStoreFromFile,\n  SOURCE_NODE_ID,\n} from \"../globalStore\";\nimport { compileAndRunMallocSDK } from \"src/utils/sdk-interpelator\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { getNextActionRow, getSourceNodeAccount } from \"src/utils/graph\";\nimport { MallocSPLBuildActionMap } from \"@malloc/spl\";\nimport { saveStringToFile } from \"src/utils/files\";\nimport { getMintInfo, getTokenAccountInfo } from \"src/utils/spl-tokens\";\nimport {\n  getActionTypeUIDFromVertex,\n  getInitInputForActionType,\n  setHardCodedNextActions,\n} from \"src/utils/action-types\";\nimport { utils } from \"@malloc/sdk\";\nimport { getProvider } from \"src/utils/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TableCellEditor } from \"./table/table-cells\";\n\nconst NodeInfo: FC = () => {\n  const state = useStore(globalStore);\n  const wallet = useAnchorWallet();\n\n  const setInput = async (data: Input) => {\n    state.graph[state.selected].input = data as Input;\n    let mintName = state.sourceMint;\n    if (state.selected === SOURCE_NODE_ID) {\n      const sourceAccount = getSourceNodeAccount(data as SourceNodeInput);\n      if (sourceAccount) {\n        const info = await getTokenAccountInfo(\n          getProvider(wallet!),\n          new PublicKey(sourceAccount)\n        );\n        if (info) {\n          mintName = info.mint.toBase58();\n        }\n      }\n    }\n    globalStore.setState({\n      ...state,\n      sourceMint: mintName,\n      graph: { ...state.graph },\n    });\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"row\">\n        <div className=\"col-10\">\n          <h2>{state.selected} info</h2>\n        </div>\n        <div className=\"col-2\">\n          {state.selected != \"SOURCE-0\" && (\n            <button\n              onClick={() => {\n                let deleted_key = state.selected;\n                if (deleted_key == \"SOURCE-0\") return;\n                const graph = utils.object.deepCloneObject(state.graph);\n                delete graph[deleted_key];\n\n                for (var key of Object.keys(graph)) {\n                  let next_actions = graph[key][\"next_actions\"];\n                  if (next_actions != null && next_actions.length != 0) {\n                    for (let x = 0; x < next_actions.length; x++) {\n                      // Start with 1 as the first row is the labels\n                      for (var i = 1; i < next_actions[x].length; i++) {\n                        let edge = next_actions[x][i][0].value;\n                        if (edge == deleted_key) {\n                          // LEV look here\n                          console.log(next_actions[x][i][0]);\n                          next_actions[x][i][0].value = \"\";\n                        }\n                      }\n                    }\n                  }\n                  graph[key][\"next_actions\"] = next_actions;\n                }\n\n                globalStore.setState({\n                  ...state,\n                  selected: \"SOURCE-0\",\n                  graph,\n                });\n\n                console.log(state.graph);\n              }}\n            >\n              X\n            </button>\n          )}\n        </div>\n      </div>\n\n      {state.selected === SOURCE_NODE_ID && (\n        <p>Source Mint: {state.sourceMint}</p>\n      )}\n\n      <h5>Input</h5>\n      {console.log(state.graph[state.selected].input)}\n      <Spreadsheet\n        hideColumnIndicators={true}\n        hideRowIndicators={true}\n        data={state.graph[state.selected].input}\n        onChange={(data) => setInput(data as Input)}\n        DataEditor={TableCellEditor}\n      />\n\n      {state.graph[state.selected].next_actions.length != 0 && (\n        <div>\n          <br />\n          <h5>Next Action</h5>\n        </div>\n      )}\n      {state.graph[state.selected].next_actions.map(\n        (next_action_by_mint, i) => {\n          return (\n            <div key={`next-action-${i}`}>\n              <Spreadsheet\n                hideColumnIndicators={true}\n                hideRowIndicators={true}\n                data={state.graph[state.selected].next_actions[i]}\n                onChange={(data) => {\n                  state.graph[state.selected].next_actions[i] =\n                    data as NextAction[];\n                  globalStore.setState({\n                    ...state,\n                    graph: { ...state.graph },\n                  });\n                  console.log(state.graph[state.selected].next_actions);\n                }}\n                DataEditor={TableCellEditor}\n              />\n              <br />\n              <div className=\"row\">\n                <div className=\"col-2\">\n                  <button\n                    onClick={() => {\n                      state.graph[state.selected].next_actions[i] = [\n                        ...state.graph[state.selected].next_actions[i],\n                        getNextActionRow(i),\n                      ];\n                      globalStore.setState({\n                        ...state,\n                        graph: { ...state.graph },\n                      });\n                      console.log(\n                        \"new action\",\n                        state.graph[state.selected].next_actions\n                      );\n                    }}\n                  >\n                    Add\n                  </button>\n                </div>\n                <div className=\"col-2\">\n                  <button\n                    onClick={() => {\n                      if (\n                        state.graph[state.selected].next_actions[i].length > 2\n                      ) {\n                        let temp = state.graph[state.selected].next_actions[i];\n                        state.graph[state.selected].next_actions[0] =\n                          temp.slice(0, temp.length - 1);\n                        globalStore.setState({\n                          ...state,\n                          graph: { ...state.graph },\n                        });\n                        console.log(\n                          \"remove action\",\n                          state.graph[state.selected].next_actions\n                        );\n                      }\n                    }}\n                  >\n                    Remove\n                  </button>\n                </div>\n                <div className=\"col\"></div>\n              </div>\n            </div>\n          );\n        }\n      )}\n    </div>\n  );\n};\n\nexport default NodeInfo;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { useStore } from \"react-stores\";\nimport {\n  ActionTypes,\n  ACTION_TYPES,\n  downloadGlobalStore,\n  globalStore,\n  INIT_NEXT_ACTION,\n  setGlobalStoreFromFile,\n  SOURCE_NODE_ID,\n} from \"../globalStore\";\n\nconst GraphVisualizer = (graph) => {\n  const state = useStore(globalStore);\n  const svgRef = useRef();\n\n  // ...D3 code\n  useEffect(() => {\n    // DATA\n    let nodes = Object.keys(state.graph).map(function (key, index) {\n      return { id: key };\n    });\n\n    let edges = [];\n    for (const key of Object.keys(state.graph)) {\n      let node = state.graph[key];\n      let node_edges = [];\n\n      if (node[\"next_actions\"] != null && node[\"next_actions\"].length != 0) {\n        for (var i = 1; i < node[\"next_actions\"][0].length; i++) {\n          var val = node[\"next_actions\"][0][i][0].value;\n          if (val != \"\" && val) {\n            node_edges.push({\n              source: key,\n              target: val,\n              type: \"0\",\n            });\n          }\n        }\n      }\n\n      if (node_edges.length != 0) edges = edges.concat(node_edges);\n    }\n\n    let links =\n      edges.length == 0\n        ? [{ source: \"SOURCE-0\", target: \"SOURCE-0\", type: \"0\" }]\n        : edges;\n\n    console.log(\"EDGES\", edges);\n    console.log(\"LINKS\", links);\n\n    const data = {\n      nodes,\n      links,\n    };\n    let types = [\"0\"];\n\n    // STYLING\n    let [width, height] = [300, 300];\n    let color = d3.scaleOrdinal(types, d3.schemeCategory10);\n\n    let linkArc = (d) => {\n      const r = Math.hypot(d.target.x - d.source.x, d.target.y - d.source.y);\n      return `\n              M${d.source.x},${d.source.y}\n              A${0},${0} 0 0,1 ${d.target.x},${d.target.y}\n            `;\n    };\n\n    let drag = (simulation) => {\n      function dragstarted(event, d) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }\n\n      function dragged(event, d) {\n        d.fx = event.x;\n        d.fy = event.y;\n      }\n\n      function dragended(event, d) {\n        if (!event.active) simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    };\n\n    links = data.links.map((d) => Object.create(d));\n    nodes = data.nodes.map((d) => Object.create(d));\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-400))\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY());\n\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n      .style(\"font\", \"12px sans-serif\");\n\n    svg\n      .append(\"rect\")\n      .attr(\"x\", -width)\n      .attr(\"y\", -height)\n      .attr(\"width\", 2 * width)\n      .attr(\"height\", 2 * height)\n      .attr(\"fill\", \"white\");\n\n    // Per-type markers, as they don't inherit styles.\n    svg\n      .append(\"defs\")\n      .selectAll(\"marker\")\n      .data(types)\n      .join(\"marker\")\n      .attr(\"id\", (d) => `arrow-${d}`)\n      .attr(\"viewBox\", \"0 -5 10 10\")\n      .attr(\"refX\", 15)\n      .attr(\"refY\", -0.5)\n      .attr(\"markerWidth\", 6)\n      .attr(\"markerHeight\", 6)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .attr(\"fill\", color)\n      .attr(\"d\", \"M0,-5L10,0L0,5\");\n\n    const link = svg\n      .append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke-width\", 1.5)\n      .selectAll(\"path\")\n      .data(links)\n      .join(\"path\")\n      .attr(\"stroke\", (d) => color(d.type))\n      .attr(\n        \"marker-end\",\n        (d) => `url(${new URL(`#arrow-${d.type}`, location)})`\n      );\n\n    const node = svg\n      .append(\"g\")\n      .attr(\"fill\", \"currentColor\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .selectAll(\"g\")\n      .data(nodes)\n      .join(\"g\")\n      .call(drag(simulation));\n\n    node\n      .append(\"circle\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"r\", 4);\n\n    node\n      .append(\"text\")\n      .attr(\"x\", 8)\n      .attr(\"y\", \"0.31em\")\n      .text((d) => d.id)\n      .clone(true)\n      .lower()\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-width\", 3);\n\n    simulation.on(\"tick\", () => {\n      link.attr(\"d\", linkArc);\n      node.attr(\"transform\", (d) => `translate(${d.x},${d.y})`);\n    });\n  }, [state]);\n\n  return (\n    <div className=\"row justify-content-center\">\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default GraphVisualizer;\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const frontendErrorTypeID = \"MALLOC_FLOWCHART_ERROR\";\n\nexport type FrontendError = {\n  type: \"MALLOC_FLOWCHART_ERROR\";\n  msg: string;\n  fullError?: any;\n};\n\nexport const handleError = (e: any) => {\n  console.error(e)\n  if (e?.errorType === frontendErrorTypeID) {\n    const eCast = e as FrontendError;\n    alert(eCast.msg)\n    if(eCast.fullError) throw eCast.fullError\n  } else {\n    alert(`An unexpected error occured: ${e}`)\n    throw e;\n  }\n};\n\nexport const ErrorGenerator = {\n  TOKEN_ACCOUNT_DOES_NOT_EXIST: (tokAccount: PublicKey | string) =>\n    newFrontendError(\n      `The token account ${tokAccount.toString()} does not exist`\n    ),\n  INVALID_AMOUNT_INPUT: (amount: string) =>\n    newFrontendError(`${amount} is not a valid number for the input`),\n  MINT_ACCOUNT_DOES_NOT_EXIST: (\n    mintAccount: PublicKey | string,\n    tokAccount?: PublicKey | string\n  ) =>\n    newFrontendError(\n      tokAccount\n        ? `The mint ${mintAccount.toString()} found from token ${tokAccount.toString()} does not exist`\n        : `The mint ${mintAccount.toString()} does not exist`\n    ),\n};\n\nconst newFrontendError = (msg: string, e?: any) => {\n  return {\n    msg,\n    fullError: e,\n    type: \"MALLOC_FLOWCHART_ERROR\",\n  } as FrontendError;\n};\n","import {\n  Action,\n  utils as mallocUtils,\n  BuildEphemeralTxsInstr,\n  builder,\n  MallocSdk,\n  NonUserSpecificConstruction,\n  NonUserSpecificConstructionAction,\n  ActionMetadata,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider } from \"@project-serum/anchor\";\nimport { AnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { getConstants } from \"src/config/constants\";\nimport {\n  getGlobalStore,\n  globalStore,\n  SOURCE_NODE_ID,\n} from \"src/globalStore\";\nimport {\n  GraphType,\n  HiddenInputData,\n  Input,\n  NodeType,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { getProvider } from \"./anchor\";\nimport { ErrorGenerator, handleError } from \"./errors\";\nimport {\n  getAllVertices,\n  getNextVertices,\n  getSourceNode,\n  getSourceNodeAccount,\n  getSourceNodeAmount,\n  getVertexType,\n} from \"./graph\";\nimport { getMintInfo, getTokenAccountInfo } from \"./spl-tokens\";\nimport {\n  MallocSPLBuildActionMap,\n  SwapAction,\n  TransferAction,\n} from \"@malloc/spl\";\nimport { GroupAddSharp } from \"@material-ui/icons\";\nimport {\n  getActionPIDFromVertex,\n  getActionTypeUIDFromVertex,\n} from \"./action-types\";\n\nconst PID = new PublicKey(getConstants().MALLOC_PROGRAM_ID);\nconst getMallocSdk = (wallet: AnchorWallet) =>\n  new MallocSdk(PID, getProvider(wallet));\n\nconst getAllIncomingVertexIds = (actionId: string, graph: GraphType) =>\n  getAllVertices(graph).filter((v) =>\n    getNextVertices(graph, v).some((nextEdgeSet) =>\n      nextEdgeSet.map((i) => i.id).includes(actionId)\n    )\n  );\n\nconst getInputFromActionInput = (\n  actionInput: Input,\n  hiddenInputData: any\n): any => {\n  const ret = {} as any;\n  actionInput.map((inpItem) => {\n    ret[inpItem[0].value] = inpItem[1].value;\n  });\n  return { ...ret, ...hiddenInputData };\n};\n\nconst getNextNodes = (\n  allActionIds: string[],\n  actionId: string,\n  graph: GraphType\n): ActionMetadata[\"nextNodes\"] => {\n  const nextActions = getNextVertices(graph, actionId);\n\n  const groupedByMints: ActionMetadata[\"nextNodes\"] = nextActions.map(\n    (nextActionSet) => {\n      return nextActionSet.map((next) => {\n        return {\n          actionIdx: allActionIds.indexOf(next.id),\n          fraction: next.amount,\n        };\n      });\n    }\n  );\n\n  return groupedByMints;\n};\n\nconst getActionData = (\n  actionId: string,\n  allActionIds: string[],\n  graph: GraphType,\n  hiddenInputData: HiddenInputData\n): NonUserSpecificConstructionAction => {\n  const incomingVertices = getAllIncomingVertexIds(actionId, graph);\n\n  const nextNodes: ActionMetadata[\"nextNodes\"] = getNextNodes(\n    allActionIds,\n    actionId,\n    graph\n  );\n\n  const vertexType = getVertexType(actionId);\n  return {\n    actionTypeUID: getActionTypeUIDFromVertex(vertexType),\n    buildActionInputs: getInputFromActionInput(\n      graph[actionId].input,\n      hiddenInputData[actionId]\n    ),\n    actionPID: getActionPIDFromVertex(vertexType),\n    actionMetadata: {\n      ripeAmount: incomingVertices.length,\n      nextNodes,\n    },\n  };\n};\n\nconst _buildNonUserSpecificConstruction = async (\n  g: GraphType,\n  hiddenInputDatas: HiddenInputData,\n  actionVertices: string[],\n  initialSplits: number[],\n  initialActionIndices: number[],\n  amount: string\n): Promise<NonUserSpecificConstruction> => {\n  const vertices = getAllVertices(g);\n\n  return {\n    actionDatas: actionVertices.map((v) =>\n      getActionData(v, actionVertices, g, hiddenInputDatas)\n    ),\n    initialSplits,\n    initialActionIndices,\n    amount,\n  };\n};\n\nconst getInitialInfo = async (\n  g: GraphType,\n  inAccount: PublicKey,\n  actionVertices: string[],\n  provider: Provider\n) => {\n  const sourceNode = getSourceNode(g);\n  const tokenInInfo = await getTokenAccountInfo(provider, inAccount);\n  if (!tokenInInfo) {\n    throw ErrorGenerator.TOKEN_ACCOUNT_DOES_NOT_EXIST(inAccount);\n  }\n\n  const mint = tokenInInfo.mint;\n  const mintInfo = await getMintInfo(provider, mint);\n\n  if (!mintInfo) {\n    throw ErrorGenerator.MINT_ACCOUNT_DOES_NOT_EXIST(mint, inAccount);\n  }\n\n  let amountInF: number;\n  try {\n    amountInF = parseFloat(\n      getSourceNodeAmount(sourceNode.input as SourceNodeInput)\n    );\n  } catch (e) {\n    throw ErrorGenerator.INVALID_AMOUNT_INPUT(\n      getSourceNodeAmount(sourceNode.input as SourceNodeInput)\n    );\n  }\n  const amountIn = utils.tokens.fromReadableNumber(\n    amountInF,\n    mintInfo.decimals\n  );\n  const nextFromSource = getNextVertices(g, SOURCE_NODE_ID)[0];\n\n  return {\n    amount: amountIn,\n    initialMint: mint,\n    initialSplits: nextFromSource.map((n) => n.amount),\n    initialActionIndices: nextFromSource.map((n) =>\n      actionVertices.indexOf(n.id)\n    ),\n  };\n};\n\nconst compileStateIntoSDKInput = async (\n  wallet: AnchorWallet,\n  preferredTokenAccounts?: mallocUtils.tokens.PreferredTokenAccounts\n): Promise<BuildEphemeralTxsInstr> => {\n  const { graph, hiddenInputData: hiddenData } = getGlobalStore();\n\n  const inAccount = new PublicKey(\n    getSourceNodeAccount(getSourceNode(graph).input as SourceNodeInput)\n  );\n\n  const provider = getProvider(wallet);\n  const vertices = getAllVertices(graph);\n  const actionVertices = vertices.slice(1);\n  const { initialSplits, initialActionIndices, initialMint, amount } =\n    await getInitialInfo(graph, inAccount, actionVertices, provider);\n\n  // Get the non specific\n  const nonUserSpecific = await _buildNonUserSpecificConstruction(\n    graph,\n    hiddenData,\n    actionVertices,\n    initialSplits,\n    initialActionIndices,\n    amount\n  );\n\n  const construction = await builder.buildConstructionFromNonUserSpecific(\n    nonUserSpecific,\n    MallocSPLBuildActionMap,\n    inAccount.toBase58(),\n    initialMint.toBase58(),\n    provider\n  );\n\n  return {\n    actions: construction.actions,\n    initialSplits: construction.initialSplits,\n    amount: construction.amount,\n    initialActionIndices: construction.initialActionIndices,\n    amountInAccount: inAccount,\n    opts: { preferredTokenAccounts },\n  };\n};\n\nconst run = async (\n  inp: BuildEphemeralTxsInstr,\n  wallet: AnchorWallet\n): Promise<string[]> => {\n  const sdk = getMallocSdk(wallet);\n  const data = await sdk.buildTxs(inp);\n  return await sdk.sendRequests(data, {\n    prepareCommitment: {\n      skipPreflight: false,\n      preflightCommitment: \"single\",\n      commitment: \"single\",\n    },\n    actionCommitment: {\n      skipPreflight: true,\n      preflightCommitment: \"single\",\n      commitment: \"single\",\n    },\n  });\n};\n\nexport const compileAndRunMallocSDK = async (wallet: AnchorWallet) => {\n  try {\n    const buildInst = await compileStateIntoSDKInput(wallet);\n    const txs = await run(buildInst, wallet);\n    alert(`DONE AND SUCCESSFUL with tx: ${txs}`);\n  } catch (e) {\n    handleError(e);\n  }\n};\n","import { Wallet } from \"@project-serum/anchor\";\nimport { createTokenAccount, Provider } from \"@project-serum/common\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { getConstants } from \"../../config/constants\";\n\nconst richUSDCAirdroperSK = new Uint8Array([\n  8, 57, 204, 222, 105, 129, 113, 8, 245, 54, 20, 45, 122, 175, 82, 37, 32, 44,\n  46, 6, 54, 35, 168, 208, 213, 194, 164, 50, 97, 226, 134, 119, 136, 196, 213,\n  189, 243, 233, 16, 53, 22, 220, 245, 4, 17, 203, 251, 233, 20, 7, 178, 5, 36,\n  19, 66, 89, 210, 148, 19, 225, 117, 61, 214, 253,\n]);\n\nconst richUSDCSigner = new Wallet(Keypair.fromSecretKey(richUSDCAirdroperSK));\n\nconst getRichUsdcProvider = (endpointURL: string) =>\n  new Provider(new Connection(endpointURL), richUSDCSigner, {\n    commitment: \"confirmed\",\n  });\n\nexport const performUsdcAirdrop = async (userAddr: PublicKey) => {\n  try {\n    const tokAccount = await tryCreateAssociatedAccount(\n      new PublicKey(getConstants().demo.FAKE_USDC),\n      userAddr,\n      getRichUsdcProvider(getConstants().solana.RPC)\n    );\n    await airdrop(new PublicKey(getConstants().demo.FAKE_USDC_GD), [\n      tokAccount,\n    ]);\n    alert(\"Done with your airdrop\");\n  } catch (e) {\n    console.error(e);\n    alert(`An error occurred with the airdrop ${JSON.stringify(e)}`);\n  }\n};\n\nconst tryCreateAssociatedAccount = async (\n  mint: PublicKey,\n  account: PublicKey,\n  provider: Provider\n): Promise<PublicKey> => {\n  const associated = (\n    await PublicKey.findProgramAddress(\n      [\n        account.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(mint).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n  const data = await provider.connection.getAccountInfo(associated);\n  if (!data) {\n    const instr = Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mint,\n      associated,\n      account,\n      provider.wallet.publicKey\n    );\n    const tx = new Transaction();\n    tx.add(instr);\n    await provider.send(tx, []);\n    return associated;\n  }\n  return associated;\n};\n\nconst airdrop = async (\n  gdUsdc: PublicKey,\n  airDropToTokenAccounts: PublicKey[]\n) => {\n  const decimals = 6;\n  const amountAirdrop = 4 * 10 ** decimals;\n\n  const transferTxs: Transaction = new Transaction();\n  airDropToTokenAccounts.map((tokAccount) => {\n    transferTxs.add(\n      Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        gdUsdc,\n        tokAccount,\n        richUSDCSigner.publicKey,\n        [],\n        amountAirdrop\n      )\n    );\n  });\n\n  await getRichUsdcProvider(getConstants().solana.RPC).send(transferTxs, [], {\n    skipPreflight: true,\n  });\n};\n","import React, { useState, FC } from \"react\";\nimport GraphVisualizer from \"./graph-visualizer\";\n\nimport {\n  Input,\n  ActionEdge,\n  NodeType,\n  GraphType,\n  NextAction,\n  InputClassNames,\n  SourceNodeInput,\n} from \"src/interfaces\";\nimport { useStore } from \"react-stores\";\nimport {\n  downloadGlobalStore,\n  globalStore,\n  INIT_NEXT_ACTION,\n  setGlobalStoreFromFile,\n  SOURCE_NODE_ID,\n} from \"../globalStore\";\nimport { compileAndRunMallocSDK } from \"src/utils/sdk-interpelator\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { getSourceNodeAccount } from \"src/utils/graph\";\nimport { MallocSPLBuildActionMap } from \"@malloc/spl\";\nimport { TableCellEditor } from \"./table/table-cells\";\nimport { performUsdcAirdrop } from \"./usdc-airdrop/perform-usdc-airdrop\";\nimport { saveStringToFile } from \"src/utils/files\";\nimport { Satellite } from \"@material-ui/icons\";\nimport { getMintInfo, getTokenAccountInfo } from \"src/utils/spl-tokens\";\nimport { getProvider } from \"src/utils/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport {\n  getActionTypeUIDFromVertex,\n  getInitInputForActionType,\n} from \"src/utils/action-types\";\n\nconst NodeVisualizer = () => {\n  const state = useStore(globalStore);\n  const wallet = useAnchorWallet();\n\n  // Control panel loaders\n  const [loadingAirdrop, setLoadingAirdrop] = useState(false);\n  const [loadingCompileAndRun, setLoadingCompileAndRun] = useState(false);\n  // End control panel loaders\n\n  return (\n    <div className=\"card\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <h2>Visualizer</h2>\n        </div>\n        <div className=\"col\">\n          <button onClick={() => setGlobalStoreFromFile()}>Import</button>\n        </div>\n        <div className=\"col\">\n          <button onClick={() => downloadGlobalStore()}>Export</button>\n        </div>\n      </div>\n      <GraphVisualizer />\n\n      <br />\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <button\n            disabled={loadingCompileAndRun}\n            onClick={() => {\n              setLoadingCompileAndRun(true);\n              compileAndRunMallocSDK(wallet!)\n                .then((_) => setLoadingCompileAndRun(false))\n                .catch((e) => setLoadingCompileAndRun(false));\n            }}\n          >\n            {loadingCompileAndRun ? \"Running...\" : \"Compile and Run\"}\n          </button>\n        </div>\n        <div className=\"col\">\n          <button\n            onClick={() => {\n              setLoadingAirdrop(true);\n              performUsdcAirdrop(wallet!.publicKey).then((_) =>\n                setLoadingAirdrop(false)\n              );\n            }}\n            disabled={loadingAirdrop}\n          >\n            {loadingAirdrop ? \"Loading Airdrop...\" : \"Airdrop Fake USDC\"}\n          </button>\n        </div>\n        <div className=\"col-6\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeVisualizer;\n","import React, { useState, FC } from \"react\";\n\nimport NodeSelector from \"./node-selector\";\nimport NodeInfo from \"./node-info\";\nimport NodeVisualizer from \"./node-visualizer\";\n\nconst TableGUI: FC = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\"></div>\n        <div className=\"col\">\n          <h1>MALLOC Protocol</h1>\n          <br />\n        </div>\n        <div className=\"col\"></div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-1\"></div>\n        <div className=\"col-4\">\n          <NodeSelector />\n          <br />\n          <NodeInfo />\n        </div>\n        <div className=\"col-6\">\n          <NodeVisualizer />\n        </div>\n        <div className=\"col-1\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default TableGUI;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport {\n  awaitTransactionSignatureConfirmation,\n  shortenAddress,\n} from \"./utils/malloc\";\nimport { useStore } from \"react-stores\";\nimport LoadingTX from \"./components/tx-handler/LoadingTX\";\nimport TableGUI from \"./components/tablegui\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nexport interface HomeProps {\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const wallet = useWallet();\n\n  useEffect(() => {\n    (async () => {\n      if (wallet?.publicKey) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  return (\n    <main>\n      {wallet.connected && (\n        <div>\n          <p style={{ marginTop: 0 }}>\n            Address: {shortenAddress(wallet.publicKey?.toBase58() || \"\")} <br />\n            Balance: {(balance || 0).toLocaleString()} SOL <br />\n            WALLET CONNECTED\n          </p>\n        </div>\n      )}\n      {!wallet.connected && <ConnectButton>Connect Wallet</ConnectButton>}\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n\n      <br />\n      {wallet.connected && <TableGUI />}\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { getConstants } from \"./config/constants\";\n\nconst config = new anchor.web3.PublicKey(getConstants().MALLOC_PROGRAM_ID);\n\nconst network = getConstants().solana.NETWORK;\n\nconst rpcHost = getConstants().solana.RPC;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletDialogProvider>\n          <Home config={config} connection={connection} txTimeout={txTimeout} />\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport enum Side {\n  Bid = 0,\n  Ask = 1,\n}\n\nexport interface SwapAccounts {\n  market: {\n    market: PublicKey;\n    requestQueue: PublicKey;\n    eventQueue: PublicKey;\n    bids: PublicKey;\n    asks: PublicKey;\n    coinVault: PublicKey;\n    pcVault: PublicKey;\n    vaultSigner: PublicKey;\n    // User params.\n    openOrders: PublicKey;\n    orderPayerTokenAccount: PublicKey;\n    coinWallet: PublicKey;\n  };\n  pcWallet: PublicKey;\n  authority: PublicKey;\n  dexProgram: PublicKey;\n  tokenProgram: PublicKey;\n  rent: PublicKey;\n}\n\nexport enum SwapInstructionByte {\n  BasicSwap = 0,\n}\n","import { BN, Instruction } from \"@project-serum/anchor\";\nimport { Provider, Wallet } from \"../../../../../../anchor/ts\";\nimport { transfer } from \"@project-serum/serum/lib/token-instructions\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  TOKEN_PROGRAM_ID,\n  u64,\n} from \"@solana/spl-token\";\nimport {\n  Account,\n  Connection,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Action } from \"../interfaces\";\nimport { createTokenAccount, SendTxRequest } from \"@project-serum/common\";\n\nexport const tryCreateAssociatedAccountInst = async (\n  mint: PublicKey,\n  owner: PublicKey,\n  connection: Connection,\n  payer: PublicKey\n): Promise<{\n  associateTokAccount: PublicKey;\n  instr?: TransactionInstruction;\n}> => {\n  const associated = (\n    await PublicKey.findProgramAddress(\n      [\n        owner.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(mint).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n  const data = await connection.getAccountInfo(associated);\n  if (!data) {\n    const inst = Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      new PublicKey(mint),\n      associated,\n      owner,\n      payer\n    );\n    return {\n      instr: inst,\n      associateTokAccount: associated,\n    };\n  } else {\n    return {\n      associateTokAccount: associated,\n    };\n  }\n};\n\nexport const tryCreateAssociatedAccount = async (\n  mint: PublicKey,\n  owner: PublicKey,\n  provider: Provider\n) => {\n  const { associateTokAccount, instr } = await tryCreateAssociatedAccountInst(\n    mint,\n    owner,\n    provider.connection,\n    provider.wallet.publicKey\n  );\n  if (!instr) return associateTokAccount;\n  const tx = new Transaction();\n  tx.add(instr);\n  await provider.send(tx);\n  return associateTokAccount;\n};\n\nexport interface AccountByMint {\n  [mint: string]: { publicKey: PublicKey };\n}\n\nexport const transferToTx = async (\n  source: PublicKey,\n  destination: PublicKey,\n  amount: BN,\n  authority: Signer | Wallet\n): Promise<SendTxRequest> => {\n  const signer = (authority as Signer).secretKey ? [authority as Account] : [];\n  const inst = transfer({\n    source,\n    destination,\n    amount,\n    owner: authority.publicKey,\n  });\n  const tx = new Transaction();\n  tx.add(inst);\n  return { tx, signers: signer };\n};\n\nexport type PreferredTokenAccounts = { [mint: string]: PublicKey };\n\n/**\n * Get the token account which the malloc sdk will use for a mint\n *\n * @param preferredTokenAccounts - a map of mints to token accounts which the caller would prefer to use per mint. If the account does not exist,\n * and is needed it will be created in the the returned txs\n */\nexport const getTokenAccountUsedByMalloc = async (\n  tokenAuthority: PublicKey,\n  mintAccount: PublicKey,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<PublicKey> => {\n  if (\n    preferredTokenAccounts &&\n    preferredTokenAccounts[mintAccount.toBase58()]\n  ) {\n    return preferredTokenAccounts[mintAccount.toBase58()];\n  }\n  return await findAssociatedTokenAddress(tokenAuthority, mintAccount);\n};\n\n/**\n * Takes in a mapping of mints to token accounts. If a token account has yet to exist, one will be made\n * which is associated to the authority's address\n *\n * @param preferredTokenAccounts - a map of mints to token accounts which the caller would prefer to use per mint. If the account does not exist,\n * and is needed it will be created in the the returned txs\n */\nexport const createTokenAccountsForActions = async (\n  provider: Provider,\n  tokenAuthority: Signer | Wallet,\n  actions: Action[],\n  fundingAccount: Signer | Wallet,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<{ accounts: AccountByMint; txs: SendTxRequest[] }> => {\n  const mints = getMintsNoDuplicates(\n    actions\n      .map((a) => {\n        const mints = [];\n        if (a.tokenCreationOptions?.skipOutTokenCreations || false) {\n          const skipIdxs = a.tokenCreationOptions.skipOutTokenCreations;\n          console.log(skipIdxs);\n          // Skip all the mints which are included by the skipIdxs\n          a.tokenMintOuts.forEach((mint, i) => {\n            if (!skipIdxs.includes(i)) mints.push(mint);\n          });\n        } else {\n          mints.push(...a.tokenMintOuts);\n        }\n        if (a.tokenCreationOptions?.skipInTokenCreation === true) {\n        } else {\n          mints.push(a.tokenMintIn);\n        }\n        return mints;\n      })\n      .flat()\n  );\n  console.log(mints);\n\n  let accounts: AccountByMint = {};\n  for (let i = 0; i < mints.length; i++) {\n    const mint = mints[i];\n    if ((preferredTokenAccounts || {})[mint])\n      accounts[mint] = { publicKey: preferredTokenAccounts[mint] };\n    // create the token account if not provided\n    else {\n      const pk = await findAssociatedTokenAddress(\n        tokenAuthority.publicKey,\n        mint\n      );\n      accounts[mint] = {\n        publicKey: pk, // TODO: check that this account does not yet exist\n      };\n    }\n  }\n\n  const createTokTx = await Promise.all(\n    mints.map(async (mint) => {\n      const associatedToSignerAccount = accounts[mint].publicKey;\n      const accountExists = await provider.connection.getAccountInfo(\n        associatedToSignerAccount\n      );\n\n      // Return if the account already exists\n      if (accountExists) {\n        console.log(\"ALREADY EXISTS\");\n        return null;\n      }\n      const insts = Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        new PublicKey(mint),\n        accounts[mint].publicKey,\n        tokenAuthority.publicKey,\n        fundingAccount.publicKey\n      );\n      const tx = new Transaction();\n      tx.add(insts);\n      const signers: Account[] = (fundingAccount as Signer).secretKey\n        ? [fundingAccount as Account]\n        : [];\n      return {\n        tx,\n        signers: signers,\n      };\n    })\n  );\n\n  return { accounts: accounts, txs: createTokTx.filter((i) => !!i) };\n};\n\n// TODO: if there are 2 token accounts of the same type, one of them not being made, then there will be an error out\n\n// See https://spl.solana.com/associated-token-account\nconst findAssociatedTokenAddress = async (\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey | string\n): Promise<PublicKey> => {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        new PublicKey(tokenMintAddress).toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMintsNoDuplicates = (mints: PublicKey[]) => [\n  ...new Set(mints.map(pkToStr)),\n];\n\nconst pkToStr = (pk: PublicKey) => pk.toBase58();\nconst pkFromStr = (pk: string) => new PublicKey(pk);\n\nexport const toReadableNumber = (number: u64, decimals: number): string => {\n  function trimTrailingZeroes(value: string): string {\n    return value.replace(/\\.?0*$/, \"\");\n  }\n  function formatWithCommas(value: string): string {\n    const pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(value)) {\n      value = value.replace(pattern, \"$1,$2\");\n    }\n    return value;\n  }\n\n  const balance = number.toString();\n  const wholeStr = balance.substring(0, balance.length - decimals) || \"0\";\n  // TODO: correct?\n  const fractionStr = balance\n    .substring(balance.length - decimals)\n    .padStart(decimals, \"0\")\n    .substring(0, decimals);\n\n  return trimTrailingZeroes(`${formatWithCommas(wholeStr)}.${fractionStr}`);\n};\n\nexport const fromReadableNumber = (\n  number: number,\n  decimals: number\n): string => {\n  function trimLeadingZeroes(value: string): string {\n    value = value.replace(/^0+/, \"\");\n    if (value === \"\") {\n      return \"0\";\n    }\n    return value;\n  }\n\n  const split = number.toString().split(\".\");\n  const wholePart = split[0];\n  const fracPart = split[1] || \"\";\n  if (split.length > 2 || fracPart.length > decimals) {\n    throw new Error(`Cannot parse '${number}' as token amount`);\n  }\n  return trimLeadingZeroes(wholePart + fracPart.padEnd(decimals, \"0\"));\n};\n","export const CONSTRUCTION_ACCOUNT_SIZE = 2e4; // Around 3 kilobytes\nconst ONE_HOUR_MS = 1000 * 60 * 60;\nconst HOURS_PER_EPOCH = 48;\nexport const LIVE_N_EPOCHS = 3;\nexport const LIFETIME_RESULT_ACCOUNT_MS = ONE_HOUR_MS * (HOURS_PER_EPOCH * LIVE_N_EPOCHS); // Has to be more than 1 epoch, lets be sage\nexport const LIFETIME_CONSTRUCTION_ACCOUNT_MS =\n  ONE_HOUR_MS * (HOURS_PER_EPOCH * LIVE_N_EPOCHS);\n\n// Rent constants from https://docs.solana.com/developing/programming-model/accounts\n// TODO: should this be from a dynamic value?\nexport const LAMPORTS_PER_EPOCH = 19.055;\nexport const MS_PER_EPOCH = ONE_HOUR_MS * HOURS_PER_EPOCH;\n","// TODO: there is probably a faster way to do this\nexport const deepCloneObject = (obj: any): any => {\n  function clone(obj) {\n    if (obj == null || typeof obj != \"object\") return obj;\n\n    var temp = obj.constructor();\n\n    for (var key in obj) temp[key] = clone(obj[key]);\n    return temp;\n  }\n  return clone(obj);\n};\n","import * as anchor from \"@project-serum/anchor\";\nimport { MallocSdk } from \"@malloc/sdk\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { getConstants } from \"../config/constants\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n\nexport const getMallocSdk = (wallet: anchor.Provider): MallocSdk => {\n  return new MallocSdk(\n    new PublicKey(getConstants().MALLOC_PROGRAM_ID || \"\"),\n    wallet\n  );\n};\n","import {\n  Account,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { MintInfo, TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport {\n  ActionLib,\n  AccountsArray,\n  Action,\n  ActionMetadata,\n  BuildIsolatedActionFn,\n  BuildIsolatedActionFnOpts,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider, web3 } from \"@project-serum/anchor\";\nimport { TokenInfo, TokenListContainer } from \"@solana/spl-token-registry\";\nimport {\n  connection,\n  createMintInstructions,\n  createTokenAccountInstrs,\n  parseMintAccount,\n  SendTxRequest,\n} from \"@project-serum/common\";\n\nconst actionTypeUID = \"MALLOC_SPL_MINT\";\n\ntype BuildIsolatedMintArgs = {\n  authority?: string;\n  decimals: string;\n  amountOut: string;\n};\n\nexport const buildIsolatedMintAction: BuildIsolatedActionFn<BuildIsolatedMintArgs> =\n  async (\n    inp: BuildIsolatedMintArgs,\n    inMint: string,\n    inTokenAccount: string,\n    dummyPassThroughActionPID: string,\n    provider: Provider,\n    opts?: BuildIsolatedActionFnOpts<BuildIsolatedMintArgs>\n  ) => {\n    const decimals = parseInt(inp.decimals);\n    const mint = new Keypair();\n    const amountOutExpanded = utils.tokens.fromReadableNumber(\n      parseFloat(inp.amountOut),\n      decimals\n    );\n\n    const outTokenAccount = await utils.tokens.getTokenAccountUsedByMalloc(\n      provider.wallet.publicKey,\n      mint.publicKey,\n      opts?.preferredTokenAccounts\n    );\n\n    const authority = new PublicKey(inp.authority || provider.wallet.publicKey);\n\n    return {\n      isolatedAction: {\n        addDefaultTokAccounts: false,\n        actionData: serializeData(amountOutExpanded.toString()),\n        tokenAccountOuts: [outTokenAccount],\n        actionAccounts: [],\n        actionProgram: new PublicKey(dummyPassThroughActionPID),\n        tokenMintIn: new PublicKey(inMint),\n        tokenMintOuts: [mint.publicKey],\n        additionalSigners: [mint],\n        tokenCreationOptions: {\n          skipOutTokenCreations: [0],\n        },\n        instructions: [\n          ...(await createMintInstructions(\n            provider,\n            authority,\n            mint.publicKey,\n            decimals\n          )),\n        ],\n      },\n    };\n  };\n\nconst serializeData = (amount: string) => Buffer.from(`[${amount}]`);\n\n/**\n * The file's main export\n */\nexport const MintAction: ActionLib<BuildIsolatedMintArgs> = {\n  buildIsolatedAction: buildIsolatedMintAction,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\nexport default MintAction;\n","import { ActionLib, BNIsh, BuildIsolatedActionFn, utils } from \"@malloc/sdk\";\nimport { serialize as borshSer } from \"borsh\";\nimport { TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport {\n  Account,\n  Ed25519Program,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { Provider } from \"../../../../anchor/ts/src\";\nimport { SendTxRequest } from \"../../../../anchor/ts/src/provider\";\nimport { createMintInstructions } from \"@project-serum/common\";\n\n// TODO: optionality to not just create a new mint\n/**\n * @param authoritySecret - a hex encoded secret key\n * @param createMint.amount - the amount to mint to, this will be packed into the data and will overwrite amount_in. This is in human readable format\n */\ntype BuildMintToArgs = {\n  authoritySecret?: string;\n  // createMint?: {\n  // TODO: add back in the above once the frontend can give in a struct\n  decimals: number;\n  createMintSecretKey?: string; // The secret key of the mint in hex\n  initialSupply: string;\n  // };\n};\n\nconst actionTypeUID = \"MALLOC_SPL_MINT_TO\";\n\nclass ActionData extends utils.serde.Assignable {}\n\nconst schema = new Map([\n  [\n    ActionData,\n    {\n      kind: \"struct\",\n      fields: [[\"amount_override\", { kind: \"option\", type: \"u64\" }]],\n    },\n  ],\n]);\n\nexport const _mintToSerializeData = (amount?: BNIsh): Buffer => {\n  return Buffer.from(\n    borshSer(schema, new ActionData({ amount_override: new u64(amount) }))\n  );\n};\n\nconst buildIsolatedMintTo: BuildIsolatedActionFn<BuildMintToArgs> = async (\n  inp: BuildMintToArgs,\n  inputMint: string,\n  inputTokenAccount: string,\n  mintToPID,\n  provider: Provider\n) => {\n  // TODO: note the below is untested and will remain so till the hackathon is over\n  const authoritySigner = inp.authoritySecret\n    ? Keypair.fromSecretKey(\n        new Uint8Array(Buffer.from(inp.authoritySecret, \"hex\"))\n      )\n    : undefined;\n\n  // If the user is creating a new mint, then use the new mint address, otherwise use the input mint\n  const mint = inp.createMintSecretKey\n    ? Keypair.fromSecretKey(\n        new Uint8Array(Buffer.from(inp.createMintSecretKey, \"hex\"))\n      )\n    : new Keypair();\n\n  // If their is not specified recipient, mint to the caller\n  const associateTokAccountRecipient =\n    await utils.tokens.getTokenAccountUsedByMalloc(\n      provider.wallet.publicKey,\n      mint.publicKey\n    );\n\n  const optionalAmountWholeNumber = utils.tokens.fromReadableNumber(\n    parseFloat(inp.initialSupply),\n    inp.decimals\n  );\n\n  const atStartTxs: SendTxRequest[] = [];\n\n  const authority = new PublicKey(provider.wallet.publicKey);\n  const tx = new Transaction();\n  tx.add(\n    ...(await createMintInstructions(\n      provider,\n      authority,\n      mint.publicKey,\n      inp.decimals\n    ))\n  );\n  atStartTxs.push({\n    tx,\n    signers: [mint],\n  });\n\n  return {\n    isolatedAction: {\n      tokenMintIn: new PublicKey(inputMint),\n      actionData: _mintToSerializeData(optionalAmountWholeNumber),\n      actionProgram: new PublicKey(mintToPID),\n      actionAccounts: [\n        {\n          address: mint.publicKey,\n          isWriteable: true,\n        },\n        {\n          address: associateTokAccountRecipient,\n          isWriteable: true,\n        },\n        {\n          address: authoritySigner?.publicKey || provider.wallet.publicKey,\n          isSigner: true,\n        },\n        {\n          address: TOKEN_PROGRAM_ID,\n        },\n      ],\n      additionalSigners: authoritySigner ? [authoritySigner] : [],\n      tokenMintOuts: [mint.publicKey],\n      tokenAccountOuts: [associateTokAccountRecipient],\n      atStartOfPrepareTxs: atStartTxs,\n      // TODO: once JIT token creation is added, move creating the mint to an instruction and change the token creation to\n      // be right here!\n      // tokenCreationOptions: {\n      //   skipInTokenCreation: true,\n      // },\n    },\n  };\n};\n\nexport const MintAndMintToAction: ActionLib<BuildMintToArgs> = {\n  buildIsolatedAction: buildIsolatedMintTo,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\n","import { ActionLib, BuildIsolatedActionFn, utils } from \"@malloc/sdk\";\nimport {\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { Provider } from \"../../../../anchor/ts/src\";\nimport * as solend from \"@solendprotocol/common\";\nimport {\n  getTokenAccountUsedByMalloc,\n  PreferredTokenAccounts,\n} from \"../../../malloc-core/ts-packages/malloc-sdk/lib/utils/tokens\";\nimport {\n  depositReserveLiquidityInstruction,\n  refreshReserveInstruction,\n} from \"@solana/spl-token-lending\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { isWeakMap } from \"util/types\";\n\ntype BuildSolendArgs = {};\n\nconst actionTypeUID = \"MALLOC_SPL_SOLEND\";\n\n// TODO: this only supports devnet right now\nconst buildIsolatedSolend: BuildIsolatedActionFn<BuildSolendArgs> = async (\n  inp: BuildSolendArgs,\n  mintAccount: string,\n  inputTokenAccount: string,\n  solendActionPID,\n  provider: Provider,\n  preferredTokenAccounts?: PreferredTokenAccounts\n) => {\n  const mintIn = new PublicKey(mintAccount);\n  const tokenAccountIn = new PublicKey(inputTokenAccount);\n\n  const solendConfig = solend.devnetConfig;\n  const assetSymbol = solendConfig.assets.find(\n    (asset) => asset.mintAddress === mintAccount\n  )?.symbol;\n  if (!assetSymbol) {\n    throw `Looks like solend does not support token of mint ${mintAccount}`;\n  }\n\n  const mainMarket = solendConfig.markets[0];\n  const reserve = mainMarket.reserves.find((r) => r.asset === assetSymbol);\n\n  if (!reserve) {\n    throw `Looks like Solend does not have a market for ${assetSymbol}`;\n  }\n\n  const collateralMint = new PublicKey(reserve.collateralMintAddress);\n  const destinationCollateralAccount = await getTokenAccountUsedByMalloc(\n    provider.wallet.publicKey,\n    collateralMint,\n    preferredTokenAccounts\n  );\n\n  // Set the amount to 0, this will later get filled in/ replaced by the contract\n  // const instr = depositReserveLiquidityInstruction(\n  //   0,\n  //   tokenAccountIn,\n  //   destinationCollateralAccount,\n  //   new PublicKey(reserve.address),\n  //   new PublicKey(reserve.liquidityAddress),\n  //   collateralMint,\n  //   new PublicKey(reserve.address),\n  //   new PublicKey(mainMarket.authorityAddress),\n  //   provider.wallet.publicKey\n  // );\n  // const outCollateralTokenAccount = await getTokenAccountUsedByMalloc()\n  const oracle = solendConfig.oracles.assets.find(\n    (o) => o.asset === assetSymbol\n  );\n  if (!oracle) throw `Could not find the oracle for ${assetSymbol}`;\n  const { data: refreshData } = refreshReserveInstruction(\n    new PublicKey(reserve.address),\n    new PublicKey(oracle.priceAddress)\n  );\n  return {\n    isolatedAction: {\n      tokenMintIn: mintIn,\n      actionData: Buffer.from([]),\n      actionProgram: new PublicKey(solendActionPID),\n      actionAccounts: [\n        {\n          address: new PublicKey(solendConfig.programID),\n        },\n        {\n          address: mintIn,\n        },\n        {\n          address: tokenAccountIn,\n          isWriteable: true,\n        },\n        { address: destinationCollateralAccount, isWriteable: true },\n        { address: new PublicKey(reserve.address), isWriteable: true },\n        { address: new PublicKey(reserve.liquidityAddress), isWriteable: true },\n        { address: collateralMint, isWriteable: true },\n        { address: new PublicKey(mainMarket.address), isWriteable: false },\n        { address: new PublicKey(mainMarket.authorityAddress) },\n        { address: provider.wallet.publicKey, isSigner: true },\n        { address: SYSVAR_CLOCK_PUBKEY },\n        { address: TOKEN_PROGRAM_ID },\n      ],\n      instructions: [\n        new TransactionInstruction({\n          data: refreshData,\n\n          programId: new PublicKey(solendConfig.programID),\n          keys: [\n            {\n              pubkey: new PublicKey(reserve.address),\n              isWritable: true,\n              isSigner: false,\n            },\n            {\n              pubkey: new PublicKey(oracle.priceAddress),\n              isWritable: false,\n              isSigner: false,\n            },\n            {\n              pubkey: new PublicKey(oracle.switchboardFeedAddress),\n              isWritable: false,\n              isSigner: false,\n            },\n            {\n              pubkey: SYSVAR_CLOCK_PUBKEY,\n              isSigner: false,\n              isWritable: false,\n            },\n          ],\n        }),\n      ],\n      additionalSigners: [],\n      tokenMintOuts: [collateralMint],\n      tokenAccountOuts: [destinationCollateralAccount],\n    },\n  };\n};\n\nexport const SolendAction: ActionLib<BuildSolendArgs> = {\n  buildIsolatedAction: buildIsolatedSolend,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\n","import {\n  Account,\n  Connection,\n  Keypair,\n  PublicKey,\n  Signer,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { MintInfo, TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport { Side, SwapAccounts, SwapInstructionByte } from \"./swap-interfaces\";\nimport {\n  ActionLib,\n  AccountsArray,\n  Action,\n  ActionMetadata,\n  BuildIsolatedActionFn,\n  BuildIsolatedActionFnOpts,\n  utils,\n} from \"@malloc/sdk\";\nimport { BN, Provider, web3 } from \"@project-serum/anchor\";\nimport { TokenInfo, TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Market, OpenOrders, TokenInstructions } from \"@project-serum/serum\";\nimport {\n  connection,\n  parseMintAccount,\n  SendTxRequest,\n} from \"@project-serum/common\";\nimport { Swap } from \"@project-serum/swap\";\n\nexport * from \"./swap-interfaces\";\n\nconst actionTypeUID = \"MALLOC_SPL_SWAP\";\n\ninterface SwapInput {\n  // outTokenAccount: string; //TODO: hmmm...\n  outMint: string;\n  serumDexProgramId: string;\n  rent: string;\n  openOrdersAccount?: string;\n}\n\ntype BuildIsolatedSwapArgs = SwapInput & {\n  minOut: string;\n};\nexport const buildIsolatedSwapAction: BuildIsolatedActionFn<BuildIsolatedSwapArgs> =\n  async (\n    inp: BuildIsolatedSwapArgs,\n    inMint: string,\n    inTokenAccount: string,\n    swapPID: string,\n    provider: Provider,\n    opts?: BuildIsolatedActionFnOpts<BuildIsolatedSwapArgs>\n  ) => {\n    const outTokenAccount = await utils.tokens.getTokenAccountUsedByMalloc(\n      provider.wallet.publicKey,\n      new PublicKey(inp.outMint),\n      opts?.preferredTokenAccounts\n    );\n    const swapInfo = await buildSwapAccounts(\n      inp,\n      inMint,\n      inTokenAccount,\n      outTokenAccount.toBase58(),\n      provider\n    );\n\n    return {\n      isolatedAction: {\n        addDefaultTokAccounts: false,\n        actionData: packSwapData(\n          SwapInstructionByte.BasicSwap,\n          swapInfo.side,\n          new u64(inp.minOut)\n        ),\n        tokenAccountOuts: [outTokenAccount],\n        actionAccounts: swapAccountsToActionAccounts(\n          swapInfo.swapAccounts,\n          swapInfo.side\n        ),\n        actionProgram: new PublicKey(swapPID),\n        tokenMintIn: new PublicKey(inMint),\n        tokenMintOuts: [new PublicKey(inp.outMint)],\n        preActionTxs: swapInfo.openOrderInitTx\n          ? [swapInfo.openOrderInitTx]\n          : [],\n      },\n    };\n  };\n\nexport const buildSwapAccounts = async (\n  inp: SwapInput,\n  inMint: string,\n  inTokenAccount: string,\n  outTokenAccount: string,\n  provider: Provider\n): Promise<{\n  swapAccounts: SwapAccounts;\n  openOrderInitTx?: SendTxRequest;\n  market: Market;\n  side: Side;\n}> => {\n  const serumDexId = new PublicKey(inp.serumDexProgramId);\n  const marketRet = await getMarket(\n    provider.connection,\n    new PublicKey(inMint),\n    new PublicKey(inp.outMint),\n    serumDexId\n  );\n  if (!marketRet) throw \"No markets found\";\n\n  const { side, pk: marketPk } = marketRet;\n  const marketSel = await Market.load(\n    provider.connection,\n    marketPk,\n    {},\n    serumDexId\n  );\n\n  const openOrderAccountData = await getOpenOrdersAccount(\n    provider.connection,\n    marketSel,\n    provider.wallet.publicKey,\n    new PublicKey(inp.serumDexProgramId)\n  );\n\n  const [vaultSigner, _] = await getVaultOwnerAndNonce(\n    marketSel.decoded.ownAddress,\n    new PublicKey(inp.serumDexProgramId)\n  );\n\n  const coinWallet = side === Side.Bid ? outTokenAccount : inTokenAccount;\n  const pcWallet = side === Side.Bid ? inTokenAccount : outTokenAccount;\n\n  return {\n    market: marketSel,\n    swapAccounts: {\n      market: {\n        market: marketSel.decoded.ownAddress,\n        requestQueue: marketSel.decoded.requestQueue,\n        eventQueue: marketSel.decoded.eventQueue,\n        bids: marketSel.decoded.bids,\n        asks: marketSel.decoded.asks,\n        coinVault: marketSel.decoded.baseVault,\n        pcVault: marketSel.decoded.quoteVault,\n        vaultSigner: vaultSigner,\n        // User params.\n        openOrders: new PublicKey(\n          inp.openOrdersAccount || openOrderAccountData.openOrderPk\n        ),\n        orderPayerTokenAccount: new PublicKey(inTokenAccount),\n        coinWallet: new PublicKey(coinWallet),\n      },\n      pcWallet: new PublicKey(pcWallet),\n      authority: provider.wallet.publicKey,\n      dexProgram: new PublicKey(inp.serumDexProgramId),\n      tokenProgram: new PublicKey(TOKEN_PROGRAM_ID),\n      rent: new PublicKey(inp.rent),\n    },\n\n    openOrderInitTx: inp.openOrdersAccount\n      ? undefined\n      : openOrderAccountData.openOrderTx,\n    side,\n  };\n};\n\n/**\n * get the open order accounts associated with the market and owner\n *\n * If none exist, create a new account and return a tx to create/ init the account as well\n */\nconst getOpenOrdersAccount = async (\n  connection: Connection,\n  market: Market,\n  owner: PublicKey,\n  dexPID: PublicKey\n): Promise<{\n  openOrderPk: PublicKey;\n  openOrderTx?: SendTxRequest;\n}> => {\n  const openOrders = await OpenOrders.findForMarketAndOwner(\n    connection,\n    market.address,\n    owner,\n    dexPID\n  );\n  if (openOrders.length === 0) {\n    const openOrderAccount = new Account(new Keypair().secretKey);\n    const openOrdersTx = new Transaction();\n    openOrdersTx.add(\n      await OpenOrders.makeCreateAccountTransaction(\n        connection,\n        market.decoded.ownAddress,\n        owner,\n        openOrderAccount.publicKey,\n        dexPID\n      )\n    );\n\n    return {\n      openOrderPk: openOrderAccount.publicKey,\n      openOrderTx: {\n        tx: openOrdersTx,\n        signers: [openOrderAccount],\n      },\n    };\n  } else {\n    return {\n      openOrderPk: openOrders[0].publicKey,\n    };\n  }\n};\n\n// TODO: this just takes the first market available... have some sorta best market in the future?\n/**\n * base mint is the in mint\n * quote mint is the out mint\n */\nexport const getMarket = async (\n  connection: Connection,\n  inMint: PublicKey,\n  outMint: PublicKey,\n  serumDexProgramId: PublicKey\n) => {\n  // TODO: slightly confused about side\n  let side = Side.Ask;\n  let marketPks = await getMarketsFromBaseMinttoQuoteMint(\n    connection,\n    inMint,\n    outMint,\n    serumDexProgramId\n  );\n\n  // Try the other market side\n  if (!marketPks || marketPks.length === 0) {\n    marketPks = await getMarketsFromBaseMinttoQuoteMint(\n      connection,\n      outMint,\n      inMint,\n      serumDexProgramId\n    );\n    side = Side.Bid;\n  }\n  if (!marketPks || marketPks.length === 0) return null;\n  return { pk: marketPks[0], side };\n};\n\nexport const packSwapData = (\n  instrByte: SwapInstructionByte,\n  side: Side,\n  minOut: u64\n): Buffer => {\n  const packedMinOut = minOut.toArrayLike(Buffer, \"be\", 8);\n  return Buffer.from(new Uint8Array([instrByte, side, ...packedMinOut]));\n};\n\nexport const swapAccountsToActionAccounts = (\n  swapAccounts: SwapAccounts,\n  side: Side,\n  referralAccount?: PublicKey\n): AccountsArray => {\n  const tokenAccount =\n    side === Side.Bid ? swapAccounts.pcWallet : swapAccounts.market.coinWallet;\n  const outAccount =\n    side === Side.Bid ? swapAccounts.market.coinWallet : swapAccounts.pcWallet;\n  const accounts = [\n    {\n      isWriteable: true,\n      address: tokenAccount,\n    },\n    {\n      address: swapAccounts.tokenProgram,\n    },\n    {\n      address: swapAccounts.authority,\n      isSigner: true,\n    },\n    {\n      address: swapAccounts.rent,\n    },\n    {\n      address: swapAccounts.dexProgram,\n    },\n    {\n      address: outAccount,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.market,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.openOrders,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.requestQueue,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.eventQueue,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.bids,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.asks,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.orderPayerTokenAccount,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.coinVault,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.pcVault,\n      isWriteable: true,\n    },\n    {\n      address: swapAccounts.market.vaultSigner,\n    },\n  ];\n  if (referralAccount) {\n    accounts.push({\n      address: referralAccount,\n      isWriteable: true,\n    });\n  }\n  return accounts;\n};\n\nexport async function getVaultOwnerAndNonce(\n  marketPublicKey: PublicKey,\n  dexProgramId: PublicKey\n): Promise<[PublicKey, BN]> {\n  const nonce = new BN(0);\n  while (nonce.toNumber() < 255) {\n    try {\n      const vaultOwner = await PublicKey.createProgramAddress(\n        [marketPublicKey.toBuffer(), nonce.toArrayLike(Buffer, \"le\", 8)],\n        dexProgramId\n      );\n      return [vaultOwner, nonce];\n    } catch (e) {\n      nonce.iaddn(1);\n    }\n  }\n  throw new Error(\"Unable to find nonce\");\n}\n\nconst getMarketsFromBaseMinttoQuoteMint = async (\n  connection: Connection,\n  baseMint: PublicKey,\n  quoteMint: PublicKey,\n  serumProgId: PublicKey\n): Promise<PublicKey[]> => {\n  const layout = await Market.getLayout(serumProgId);\n\n  return (\n    await Market.findAccountsByMints(\n      connection,\n      baseMint,\n      quoteMint,\n      serumProgId\n    )\n  ).map((e) => e.publicKey);\n};\n\nconst getAllMarkets = async (conn: Connection, progId: PublicKey) => {\n  Market.findAccountsByMints;\n};\n\nexport const getDemoTokenInfo = async (\n  provider: Provider,\n  fakeUsdc: PublicKey | string,\n  fakeTokA: PublicKey | string\n): Promise<TokenInfo[]> => {\n  const usdcMint = new PublicKey(fakeUsdc);\n  const aMint = new PublicKey(fakeTokA);\n  const usdcInfo = await getMintInfo(provider, usdcMint);\n  const aInfo = await getMintInfo(provider, aMint);\n  if (!usdcInfo || !aInfo) {\n    throw \"Expected info for these mints\";\n  }\n  return [\n    {\n      ...usdcInfo,\n      chainId: -1,\n      name: \"FAKE USDC\",\n      symbol: \"FUSDC\",\n      address: new PublicKey(fakeUsdc).toBase58(),\n    },\n    {\n      ...aInfo,\n      chainId: -1,\n      name: \"FAKE: A TOKEN\",\n      symbol: \"FA TOKEN\",\n      address: new PublicKey(fakeTokA).toBase58(),\n    },\n  ];\n};\n\nexport const getMintInfo = async (\n  provider: Provider,\n  mintAddr: PublicKey\n): Promise<MintInfo | null> => {\n  const account = await provider.connection.getAccountInfo(mintAddr);\n  if (!account) return null;\n  return parseMintAccount(account.data);\n};\n\n/**\n * The file's main export\n */\nexport const SwapAction: ActionLib<BuildIsolatedSwapArgs> = {\n  buildIsolatedAction: buildIsolatedSwapAction,\n  actionTypeUID,\n  expectedNumberOfOutMints: 1,\n};\nexport default SwapAction;\n","import { ActionLib, BuildIsolatedActionFn, utils } from \"@malloc/sdk\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Provider } from \"../../../../anchor/ts/src\";\n\ntype BuildTransferArgs = {\n  recipientWallet: string;\n};\n\nconst actionTypeUID = \"MALLOC_SPL_TRANSFER\";\n\nconst buildIsolatedTransfer: BuildIsolatedActionFn<BuildTransferArgs> = async (\n  inp: BuildTransferArgs,\n  mintAccount: string,\n  inputTokenAccount: string,\n  transferPID,\n  provider: Provider\n) => {\n  const mintIn = new PublicKey(mintAccount);\n  const recipient = new PublicKey(inp.recipientWallet);\n  const { associateTokAccount, instr: createTokInstr } =\n    await utils.tokens.tryCreateAssociatedAccountInst(\n      mintIn,\n      recipient,\n      provider.connection,\n      provider.wallet.publicKey\n    );\n\n  return {\n    isolatedAction: {\n      addDefaultTokAccounts: true,\n      tokenMintIn: mintIn,\n      actionData: Buffer.from([]),\n      actionProgram: new PublicKey(transferPID),\n      actionAccounts: [\n        {\n          address: associateTokAccount,\n          isWriteable: true,\n        },\n      ],\n      additionalSigners: [],\n      tokenMintOuts: [],\n      tokenAccountOuts: [],\n      // TODO: the following is a bit ghetto, but basically will ensure that the token account is only created if the recipient\n      // is not the caller. This ensures that the token account is not created again because its probably created by a former action/ token analyzer\n      instructions:\n        createTokInstr && !recipient.equals(provider.wallet.publicKey) // TODO: think of a better way to do this with tokens\n          ? [createTokInstr]\n          : undefined,\n    },\n  };\n};\n\nexport const TransferAction: ActionLib<BuildTransferArgs> = {\n  buildIsolatedAction: buildIsolatedTransfer,\n  actionTypeUID,\n  expectedNumberOfOutMints: 0,\n};\n","import { ActionMetadata } from \"./interfaces\";\n\n// TODO: there is a lot of cool stuff to do here\n\ntype ToHitArg = { called: number[] };\n\nexport const buildSeqListOfActionCalls = (\n  actionMetas: ActionMetadata[],\n  initIndices: number[]\n): number[] => {\n  const initHitCounts = [...Array(actionMetas.length)].fill(0);\n  const called = simulateDAG(\n    actionMetas.map((a, i) => {\n      return { ...a, id: i };\n    }),\n    initHitCounts,\n    initIndices\n  );\n\n  return called;\n};\n\n// Returns an ordered list of indices hit\nconst simulateDAG = (\n  actionMetas: (ActionMetadata & { id: number })[],\n  hitCounts: number[],\n  toHit: number[]\n): number[] => {\n  if (toHit.length === 0) return [];\n  const newHitCounts = hitCounts.map((e, i) => getOccurrence(toHit, i) + e)\n  const newRipeActions = actionMetas.filter(\n    (a) => a.ripeAmount === newHitCounts[a.id] && toHit.includes(a.id)\n  );\n  const newToHit = newRipeActions\n    .map((a) => a.nextNodes.map((o) => o.map((i) => i.actionIdx)))\n    .flat()\n    .flat();\n  return [\n    ...newRipeActions.map((a) => a.id),\n    ...simulateDAG(actionMetas, newHitCounts, newToHit),\n  ];\n};\n\nconst getOccurrence = <T>(array: T[], value: T) =>\n  array.filter((v) => v === value).length;\n","import { u64 } from \"@solana/spl-token\";\nimport { LAMPORTS_PER_EPOCH, MS_PER_EPOCH } from \"./constants\";\n\nexport const calculateRent = (size: number, durationMs: number): number => {\n  const rentCost = Math.ceil(LAMPORTS_PER_EPOCH * size * (durationMs / MS_PER_EPOCH));\n\treturn rentCost\n};\n","import MALLOC_IDL from \"./idls/malloc.json\";\nimport * as BufferLayout from \"buffer-layout\";\nimport ACTION_TEMPLATE_IDL from \"./idls/action_template.json\";\nimport { BN, Program, Provider, Wallet, web3 } from \"@project-serum/anchor\";\n// import { BN, Program, Provider, web3 } from \"../../../../../anchor/ts\";\nimport { SendTxRequest } from \"@project-serum/anchor/dist/provider\";\nimport { TOKEN_PROGRAM_ID, u64 } from \"@solana/spl-token\";\nimport {\n  Signer,\n  Transaction,\n  PublicKey,\n  Keypair,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from \"@solana/web3.js\";\nimport {\n  CONSTRUCTION_ACCOUNT_SIZE,\n  LIFETIME_CONSTRUCTION_ACCOUNT_MS,\n  LIFETIME_RESULT_ACCOUNT_MS,\n} from \"./constants\";\nimport { buildSeqListOfActionCalls } from \"./graph-utils\";\nimport {\n  ActionCtxFinal,\n  Action,\n  ActionMetadata,\n  BNIsh,\n  AccountsArray,\n  PartialNextActionCtx,\n  ProcessActionNext,\n} from \"./interfaces\";\nimport { calculateRent } from \"./solana-utils\";\nimport {\n  AccountByMint,\n  createTokenAccountsForActions,\n  transferToTx,\n} from \"./utils/tokens\";\n\nexport interface SendRequestsOpts {\n  onPrepareAccountsDone?: (txHashes: string[]) => Promise<any>;\n  prepareCommitment?: web3.ConfirmOptions;\n  actionCommitment?: web3.ConfirmOptions;\n}\n\nexport interface ConstructionData {\n  txsPrepare: SendTxRequest[];\n  txsActionCalls: SendTxRequest[];\n  construction: Signer;\n  resultAccounts: Signer[];\n  tokenAccounts: AccountByMint;\n}\n\n/**\n * @param authority - B58 Encoded public key of the authority\n * @param actions.tokenAccount - B58 Encoded public key of the token account\n */\nexport interface ConstructionStateSerialized {\n  construction: {\n    authority: string;\n    actions: (ActionMetadata & { tokenAccount: string })[];\n    actionCalls: { callAmount: string; numbTimesHit: number }[];\n    readyCallIdxList: number[];\n  };\n}\n\nexport interface BuildEphemeralOpts {\n  preferredTokenAccounts?: {\n    [mint: string]: PublicKey;\n  };\n}\n\nexport type BuildEphemeralTxsInstr = {\n  actions: Action[];\n  initialSplits: number[];\n  initialActionIndices: number[];\n  amount: BNIsh;\n  authority?: Signer;\n  amountInAccount: PublicKey;\n  amountInAuthority?: Signer;\n  opts?: BuildEphemeralOpts;\n};\n\nexport class MallocSdk {\n  private readonly mallocProgram: Program;\n\n  constructor(\n    private readonly MALLOC_PROGRAM_ID: PublicKey,\n    private readonly provider: Provider\n  ) {\n    this.mallocProgram = new Program(\n      MALLOC_IDL as any,\n      MALLOC_PROGRAM_ID,\n      provider\n    );\n    // TODO: make new program with idl\n  }\n\n  // TODO: prepare and run should j be one thing\n  // Then, to deal with fact that token accounts can j be created, token creation tx's should j happen immediately preceding the first action to use that token\n\n  // TODO create token accounts and store there associations\n  // Append on \"withdraw\" functionality and tx to transfer initial into account\n  async buildTxs({\n    actions,\n    initialSplits,\n    initialActionIndices,\n    amount,\n    authority: _authority,\n    amountInAccount,\n    amountInAuthority: _inAuth,\n    opts,\n  }: BuildEphemeralTxsInstr): Promise<ConstructionData> {\n    let amountInAuthority = _inAuth || (this.provider.wallet as Wallet);\n    let authority = _authority || (this.provider.wallet as Wallet);\n\n    const { accounts: tokenAccounts, txs: tokenTxs } =\n      // TODO: disable this and then later have an option to reenable\n      await createTokenAccountsForActions(\n        this.provider,\n        authority,\n        actions,\n        this.provider.wallet as Wallet,\n        opts?.preferredTokenAccounts\n      );\n    const { construction, tx: constructionTx } =\n      await createAndInitConstruction(\n        this.mallocProgram,\n        authority.publicKey,\n        actions.length\n      );\n    const addConstructionActionsTx = addActionsToConstruction(\n      this.mallocProgram,\n      construction.publicKey,\n      actions.map((a) => a.actionMetadata),\n      authority\n    );\n\n    if (!checkMintsAreTheSame(initialActionIndices.map((i) => actions[i]))) {\n      throw \"Expected all initial token types to be the same\";\n    }\n\n    if (initialActionIndices.length === 0)\n      throw \"Expected initial actions to have length more than 0\";\n\n    const initMint = actions[initialActionIndices[0]].tokenMintIn;\n\n    const transferTx = await transferToTx(\n      amountInAccount,\n      tokenAccounts[initMint.toBase58()].publicKey,\n      new BN(amount), // Add 1 to ensure the accounts don't go to 0 // TODO: does this make sense\n      amountInAuthority\n    );\n\n    const prepareConstructionTx = prepareConstruction(\n      this.mallocProgram,\n      construction.publicKey,\n      initialActionIndices,\n      initialSplits,\n      authority,\n      new BN(amount)\n    );\n\n    const hitOrder = buildSeqListOfActionCalls(\n      actions.map((a) => a.actionMetadata),\n      initialActionIndices\n    );\n    if (hitOrder.length !== actions.length)\n      throw \"An error occurred trying to forecast your construction\";\n\n    const initResultAccounts = await Promise.all(\n      actions.map((a) =>\n        initResultAccount(\n          new Program(\n            ACTION_TEMPLATE_IDL as any,\n            a.actionProgram,\n            this.provider\n          ),\n          // Set the number of out amounts to equal the amount of next nodes\n          a.actionMetadata.nextNodes.length\n        )\n      )\n    );\n\n    // The additional accounts added onto action action accounts follow conventional malloc standards for token\n    // TODO: have an option to not pass in the token accounts\n    const actionCtxFilled: PartialNextActionCtx[] = actions.map((action, i) => {\n      const toAdd = action.addDefaultTokAccounts\n        ? [\n            {\n              address: tokenAccounts[action.tokenMintIn.toBase58()].publicKey,\n              isWriteable: true,\n              isSigner: false,\n            },\n            {\n              address: TOKEN_PROGRAM_ID,\n              isWriteable: false,\n              isSigner: false,\n            },\n            {\n              address: authority.publicKey,\n              isSigner: true,\n              isWriteable: false,\n            },\n          ]\n        : [];\n\n      return {\n        ctx: {\n          resultAccount: initResultAccounts[i].resultAccount.publicKey,\n          actionProgram: action.actionProgram,\n        },\n        actionAccounts: [...toAdd, ...action.actionAccounts] as AccountsArray,\n      };\n    });\n\n    const processTxs = hitOrder.map((hitIndex) =>\n      processAction(\n        this.mallocProgram,\n        hitIndex,\n        construction.publicKey,\n        actionCtxFilled[hitIndex],\n        authority,\n        {\n          data: actions[hitIndex].actionData,\n          instructions: actions[hitIndex].instructions,\n          additionalSigners: actions[hitIndex].additionalSigners,\n          preActionTxs: actions[hitIndex].preActionTxs,\n        }\n      )\n    );\n\n    const atStartOfPrepareTxs = getAllAtStartOfPrepareTxs(actions);\n    // TODO: optional withdraw to accounts\n\n    const txsPrepare = [\n      ...atStartOfPrepareTxs,\n      ...tokenTxs,\n      transferTx,\n      constructionTx,\n      addConstructionActionsTx,\n      prepareConstructionTx,\n      ...initResultAccounts.map((i) => i.tx),\n    ];\n    const txsActionsCalls = [...processTxs.flat()];\n\n    return {\n      construction,\n      txsPrepare: txsPrepare,\n      txsActionCalls: txsActionsCalls,\n      tokenAccounts,\n      resultAccounts: initResultAccounts.map((a) => a.resultAccount),\n    };\n  }\n\n  async getConstructionState(\n    data: ConstructionData\n  ): Promise<ConstructionStateSerialized> {\n    const constructionState: any =\n      (await this.mallocProgram.account.construction.fetch(\n        data.construction.publicKey\n      )) as any;\n    const actionSerialize = (a: any) => {\n      return {\n        tokenAccount: new PublicKey(a.tokenAccount).toBase58(),\n        ripeAmount: a.ripeAmount,\n        nextNodes: a.nextNodes.map((o) =>\n          o.map((nextNode) => {\n            return {\n              actionIdx: nextNode.actionIdx,\n              fraction: new BN(nextNode.fraction).toString(),\n            };\n          })\n        ),\n      };\n    };\n    const actionCallSerialize = (a: any) => {\n      return {\n        numbTimesHit: a.numbTimesHit,\n        callAmount: new BN(a.callAmount).toString(),\n      };\n    };\n    return {\n      construction: {\n        authority: new PublicKey(constructionState.authority).toBase58(),\n        actions: constructionState.actions.map(actionSerialize),\n        actionCalls: constructionState.actionCalls.map(actionCallSerialize),\n        readyCallIdxList: constructionState.readyCallIdxList,\n      },\n    };\n  }\n\n  // TODO:!\n  async deleteEphemeralAccounts(constructionData: ConstructionData) {\n    const withdrawAllRentInstr = (account: Signer) => {};\n    constructionData.construction;\n  }\n\n  async sendRequests(\n    data: ConstructionData,\n    options?: SendRequestsOpts\n  ): Promise<string[]> {\n    await this.provider;\n    const txHashesPrepare =\n      data.txsPrepare.length > 0\n        ? await this.provider.sendAll(data.txsPrepare, {\n            // skipPreflight: true,\n            ...(options?.prepareCommitment || {}),\n          })\n        : [];\n    if (options?.onPrepareAccountsDone && txHashesPrepare.length > 0)\n      await options.onPrepareAccountsDone(txHashesPrepare);\n    const txHashes = await this.provider.sendAll(data.txsActionCalls, {\n      // skipPreflight: true,\n      ...(options?.actionCommitment || {}),\n    });\n    return [...txHashesPrepare, ...txHashes];\n  }\n}\n\nconst createAndInitConstruction = async (\n  program: Program,\n  authority: PublicKey,\n  numbActions: number\n): Promise<{ construction: Signer; tx: SendTxRequest }> => {\n  const ConstructionAccount = web3.Keypair.generate();\n  const tx = program.transaction.initConstruction(numbActions, {\n    accounts: {\n      construction: ConstructionAccount.publicKey,\n      authority,\n      rent: web3.SYSVAR_RENT_PUBKEY,\n    },\n    signers: [ConstructionAccount],\n    instructions: [\n      await SystemProgram.createAccount({\n        fromPubkey: program.provider.wallet.publicKey,\n        newAccountPubkey: ConstructionAccount.publicKey,\n        space: CONSTRUCTION_ACCOUNT_SIZE + 8,\n        lamports: calculateRent(\n          CONSTRUCTION_ACCOUNT_SIZE + 8,\n          LIFETIME_CONSTRUCTION_ACCOUNT_MS\n        ),\n        programId: program.programId,\n      }),\n      // await program.account.construction.createInstruction,\n    ],\n  });\n\n  return {\n    tx: { tx, signers: [ConstructionAccount] },\n    construction: ConstructionAccount,\n  };\n};\n\nconst addActionsToConstruction = (\n  program: Program,\n  construction: PublicKey,\n  actions: ActionMetadata[],\n  authority: Signer | Wallet\n): SendTxRequest => {\n  const signers = (authority as Signer).secretKey ? [authority as Signer] : [];\n  const actionMetadataWithU64: ActionMetadata[] = actions.map((action) => {\n    return {\n      ripeAmount: action.ripeAmount,\n      nextNodes: action.nextNodes.map((nextNode) =>\n        nextNode.map((n) => {\n          return {\n            actionIdx: n.actionIdx,\n            fraction: new u64(n.fraction),\n          };\n        })\n      ),\n    };\n  });\n  return {\n    tx: program.transaction.addActions(actionMetadataWithU64, {\n      accounts: {\n        authority: authority.publicKey,\n        construction: construction,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      signers: signers,\n    }),\n    signers,\n  };\n};\n\nconst getAllAtStartOfPrepareTxs = (actions: Action[]) =>\n  actions.map((a) => a.atStartOfPrepareTxs || []).flat();\n\nconst prepareConstruction = (\n  program: Program,\n  construction: PublicKey,\n  initActionIdx: number[],\n  initActionSplits: number[],\n  authority: Signer | Wallet,\n  amount: BN\n): SendTxRequest => {\n  const signers = (authority as Signer).secretKey ? [authority as Signer] : [];\n  return {\n    tx: program.transaction.prepareConstruction(\n      initActionIdx,\n      initActionSplits.map((i) => new BN(i)),\n      amount,\n      {\n        accounts: {\n          authority: authority.publicKey,\n          construction: construction,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n        },\n        signers,\n      }\n    ),\n    signers,\n  };\n};\n\n/**\n * @param tokenAuthority - defaults to the authority if not provided\n */\nconst processAction = (\n  program: Program,\n  actionIdx: number,\n  construction: PublicKey,\n  actionAccountsCtx: PartialNextActionCtx,\n  authority: Signer | Wallet,\n  opts: {\n    data?: Buffer;\n    tokenAuthority?: Signer | Wallet;\n    instructions?: TransactionInstruction[];\n    additionalSigners?: Signer[];\n    preActionTxs?: SendTxRequest[];\n  }\n): SendTxRequest[] => {\n  const auth = (authority as Signer)?.secretKey ? [authority as Signer] : [];\n  const tokauth = (opts.tokenAuthority as Signer)?.secretKey\n    ? [opts.tokenAuthority as Signer]\n    : [];\n  const signersIsolated = opts.tokenAuthority\n    ? [...tokauth, ...auth]\n    : [...auth];\n  const signers = [...signersIsolated, ...(opts.additionalSigners || [])];\n  return [\n    ...(opts.preActionTxs || []),\n    {\n      tx: program.transaction.processAction(\n        actionIdx,\n        opts.data || Buffer.from([]),\n        {\n          accounts: {\n            construction: construction,\n            rent: web3.SYSVAR_RENT_PUBKEY,\n            authority: authority.publicKey,\n            actionCtxProxy: actionAccountsCtx.ctx,\n            actionAccounts: actionAccountsCtx.actionAccounts,\n          } as ProcessActionNext,\n          signers,\n          instructions: opts.instructions || undefined,\n        }\n      ),\n      signers,\n    },\n  ];\n};\n\nconst initResultAccount = async (\n  actionTemplateProgram: Program,\n  numberOfPossibleOutputTokens: number\n): Promise<{ tx: SendTxRequest; resultAccount: Signer }> => {\n  const result = Keypair.generate();\n  actionTemplateProgram.provider.connection.getMinimumBalanceForRentExemption;\n  const resultSize = calcSizeResultAccount(numberOfPossibleOutputTokens);\n  const tx = actionTemplateProgram.transaction.initResultAccount(\n    numberOfPossibleOutputTokens,\n    {\n      accounts: {\n        result: result.publicKey,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        await SystemProgram.createAccount({\n          fromPubkey: actionTemplateProgram.provider.wallet.publicKey,\n          newAccountPubkey: result.publicKey,\n          space: resultSize,\n          lamports: calculateRent(resultSize, LIFETIME_RESULT_ACCOUNT_MS),\n          programId: actionTemplateProgram.programId,\n        }),\n      ],\n      signers: [result],\n    }\n  );\n  return {\n    tx: { tx, signers: [result] },\n    resultAccount: result,\n  };\n};\n\n// From https://github.com/solana-labs/solana-program-library/blob/30406eea40671afefa18b5ae6c9b37ffcb6235d0/token/js/client/token.js#L1850\n/**\n * Construct a Close instruction\n *\n * @param programId SPL Token program account\n * @param account Account to close\n * @param dest Account to receive the remaining balance of the closed account\n * @param authority Account Close authority\n * @param multiSigners Signing accounts if `owner` is a multiSig\n */\nconst createCloseAccountInstruction = (\n  programId: PublicKey,\n  account: PublicKey,\n  dest: PublicKey,\n  owner: PublicKey\n): TransactionInstruction => {\n  throw \"TODO\";\n};\n\n// 8 for the discriminator, 32 for the owner pubkey, 4 for the number of results, and the rest for numb actions, then 64 as a buffer\nconst calcSizeResultAccount = (numberOfActions: number) =>\n  8 + 32 + 4 + numberOfActions * 8 + 64;\n\nconst checkMintsAreTheSame = (actions: Action[]) => {\n  if (actions.length === 0) return true;\n  const mint = actions[0].tokenMintIn.toBase58();\n  return actions.every((a) => a.tokenMintIn.toBase58() === mint);\n};\n","export * from \"./contexts\";\nexport * from \"./common\";\n","import { Provider } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport {\n  Action,\n  ActionMetadata,\n  BuildActionMap,\n  Construction,\n  NextNode,\n  NonUserSpecificConstruction,\n} from \"..\";\nimport { buildSeqListOfActionCalls } from \"../graph-utils\";\nimport { deepCloneObject } from \"../utils/object\";\nimport {\n  getTokenAccountUsedByMalloc,\n  PreferredTokenAccounts,\n} from \"../utils/tokens\";\n\nconst getPreviousActions = (\n  actionIdx: number,\n  actions: (Action | undefined)[]\n): { idx: number; idxInNextNodes: [number, number] }[] => {\n  // First add indices to each action\n  // Then remove the undefined actions\n  // Then search if the action has the actionIdx\n  return actions\n    .map((a, i) => {\n      return a ? { ...a, idx: i } : a;\n    })\n    .filter((a) => !!a)\n    .map((a: Action & { idx: number }) => {\n      const idxInNextNodes: [number, number] = [-1, -1];\n      // TODO: note this assumes that each action is only called once from a prior\n      for (let i = 0; i < a.actionMetadata.nextNodes.length; i++) {\n        idxInNextNodes[1] = a.actionMetadata.nextNodes[i]\n          .map((item) => item.actionIdx)\n          .indexOf(actionIdx);\n        if (idxInNextNodes[1] !== -1) {\n          idxInNextNodes[0] = i;\n          break;\n        }\n      }\n      if (idxInNextNodes[0] === -1 || idxInNextNodes[1] === -1)\n        return undefined;\n      return {\n        idx: a.idx,\n        idxInNextNodes,\n      };\n    })\n    .filter((i) => !!i);\n};\n\n/**\n * Get the mint from prior actions\n *\n * This assumes that the action given is not an initial action\n */\nconst getMintAccountFromPriorActions = (\n  actionIdx: number,\n  actions: (Action | undefined)[]\n): string => {\n  const previousActions = getPreviousActions(actionIdx, actions);\n  const mints = previousActions.map((prev) => {\n    const action = actions[prev.idx] as Action; // assume its not undefined because getPreviousAction ensures its not undefined\n    const mint = action.tokenMintOuts[prev.idxInNextNodes[0]];\n    return mint.toBase58();\n  });\n  if (mints.length < 1)\n    throw `Expected to find a previous action for a non initial action`;\n  const firstMint = mints[0];\n  if (!mints.every((mint) => mint === firstMint))\n    throw `Expected all previous mints to be the same for the action`;\n  return firstMint;\n};\n\nexport const buildConstructionFromNonUserSpecific = async (\n  construction: NonUserSpecificConstruction,\n  buildActionMap: BuildActionMap,\n  initTokenAccount: string,\n  initMintAccount: string,\n  provider: Provider,\n  preferredTokenAccounts?: PreferredTokenAccounts\n): Promise<Construction> => {\n  const orderActionsHit = buildSeqListOfActionCalls(\n    construction.actionDatas.map((a) => a.actionMetadata),\n    construction.initialActionIndices\n  );\n\n  if (orderActionsHit.length !== construction.actionDatas.length)\n    throw `An unexpected error occurred, the order of actions hit should match the length of actions`;\n\n  const actions: (Action | undefined)[] = [\n    ...Array(construction.actionDatas.length),\n  ];\n  for (let i = 0; i < orderActionsHit.length; i++) {\n    const actionIdx = orderActionsHit[i];\n    const mintAccount = construction.initialActionIndices.includes(actionIdx)\n      ? initMintAccount\n      : getMintAccountFromPriorActions(actionIdx, actions);\n    const actionData = construction.actionDatas[actionIdx];\n    const buildFN = buildActionMap[actionData.actionTypeUID].buildIsolatedAction;\n    if (!buildFN)\n      throw `Could not find a builder function for action with UID ${actionData.actionTypeUID}`;\n    const tokenAccount = construction.initialActionIndices.includes(actionIdx)\n      ? initTokenAccount\n      : (\n          await getTokenAccountUsedByMalloc(\n            provider.wallet.publicKey,\n            new PublicKey(mintAccount),\n            preferredTokenAccounts\n          )\n        ).toBase58();\n    const { isolatedAction } = await buildFN(\n      actionData.buildActionInputs,\n      mintAccount,\n      tokenAccount,\n      actionData.actionPID,\n      provider,\n      {\n        preferredTokenAccounts,\n      }\n    );\n    const action = {\n      ...isolatedAction,\n      actionMetadata: actionData.actionMetadata,\n    };\n    actions[actionIdx] = action;\n  }\n\n  return {\n    actions,\n    initialActionIndices: construction.initialActionIndices,\n    initialSplits: construction.initialSplits,\n    amount: new BN(construction.amount),\n  };\n};\n\nconst offsetNextNodes = (\n  nextNodes: ActionMetadata[\"nextNodes\"],\n  offset: number\n): ActionMetadata[\"nextNodes\"] =>\n  nextNodes.map((nextNodeSet) =>\n    nextNodeSet.map((n) => {\n      return {\n        actionIdx: n.actionIdx + offset,\n        fraction: n.fraction,\n      } as NextNode;\n    })\n  );\n\n/**\n * Merge two constructions into 1. One is the parent and keeps its initial indices and amounts,\n * the other discards the amount value and initial indices/ splits and replaces them with the specified inputs\n *\n * @param appendChildInitToParent - where to append the initial action indices of the child construction\n * to the parent.\n */\nexport const mergeConstructions = (\n  parentConstruction: NonUserSpecificConstruction,\n  childConstruction: NonUserSpecificConstruction,\n  appendChildInitToParent: {\n    appendToInitial?: boolean;\n    indexInParent?: {\n      actionIdx: number;\n      nextNodeIdx: number;\n    };\n    splitFrac: number | string;\n  }[]\n): NonUserSpecificConstruction => {\n  // deep copy the child and parent\n  const childConstructionCloned = deepCloneObject(childConstruction);\n  const parentConstructionClone = deepCloneObject(parentConstruction);\n\n  if (\n    appendChildInitToParent.length! ==\n      childConstructionCloned.initialActionIndices.length &&\n    appendChildInitToParent.length !==\n      childConstructionCloned.initialSplits.length\n  ) {\n    throw `Expected the info to append the child to the parent to provide the same number of indices as the number of initial splits in the child`;\n  }\n  const newActionDatasArray = [\n    ...parentConstructionClone.actionDatas,\n    ...childConstructionCloned.actionDatas.map((a) => {\n      return {\n        ...a,\n        actionMetadata: {\n          ...a.actionMetadata,\n          nextNodes: offsetNextNodes(\n            a.actionMetadata.nextNodes,\n            parentConstructionClone.actionDatas.length\n          ),\n        },\n      };\n    }),\n  ];\n\n  const childInitialActionsToAdd = [];\n  for (let i = 0; i < appendChildInitToParent.length; i++) {\n    if (appendChildInitToParent[i].appendToInitial) {\n      childInitialActionsToAdd.push({\n        idx: i + parentConstructionClone.actionDatas.length,\n        fraction: appendChildInitToParent[i].splitFrac,\n      });\n    } else if (appendChildInitToParent[i].indexInParent) {\n      newActionDatasArray[\n        appendChildInitToParent[i].indexInParent.actionIdx\n      ].actionMetadata.nextNodes[\n        appendChildInitToParent[i].indexInParent.nextNodeIdx\n      ].push({\n        fraction: appendChildInitToParent[i].splitFrac,\n        actionIdx: i + parentConstructionClone.actionDatas.length,\n      });\n    } else {\n      throw `Expected the appendChildInitToParent to either append to initial or contain info as to where to append in the parent`;\n    }\n  }\n\n  const newInitialActionIndices = [\n    ...parentConstructionClone.initialActionIndices,\n    ...childInitialActionsToAdd.map((c) => c.idx),\n  ];\n  const newIninitialSplits = [\n    ...parentConstructionClone.initialSplits,\n    ...childInitialActionsToAdd.map((c) => c.fraction),\n  ];\n  return {\n    actionDatas: newActionDatasArray,\n    initialActionIndices: newInitialActionIndices,\n    initialSplits: newIninitialSplits,\n    amount: parentConstructionClone.amount,\n  };\n};\n","export const getConstants = () => {\n  const env = process.env.REACT_APP_SOLANA_NETWORK;\n  switch (env) {\n    case \"devnet\":\n      return {\n        MALLOC_PROGRAM_ID: \"9i4MAnhYagLr1vEo5jdmLehRe8Sm5Lx8fHaQNJfbFCve\",\n        mallocSpl: {\n          TRANSFER_PROGRAM_ID: \"ETpyJNQLorJbAcrPQpM9bkYxYMakegBh93kqZ1KnTBjr\",\n          SWAP_PROGRAM_ID: \"7T6seoCvCQeUeSTf2EAwX5SnyrZvX7BFUMHi74ZodBKH\",\n          DUMMY_PASS_THROUGH: \"DBhGd4VREBAw14vV1yaLXfCTtanPBwQfEErg1fe27diJ\",\n          MINT_TO: \"77WQMNHSBe6BNdMY8R1FD4JX89o2fXr5FhKNerTcJsHJ\",\n          SOLEND_ACTION: \"BVmJHQLHAAdgALGi6rdGxdsk5ate41kbpDMGL9XAVanP\",\n        },\n        projectSerum: {\n          DEX_PROGRAM_ID: \"DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY\",\n        },\n        demo: {\n          FAKE_USDC: \"AkzN2jJrorpUY2ApfL2UsBeTfuv1XHFKGLQurZJg6BhN\",\n          FAKE_USDC_GD: \"2BB7fDrLgBNSMCLqD835GisCHrHrGHsS8SJr6brtnWk2\",\n          FAKE_TOKEN_A: \"9GmQdigrAFdX67EMrVFwMepEN8rEdMdp8CPUEPJRY8sj\",\n        },\n        INITIAL_SPLITTER_ID_UUID: \"initial\",\n        solana: {\n          RPC: \"https://explorer-api.devnet.solana.com\",\n          NETWORK: env,\n        },\n      };\n\n    default:\n      throw \"Unexpected env\";\n  }\n  throw \"Unexpected env\";\n};\n","export class Assignable {\n\tconstructor(properties) {\n\t\t\tObject.keys(properties).map((key) => {\n\t\t\t\t\tthis[key] = properties[key];\n\t\t\t});\n\t}\n}"],"sourceRoot":""}